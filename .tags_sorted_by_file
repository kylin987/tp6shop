BaseController	app\BaseController.php	/^abstract class BaseController$/;"	c
__construct	app\BaseController.php	/^    public function __construct(App $app)$/;"	f
app	app\BaseController.php	/^        $this->app     = $app;$/;"	v
app	app\BaseController.php	/^    protected $app;$/;"	v
batchValidate	app\BaseController.php	/^    protected $batchValidate = false;$/;"	v
class	app\BaseController.php	/^            $class = false !== strpos($validate, '\\\\') ? $validate : $this->app->parseClass('validate', $validate);$/;"	v
initialize	app\BaseController.php	/^    protected function initialize()$/;"	f
message	app\BaseController.php	/^    protected function validate(array $data, $validate, array $message = [], bool $batch = false)$/;"	v
middleware	app\BaseController.php	/^    protected $middleware = [];$/;"	v
request	app\BaseController.php	/^        $this->request = $this->app->request;$/;"	v
request	app\BaseController.php	/^    protected $request;$/;"	v
v	app\BaseController.php	/^            $v     = new $class();$/;"	v
v	app\BaseController.php	/^            $v = new Validate();$/;"	v
validate	app\BaseController.php	/^    protected function validate(array $data, $validate, array $message = [], bool $batch = false)$/;"	f
ExceptionHandle	app\ExceptionHandle.php	/^class ExceptionHandle extends Handle$/;"	c
ignoreReport	app\ExceptionHandle.php	/^    protected $ignoreReport = [$/;"	v
render	app\ExceptionHandle.php	/^    public function render($request, Throwable $e): Response$/;"	f
report	app\ExceptionHandle.php	/^    public function report(Throwable $exception): void$/;"	f
Request	app\Request.php	/^class Request extends \\think\\Request$/;"	c
Demo	app\controller\Demo.php	/^class Demo extends BaseController$/;"	c
hello	app\controller\Demo.php	/^    public function hello()$/;"	f
result	app\controller\Demo.php	/^    	$result = [$/;"	v
Index	app\controller\Index.php	/^class Index extends BaseController$/;"	c
hello	app\controller\Index.php	/^    public function hello($name = 'ThinkPHP6')$/;"	f
index	app\controller\Index.php	/^    public function index()$/;"	f
http	public\index.php	/^$http = (new App())->http;$/;"	v
response	public\index.php	/^$response = $http->run();$/;"	v
ClassLoader	vendor\composer\ClassLoader.php	/^class ClassLoader$/;"	c
add	vendor\composer\ClassLoader.php	/^    public function add($prefix, $paths, $prepend = false)$/;"	f
addClassMap	vendor\composer\ClassLoader.php	/^    public function addClassMap(array $classMap)$/;"	f
addPsr4	vendor\composer\ClassLoader.php	/^    public function addPsr4($prefix, $paths, $prepend = false)$/;"	f
apcuPrefix	vendor\composer\ClassLoader.php	/^        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;$/;"	v
apcuPrefix	vendor\composer\ClassLoader.php	/^    private $apcuPrefix;$/;"	v
classMap	vendor\composer\ClassLoader.php	/^            $this->classMap = $classMap;$/;"	v
classMap	vendor\composer\ClassLoader.php	/^            $this->classMap = array_merge($this->classMap, $classMap);$/;"	v
classMap	vendor\composer\ClassLoader.php	/^    private $classMap = array();$/;"	v
classMapAuthoritative	vendor\composer\ClassLoader.php	/^        $this->classMapAuthoritative = $classMapAuthoritative;$/;"	v
classMapAuthoritative	vendor\composer\ClassLoader.php	/^    private $classMapAuthoritative = false;$/;"	v
does	vendor\composer\ClassLoader.php	/^            \/\/ Remember that this class does not exist.$/;"	c
fallbackDirsPsr0	vendor\composer\ClassLoader.php	/^                $this->fallbackDirsPsr0 = array_merge($/;"	v
fallbackDirsPsr0	vendor\composer\ClassLoader.php	/^            $this->fallbackDirsPsr0 = (array) $paths;$/;"	v
fallbackDirsPsr0	vendor\composer\ClassLoader.php	/^    private $fallbackDirsPsr0 = array();$/;"	v
fallbackDirsPsr4	vendor\composer\ClassLoader.php	/^                $this->fallbackDirsPsr4 = array_merge($/;"	v
fallbackDirsPsr4	vendor\composer\ClassLoader.php	/^            $this->fallbackDirsPsr4 = (array) $paths;$/;"	v
fallbackDirsPsr4	vendor\composer\ClassLoader.php	/^    private $fallbackDirsPsr4 = array();$/;"	v
file	vendor\composer\ClassLoader.php	/^            $file = $this->findFileWithExtension($class, '.hh');$/;"	v
file	vendor\composer\ClassLoader.php	/^            $file = apcu_fetch($this->apcuPrefix.$class, $hit);$/;"	v
file	vendor\composer\ClassLoader.php	/^        $file = $this->findFileWithExtension($class, '.php');$/;"	v
file	vendor\composer\ClassLoader.php	/^        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {$/;"	v
files	vendor\composer\ClassLoader.php	/^     * Turns on searching the include path for class files.$/;"	c
findFile	vendor\composer\ClassLoader.php	/^    public function findFile($class)$/;"	f
findFileWithExtension	vendor\composer\ClassLoader.php	/^    private function findFileWithExtension($class, $ext)$/;"	f
first	vendor\composer\ClassLoader.php	/^        $first = $class[0];$/;"	v
first	vendor\composer\ClassLoader.php	/^        $first = $prefix[0];$/;"	v
getApcuPrefix	vendor\composer\ClassLoader.php	/^    public function getApcuPrefix()$/;"	f
getClassMap	vendor\composer\ClassLoader.php	/^    public function getClassMap()$/;"	f
getFallbackDirs	vendor\composer\ClassLoader.php	/^    public function getFallbackDirs()$/;"	f
getFallbackDirsPsr4	vendor\composer\ClassLoader.php	/^    public function getFallbackDirsPsr4()$/;"	f
getPrefixes	vendor\composer\ClassLoader.php	/^    public function getPrefixes()$/;"	f
getPrefixesPsr4	vendor\composer\ClassLoader.php	/^    public function getPrefixesPsr4()$/;"	f
getUseIncludePath	vendor\composer\ClassLoader.php	/^    public function getUseIncludePath()$/;"	f
in	vendor\composer\ClassLoader.php	/^ * In this example, if you try to use a class in the Symfony\\Component$/;"	c
includeFile	vendor\composer\ClassLoader.php	/^function includeFile($file)$/;"	f
is	vendor\composer\ClassLoader.php	/^     * Finds the path to the file where the class is defined.$/;"	c
is	vendor\composer\ClassLoader.php	/^ * This class is loosely based on the Symfony UniversalClassLoader.$/;"	c
isClassMapAuthoritative	vendor\composer\ClassLoader.php	/^    public function isClassMapAuthoritative()$/;"	f
lastPos	vendor\composer\ClassLoader.php	/^            while (false !== $lastPos = strrpos($subPath, '\\\\')) {$/;"	v
length	vendor\composer\ClassLoader.php	/^            $length = strlen($prefix);$/;"	v
loadClass	vendor\composer\ClassLoader.php	/^    public function loadClass($class)$/;"	f
loader	vendor\composer\ClassLoader.php	/^ *     $loader = new \\Composer\\Autoload\\ClassLoader();$/;"	v
loader	vendor\composer\ClassLoader.php	/^ * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.$/;"	c
logicalPathPsr0	vendor\composer\ClassLoader.php	/^            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logicalPathPsr0	vendor\composer\ClassLoader.php	/^            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)$/;"	v
logicalPathPsr4	vendor\composer\ClassLoader.php	/^        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;$/;"	v
lookup	vendor\composer\ClassLoader.php	/^     * Should class lookup fail if not found in the current class map?$/;"	c
map	vendor\composer\ClassLoader.php	/^        \/\/ class map lookup$/;"	c
map	vendor\composer\ClassLoader.php	/^     * that have not been registered with the class map.$/;"	c
missingClasses	vendor\composer\ClassLoader.php	/^    private $missingClasses = array();$/;"	v
name	vendor\composer\ClassLoader.php	/^            \/\/ PEAR-like class name$/;"	c
name	vendor\composer\ClassLoader.php	/^            \/\/ namespaced class name$/;"	c
or	vendor\composer\ClassLoader.php	/^     * Loads the given class or interface.$/;"	c
pathEnd	vendor\composer\ClassLoader.php	/^                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);$/;"	v
pos	vendor\composer\ClassLoader.php	/^        if (false !== $pos = strrpos($class, '\\\\')) {$/;"	v
prefix	vendor\composer\ClassLoader.php	/^            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {$/;"	v
prefixDirsPsr4	vendor\composer\ClassLoader.php	/^    private $prefixDirsPsr4 = array();$/;"	v
prefixLengthsPsr4	vendor\composer\ClassLoader.php	/^    private $prefixLengthsPsr4 = array();$/;"	v
prefixesPsr0	vendor\composer\ClassLoader.php	/^    private $prefixesPsr0 = array();$/;"	v
prepend	vendor\composer\ClassLoader.php	/^    public function add($prefix, $paths, $prepend = false)$/;"	v
prepend	vendor\composer\ClassLoader.php	/^    public function addPsr4($prefix, $paths, $prepend = false)$/;"	v
register	vendor\composer\ClassLoader.php	/^    public function register($prepend = false)$/;"	f
search	vendor\composer\ClassLoader.php	/^                $search = $subPath . '\\\\';$/;"	v
set	vendor\composer\ClassLoader.php	/^    public function set($prefix, $paths)$/;"	f
setApcuPrefix	vendor\composer\ClassLoader.php	/^    public function setApcuPrefix($apcuPrefix)$/;"	f
setClassMapAuthoritative	vendor\composer\ClassLoader.php	/^    public function setClassMapAuthoritative($classMapAuthoritative)$/;"	f
setPsr4	vendor\composer\ClassLoader.php	/^    public function setPsr4($prefix, $paths)$/;"	f
setUseIncludePath	vendor\composer\ClassLoader.php	/^    public function setUseIncludePath($useIncludePath)$/;"	f
subPath	vendor\composer\ClassLoader.php	/^                $subPath = substr($subPath, 0, $lastPos);$/;"	v
subPath	vendor\composer\ClassLoader.php	/^            $subPath = $class;$/;"	v
under	vendor\composer\ClassLoader.php	/^ * the autoloader will first look for the class under the component\/$/;"	c
unregister	vendor\composer\ClassLoader.php	/^    public function unregister()$/;"	f
useIncludePath	vendor\composer\ClassLoader.php	/^        $this->useIncludePath = $useIncludePath;$/;"	v
useIncludePath	vendor\composer\ClassLoader.php	/^    private $useIncludePath = false;$/;"	v
baseDir	vendor\composer\autoload_classmap.php	/^$baseDir = dirname($vendorDir);$/;"	v
vendorDir	vendor\composer\autoload_classmap.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
baseDir	vendor\composer\autoload_files.php	/^$baseDir = dirname($vendorDir);$/;"	v
vendorDir	vendor\composer\autoload_files.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
baseDir	vendor\composer\autoload_namespaces.php	/^$baseDir = dirname($vendorDir);$/;"	v
vendorDir	vendor\composer\autoload_namespaces.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
baseDir	vendor\composer\autoload_psr4.php	/^$baseDir = dirname($vendorDir);$/;"	v
vendorDir	vendor\composer\autoload_psr4.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
ComposerAutoloaderInit95f3614b4af9644baab3a9570677b4a6	vendor\composer\autoload_real.php	/^class ComposerAutoloaderInit95f3614b4af9644baab3a9570677b4a6$/;"	c
classMap	vendor\composer\autoload_real.php	/^            $classMap = require __DIR__ . '\/autoload_classmap.php';$/;"	v
composerRequire95f3614b4af9644baab3a9570677b4a6	vendor\composer\autoload_real.php	/^function composerRequire95f3614b4af9644baab3a9570677b4a6($fileIdentifier, $file)$/;"	f
fileIdentifier	vendor\composer\autoload_real.php	/^        foreach ($includeFiles as $fileIdentifier => $file) {$/;"	v
getLoader	vendor\composer\autoload_real.php	/^    public static function getLoader()$/;"	f
includeFiles	vendor\composer\autoload_real.php	/^            $includeFiles = Composer\\Autoload\\ComposerStaticInit95f3614b4af9644baab3a9570677b4a6::$files;$/;"	v
includeFiles	vendor\composer\autoload_real.php	/^            $includeFiles = require __DIR__ . '\/autoload_files.php';$/;"	v
loadClassLoader	vendor\composer\autoload_real.php	/^    public static function loadClassLoader($class)$/;"	f
loader	vendor\composer\autoload_real.php	/^        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();$/;"	v
loader	vendor\composer\autoload_real.php	/^    private static $loader;$/;"	v
map	vendor\composer\autoload_real.php	/^            $map = require __DIR__ . '\/autoload_namespaces.php';$/;"	v
map	vendor\composer\autoload_real.php	/^            $map = require __DIR__ . '\/autoload_psr4.php';$/;"	v
namespace	vendor\composer\autoload_real.php	/^            foreach ($map as $namespace => $path) {$/;"	v
useStaticLoader	vendor\composer\autoload_real.php	/^        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());$/;"	v
ComposerStaticInit95f3614b4af9644baab3a9570677b4a6	vendor\composer\autoload_static.php	/^class ComposerStaticInit95f3614b4af9644baab3a9570677b4a6$/;"	c
fallbackDirsPsr0	vendor\composer\autoload_static.php	/^    public static $fallbackDirsPsr0 = array ($/;"	v
files	vendor\composer\autoload_static.php	/^    public static $files = array ($/;"	v
getInitializer	vendor\composer\autoload_static.php	/^    public static function getInitializer(ClassLoader $loader)$/;"	f
prefixDirsPsr4	vendor\composer\autoload_static.php	/^    public static $prefixDirsPsr4 = array ($/;"	v
prefixLengthsPsr4	vendor\composer\autoload_static.php	/^    public static $prefixLengthsPsr4 = array ($/;"	v
CachedAdapterSpec	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^class CachedAdapterSpec extends ObjectBehavior$/;"	c
adapter	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $this->adapter = $adapter;$/;"	v
adapter	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    private $adapter;$/;"	v
cache	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $this->cache = $cache;$/;"	v
cache	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    private $cache;$/;"	v
config	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $config = new Config();$/;"	v
contents	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $contents = 'contents';$/;"	v
contents	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $contents = tmpfile();$/;"	v
delete	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $delete = 'delete';$/;"	v
delete	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $delete = 'delete.txt';$/;"	v
dirname	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $dirname = 'delete';$/;"	v
dirname	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $dirname = 'dirname';$/;"	v
it_is_initializable	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_is_initializable()$/;"	f
it_should_cache_contents_listings	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_contents_listings()$/;"	f
it_should_cache_copies	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_copies()$/;"	f
it_should_cache_deletes	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_deletes()$/;"	f
it_should_cache_dir_creates	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_dir_creates()$/;"	f
it_should_cache_dir_deletes	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_dir_deletes()$/;"	f
it_should_cache_get_metadata	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_get_metadata()$/;"	f
it_should_cache_get_mimetype	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_get_mimetype()$/;"	f
it_should_cache_get_size	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_get_size()$/;"	f
it_should_cache_get_visibility	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_get_visibility()$/;"	f
it_should_cache_has	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_has()$/;"	f
it_should_cache_missing_files	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_missing_files()$/;"	f
it_should_cache_reads	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_reads()$/;"	f
it_should_cache_renames	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_renames()$/;"	f
it_should_cache_set_visibility	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_set_visibility()$/;"	f
it_should_cache_streamed_updates	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_streamed_updates()$/;"	f
it_should_cache_streamed_writes	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_streamed_writes()$/;"	f
it_should_cache_timestamps	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_timestamps()$/;"	f
it_should_cache_updated	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_updated()$/;"	f
it_should_cache_writes	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_cache_writes()$/;"	f
it_should_delete_when_metadata_is_missing	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_delete_when_metadata_is_missing()$/;"	f
it_should_forward_read_streams	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_forward_read_streams()$/;"	f
it_should_ignore_copy_fails	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_copy_fails()$/;"	f
it_should_ignore_create_dir_fails	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_create_dir_fails()$/;"	f
it_should_ignore_delete_dir_fails	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_delete_dir_fails()$/;"	f
it_should_ignore_delete_fails	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_delete_fails()$/;"	f
it_should_ignore_failed_get_metadata	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_get_metadata()$/;"	f
it_should_ignore_failed_get_mimetype	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_get_mimetype()$/;"	f
it_should_ignore_failed_get_size	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_get_size()$/;"	f
it_should_ignore_failed_get_timestamps	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_get_timestamps()$/;"	f
it_should_ignore_failed_get_visibility	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_get_visibility()$/;"	f
it_should_ignore_failed_list_contents	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_list_contents()$/;"	f
it_should_ignore_failed_reads	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_reads()$/;"	f
it_should_ignore_failed_streamed_updates	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_streamed_updates()$/;"	f
it_should_ignore_failed_streamed_writes	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_streamed_writes()$/;"	f
it_should_ignore_failed_updates	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_updates()$/;"	f
it_should_ignore_failed_writes	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_failed_writes()$/;"	f
it_should_ignore_rename_fails	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_rename_fails()$/;"	f
it_should_ignore_set_visibility_fails	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_ignore_set_visibility_fails()$/;"	f
it_should_indicate_file_existance	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_indicate_file_existance()$/;"	f
it_should_indicate_missing_files	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_indicate_missing_files()$/;"	f
it_should_list_cached_contents	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_list_cached_contents()$/;"	f
it_should_use_cached_file_contents	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_use_cached_file_contents()$/;"	f
it_should_use_cached_metadata	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_use_cached_metadata()$/;"	f
it_should_use_cached_mimetype	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_use_cached_mimetype()$/;"	f
it_should_use_cached_size	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_use_cached_size()$/;"	f
it_should_use_cached_timestamp	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_use_cached_timestamp()$/;"	f
it_should_use_cached_visibility	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function it_should_use_cached_visibility()$/;"	f
let	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    public function let(AdapterInterface $adapter, CacheInterface $cache)$/;"	f
make_it_cache_getter	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    protected function make_it_cache_getter($method, $path, $response)$/;"	f
make_it_ignore_failed_getter	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    protected function make_it_ignore_failed_getter($method, $path)$/;"	f
make_it_use_getter_cache	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^    protected function make_it_use_getter_cache($method, $path, $response)$/;"	f
new	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $new = 'new.txt';$/;"	v
old	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $old = 'old.txt';$/;"	v
path	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $path = 'path.txt';$/;"	v
recursive	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $this->cache->isComplete($dirname = 'dirname', $recursive = true)->willReturn(false);$/;"	v
recursive	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $this->cache->isComplete($dirname = 'dirname', $recursive = true)->willReturn(true);$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = ['mimetype' => 'text\/plain', 'path' => $path];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = ['path' => $dirname, 'type' => 'dir'];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = ['path' => $path, 'contents' => 'contents'];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = ['path' => $path];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = ['size' => 1234, 'path' => $path];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = ['visibility' => AdapterInterface::VISIBILITY_PUBLIC, 'path' => $path];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = [['path' => 'path.txt']];$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = compact('path', 'contents', 'type');$/;"	v
response	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $response = compact('path', 'stream', 'type');$/;"	v
stream	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $stream = tmpfile();$/;"	v
type	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $type = 'file';$/;"	v
visibility	vendor\league\flysystem-cached-adapter\spec\CachedAdapterSpec.php	/^        $visibility = AdapterInterface::VISIBILITY_PUBLIC;$/;"	v
CacheInterface	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^interface CacheInterface extends ReadInterface$/;"	i
autosave	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function autosave();$/;"	f
autosave	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function updateObject($path, array $object, $autosave = false);$/;"	v
copy	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function copy($path, $newpath);$/;"	f
delete	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function delete($path);$/;"	f
deleteDir	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function deleteDir($dirname);$/;"	f
flush	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function flush();$/;"	f
isComplete	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function isComplete($dirname, $recursive);$/;"	f
load	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function load();$/;"	f
rename	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function rename($path, $newpath);$/;"	f
save	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function save();$/;"	f
setComplete	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function setComplete($dirname, $recursive);$/;"	f
storeContents	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function storeContents($directory, array $contents, $recursive);$/;"	f
storeMiss	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function storeMiss($path);$/;"	f
updateObject	vendor\league\flysystem-cached-adapter\src\CacheInterface.php	/^    public function updateObject($path, array $object, $autosave = false);$/;"	f
CachedAdapter	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^class CachedAdapter implements AdapterInterface$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function __construct(AdapterInterface $adapter, CacheInterface $cache)$/;"	f
adapter	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $this->adapter = $adapter;$/;"	v
adapter	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    private $adapter;$/;"	v
adapterResponse	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $adapterResponse = $this->adapter->has($path);$/;"	v
cache	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $this->cache = $cache;$/;"	v
cache	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    private $cache;$/;"	v
cacheEntry	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^            $cacheEntry = is_array($adapterResponse) ? $adapterResponse : compact('path');$/;"	v
cacheHas	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $cacheHas = $this->cache->has($path);$/;"	v
callWithFallback	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    protected function callWithFallback($property, $path, $method)$/;"	f
contents	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^            $contents = false;$/;"	v
copy	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function copy($path, $newpath)$/;"	f
createDir	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function createDir($dirname, Config $config)$/;"	f
delete	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function deleteDir($dirname)$/;"	f
getAdapter	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getAdapter()$/;"	f
getCache	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getCache()$/;"	f
getMetadata	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getMimetype($path)$/;"	f
getSize	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function getVisibility($path)$/;"	f
has	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function has($path)$/;"	f
listContents	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
object	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^            $object = $result + compact('path');$/;"	v
path	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^            $path = $dirname;$/;"	v
read	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function read($path)$/;"	f
readStream	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function readStream($path)$/;"	f
recursive	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
rename	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function rename($path, $newPath)$/;"	f
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->copy($path, $newpath);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->createDir($dirname, $config);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->delete($path);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->deleteDir($dirname);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->listContents($directory, $recursive);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->rename($path, $newPath);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->setVisibility($path, $visibility);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->update($path, $contents, $config);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->updateStream($path, $resource, $config);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->write($path, $contents, $config);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->writeStream($path, $resource, $config);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->adapter->{$method}($path);$/;"	v
result	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^        $result = $this->cache->{$method}($path);$/;"	v
setVisibility	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function setVisibility($path, $visibility)$/;"	f
type	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^            $type = 'dir';$/;"	v
update	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function update($path, $contents, Config $config)$/;"	f
updateStream	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function updateStream($path, $resource, Config $config)$/;"	f
write	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function write($path, $contents, Config $config)$/;"	f
writeStream	vendor\league\flysystem-cached-adapter\src\CachedAdapter.php	/^    public function writeStream($path, $resource, Config $config)$/;"	f
AbstractCache	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^abstract class AbstractCache implements CacheInterface$/;"	c
__destruct	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function __destruct()$/;"	f
autosave	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $this->autosave = $autosave;$/;"	v
autosave	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    protected $autosave = true;$/;"	v
autosave	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function autosave()$/;"	f
autosave	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function updateObject($path, array $object, $autosave = false)$/;"	v
cache	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            $this->cache = $cache;$/;"	v
cache	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $this->cache = [];$/;"	v
cache	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    protected $cache = [];$/;"	v
cachedProperties	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $cachedProperties = array_flip([$/;"	v
cleanContents	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function cleanContents(array $contents)$/;"	f
cleaned	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $cleaned = $this->cleanContents($this->cache);$/;"	v
complete	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            $this->complete = $complete;$/;"	v
complete	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $this->complete = [];$/;"	v
complete	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    protected $complete = [];$/;"	v
copy	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function copy($path, $newpath)$/;"	f
delete	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function deleteDir($dirname)$/;"	f
directories	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $directories = [$directory];$/;"	v
directory	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        return $directory === '' || strpos($path, $directory . '\/') === 0;$/;"	v
ensureParentDirectories	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function ensureParentDirectories($path)$/;"	f
flush	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function flush()$/;"	f
getAutosave	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getAutosave()$/;"	f
getForStorage	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getForStorage()$/;"	f
getMetadata	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getMimetype($path)$/;"	f
getSize	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function getVisibility($path)$/;"	f
has	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function has($path)$/;"	f
isComplete	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function isComplete($dirname, $recursive)$/;"	f
listContents	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function listContents($dirname = '', $recursive = false)$/;"	f
mimetype	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $mimetype = Util::guessMimeType($path, $result['contents']);$/;"	v
object	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            $object = $this->cache[$object['path']];$/;"	v
object	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            $object = $this->cache[$path];$/;"	v
object	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            $object = Util::pathinfo($object['dirname']);$/;"	v
object	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            $object = array_merge($object, Util::pathinfo($newpath));$/;"	v
object	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $object = $this->cache[$path];$/;"	v
path	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^            if ($this->pathIsInDirectory($dirname, $path) || $path === $dirname) {$/;"	v
path	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        foreach ($contents as $path => $object) {$/;"	v
path	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        foreach ($this->cache as $path => $object) {$/;"	v
pathIsInDirectory	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    protected function pathIsInDirectory($directory, $path)$/;"	f
read	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function read($path)$/;"	f
readStream	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function readStream($path)$/;"	f
recursive	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function listContents($dirname = '', $recursive = false)$/;"	v
recursive	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function storeContents($directory, array $contents, $recursive = false)$/;"	v
rename	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function rename($path, $newpath)$/;"	f
result	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        $result = [];$/;"	v
result	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^        if (! $result = $this->read($path)) {$/;"	v
setAutosave	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function setAutosave($autosave)$/;"	f
setComplete	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function setComplete($dirname, $recursive)$/;"	f
setFromStorage	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function setFromStorage($json)$/;"	f
storeContents	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function storeContents($directory, array $contents, $recursive = false)$/;"	f
storeMiss	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function storeMiss($path)$/;"	f
updateObject	vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php	/^    public function updateObject($path, array $object, $autosave = false)$/;"	f
Adapter	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^class Adapter extends AbstractCache$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    public function __construct(AdapterInterface $adapter, $file, $expire = null)$/;"	f
adapter	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^        $this->adapter = $adapter;$/;"	v
adapter	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    protected $adapter;$/;"	v
cache	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^            $this->cache = $cache;$/;"	v
cleaned	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^        $cleaned = $this->cleanContents($this->cache);$/;"	v
complete	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^            $this->complete = $complete;$/;"	v
config	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^        $config = new Config();$/;"	v
contents	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^        $contents = $this->getForStorage();$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^            $this->expire = $this->getTime($expire);$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    protected $expire = null;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    public function __construct(AdapterInterface $adapter, $file, $expire = null)$/;"	v
file	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^            $file = $this->adapter->read($this->file);$/;"	v
file	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^        $this->file = $file;$/;"	v
file	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    protected $file;$/;"	v
getForStorage	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    public function getForStorage()$/;"	f
getTime	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    protected function getTime($time = 0)$/;"	f
load	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    public function load()$/;"	f
save	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    public function save()$/;"	f
setExpire	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    protected function setExpire($expire)$/;"	f
setFromStorage	vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php	/^    public function setFromStorage($json)$/;"	f
Memcached	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^class Memcached extends AbstractCache$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    public function __construct(NativeMemcached $memcached, $key = 'flysystem', $expire = null)$/;"	f
contents	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^        $contents = $this->getForStorage();$/;"	v
contents	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^        $contents = $this->memcached->get($this->key);$/;"	v
expiration	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^        $expiration = $this->expire === null ? 0 : time() + $this->expire;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    protected $expire;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^        $this->key = $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    protected $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    public function __construct(NativeMemcached $memcached, $key = 'flysystem', $expire = null)$/;"	v
load	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    public function load()$/;"	f
memcached	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^        $this->memcached = $memcached;$/;"	v
memcached	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    protected $memcached;$/;"	v
save	vendor\league\flysystem-cached-adapter\src\Storage\Memcached.php	/^    public function save()$/;"	f
Memory	vendor\league\flysystem-cached-adapter\src\Storage\Memory.php	/^class Memory extends AbstractCache$/;"	c
load	vendor\league\flysystem-cached-adapter\src\Storage\Memory.php	/^    public function load()$/;"	f
save	vendor\league\flysystem-cached-adapter\src\Storage\Memory.php	/^    public function save()$/;"	f
Noop	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^class Noop extends AbstractCache$/;"	c
autosave	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    protected $autosave = false;$/;"	v
autosave	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function autosave()$/;"	f
autosave	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function updateObject($path, array $object, $autosave = false)$/;"	v
copy	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function copy($path, $newpath)$/;"	f
flush	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function flush()$/;"	f
getMetadata	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function getMimetype($path)$/;"	f
getSize	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function getVisibility($path)$/;"	f
has	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function has($path)$/;"	f
isComplete	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function isComplete($dirname, $recursive)$/;"	f
listContents	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
load	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function load()$/;"	f
read	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function read($path)$/;"	f
readStream	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function readStream($path)$/;"	f
recursive	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
recursive	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function storeContents($directory, array $contents, $recursive = false)$/;"	v
rename	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function rename($path, $newpath)$/;"	f
save	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function save()$/;"	f
setComplete	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function setComplete($dirname, $recursive)$/;"	f
storeContents	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function storeContents($directory, array $contents, $recursive = false)$/;"	f
storeMiss	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function storeMiss($path)$/;"	f
updateObject	vendor\league\flysystem-cached-adapter\src\Storage\Noop.php	/^    public function updateObject($path, array $object, $autosave = false)$/;"	f
PhpRedis	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^class PhpRedis extends AbstractCache$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    public function __construct(Redis $client = null, $key = 'flysystem', $expire = null)$/;"	f
client	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^        $this->client = $client ?: new Redis();$/;"	v
client	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    protected $client;$/;"	v
client	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    public function __construct(Redis $client = null, $key = 'flysystem', $expire = null)$/;"	v
contents	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^        $contents = $this->client->get($this->key);$/;"	v
contents	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^        $contents = $this->getForStorage();$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    protected $expire;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^        $this->key = $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    protected $key;$/;"	v
load	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    public function load()$/;"	f
save	vendor\league\flysystem-cached-adapter\src\Storage\PhpRedis.php	/^    public function save()$/;"	f
Predis	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^class Predis extends AbstractCache$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    public function __construct(Client $client = null, $key = 'flysystem', $expire = null)$/;"	f
client	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^        $this->client = $client ?: new Client();$/;"	v
client	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    protected $client;$/;"	v
client	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    public function __construct(Client $client = null, $key = 'flysystem', $expire = null)$/;"	v
command	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^        $command = $this->client->createCommand($name, $arguments);$/;"	v
contents	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^        $contents = $this->getForStorage();$/;"	v
executeCommand	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    protected function executeCommand($name, array $arguments)$/;"	f
expire	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    protected $expire;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^        $this->key = $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    protected $key;$/;"	v
load	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    public function load()$/;"	f
save	vendor\league\flysystem-cached-adapter\src\Storage\Predis.php	/^    public function save()$/;"	f
Psr6Cache	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^class Psr6Cache extends AbstractCache$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    public function __construct(CacheItemPoolInterface $pool, $key = 'flysystem', $expire = null)$/;"	f
expire	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    protected $expire;$/;"	v
item	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^        $item = $this->pool->getItem($this->key);$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^        $this->key = $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    protected $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    public function __construct(CacheItemPoolInterface $pool, $key = 'flysystem', $expire = null)$/;"	v
load	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    public function load()$/;"	f
pool	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^        $this->pool = $pool;$/;"	v
pool	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    private $pool;$/;"	v
save	vendor\league\flysystem-cached-adapter\src\Storage\Psr6Cache.php	/^    public function save()$/;"	f
Stash	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^class Stash extends AbstractCache$/;"	c
__construct	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    public function __construct(Pool $pool, $key = 'flysystem', $expire = null)$/;"	f
contents	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^        $contents = $item->get();$/;"	v
contents	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^        $contents = $this->getForStorage();$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    protected $expire;$/;"	v
item	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^        $item = $this->pool->getItem($this->key);$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^        $this->key = $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    protected $key;$/;"	v
key	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    public function __construct(Pool $pool, $key = 'flysystem', $expire = null)$/;"	v
load	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    public function load()$/;"	f
pool	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^        $this->pool = $pool;$/;"	v
pool	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    protected $pool;$/;"	v
save	vendor\league\flysystem-cached-adapter\src\Storage\Stash.php	/^    public function save()$/;"	f
AdapterCacheTests	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^class AdapterCacheTests extends TestCase$/;"	c
adapter	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $adapter = Mockery::mock('League\\Flysystem\\AdapterInterface');$/;"	v
cache	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $cache = new Adapter($adapter, 'file.json', 10);$/;"	v
cache	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $cache = new Adapter($adapter, 'file.json', null);$/;"	v
cache_data	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $cache_data = [$/;"	v
contents	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $contents = [$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $response = [$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $response = ['contents' => json_encode([[], ['' => true], 1234567890]), 'path' => 'file.json'];$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $response = ['contents' => json_encode([[], ['' => true], 9876543210]), 'path' => 'file.json'];$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^        $response = json_encode([[], [], null]);$/;"	v
testDeleteDir	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testDeleteDir()$/;"	f
testLoadExpired	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testLoadExpired()$/;"	f
testLoadFail	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testLoadFail()$/;"	f
testLoadSuccess	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testLoadSuccess()$/;"	f
testSaveExists	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testSaveExists()$/;"	f
testSaveNew	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testSaveNew()$/;"	f
testStoreContentsRecursive	vendor\league\flysystem-cached-adapter\tests\AdapterCacheTests.php	/^    public function testStoreContentsRecursive()$/;"	f
InspectionTests	vendor\league\flysystem-cached-adapter\tests\InspectionTests.php	/^class InspectionTests extends TestCase {$/;"	c
adapter	vendor\league\flysystem-cached-adapter\tests\InspectionTests.php	/^        $adapter = Mockery::mock('League\\Flysystem\\AdapterInterface');$/;"	v
cache	vendor\league\flysystem-cached-adapter\tests\InspectionTests.php	/^        $cache = Mockery::mock('League\\Flysystem\\Cached\\CacheInterface');$/;"	v
cached_adapter	vendor\league\flysystem-cached-adapter\tests\InspectionTests.php	/^        $cached_adapter = new CachedAdapter($adapter, $cache);$/;"	v
testGetAdapter	vendor\league\flysystem-cached-adapter\tests\InspectionTests.php	/^    public function testGetAdapter()$/;"	f
MemcachedTests	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^class MemcachedTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^        $cache = new Memcached($client);$/;"	v
client	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^        $client = Mockery::mock('Memcached');$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^        $response = json_encode([[], ['' => true]]);$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^        $response = json_encode([[], []]);$/;"	v
testLoadFail	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^    public function testLoadFail()$/;"	f
testLoadSuccess	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^    public function testLoadSuccess()$/;"	f
testSave	vendor\league\flysystem-cached-adapter\tests\MemcachedTests.php	/^    public function testSave()$/;"	f
MemoryCacheTests	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^class MemoryCacheTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $cache = new Memory();$/;"	v
cached	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $cached = [];$/;"	v
contents	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $contents = $cache->listContents('', true);$/;"	v
expected	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $expected = [[$/;"	v
input	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $input = [[$/;"	v
json	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $json = [[$/;"	v
jsonString	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $jsonString = json_encode($json);$/;"	v
key	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^                $key   => $value,$/;"	v
metaGetterProvider	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function metaGetterProvider()$/;"	f
object	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $cache->updateObject('path.txt', $object = [$/;"	v
output	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $output = $cache->cleanContents($input);$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^        $response = $cache->getMimetype('path.txt');$/;"	v
testAutosave	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testAutosave()$/;"	f
testCacheMiss	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testCacheMiss()$/;"	f
testCacheMissIfContentsIsFalse	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testCacheMissIfContentsIsFalse()$/;"	f
testCleanContents	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testCleanContents()$/;"	f
testComplextListContents	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testComplextListContents()$/;"	f
testComplextListContentsWithDeletedFile	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testComplextListContentsWithDeletedFile()$/;"	f
testCopy	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testCopy()$/;"	f
testCopyFail	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testCopyFail()$/;"	f
testDelete	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testDelete()$/;"	f
testDeleteDir	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testDeleteDir()$/;"	f
testFlush	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testFlush()$/;"	f
testGetDerivedMimetype	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testGetDerivedMimetype()$/;"	f
testGetForStorage	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testGetForStorage()$/;"	f
testGetMetadataFail	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testGetMetadataFail()$/;"	f
testIsComplete	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testIsComplete()$/;"	f
testMetaGetters	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testMetaGetters($method, $key, $value)$/;"	f
testParentCompleteIsUsedDuringHas	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testParentCompleteIsUsedDuringHas()$/;"	f
testReadStream	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testReadStream()$/;"	f
testRename	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testRename()$/;"	f
testSetFromStorage	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testSetFromStorage()$/;"	f
testStoreContents	vendor\league\flysystem-cached-adapter\tests\MemoryCacheTests.php	/^    public function testStoreContents()$/;"	f
NoopCacheTests	vendor\league\flysystem-cached-adapter\tests\NoopCacheTests.php	/^class NoopCacheTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\NoopCacheTests.php	/^        $cache = new Noop();$/;"	v
object	vendor\league\flysystem-cached-adapter\tests\NoopCacheTests.php	/^        $object = ['path' => 'path.ext'];$/;"	v
testNoop	vendor\league\flysystem-cached-adapter\tests\NoopCacheTests.php	/^    public function testNoop()$/;"	f
PhpRedisTests	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^class PhpRedisTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^        $cache = new PhpRedis($client);$/;"	v
cache	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^        $cache = new PhpRedis($client, 'flysystem', 20);$/;"	v
client	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^        $client = Mockery::mock('Redis');$/;"	v
data	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^        $data = json_encode([[], []]);$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^        $response = json_encode([[], ['' => true]]);$/;"	v
testLoadFail	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^    public function testLoadFail()$/;"	f
testLoadSuccess	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^    public function testLoadSuccess()$/;"	f
testSave	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^    public function testSave()$/;"	f
testSaveWithExpire	vendor\league\flysystem-cached-adapter\tests\PhpRedisTests.php	/^    public function testSaveWithExpire()$/;"	f
PredisTests	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^class PredisTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $cache = new Predis($client);$/;"	v
cache	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $cache = new Predis($client, 'flysystem', 20);$/;"	v
client	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $client = Mockery::mock('Predis\\Client');$/;"	v
command	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $command = Mockery::mock('Predis\\Command\\CommandInterface');$/;"	v
data	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $data = json_encode([[], []]);$/;"	v
expireCommand	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $expireCommand = Mockery::mock('Predis\\Command\\CommandInterface');$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^        $response = json_encode([[], ['' => true]]);$/;"	v
testLoadFail	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^    public function testLoadFail()$/;"	f
testLoadSuccess	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^    public function testLoadSuccess()$/;"	f
testSave	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^    public function testSave()$/;"	f
testSaveWithExpire	vendor\league\flysystem-cached-adapter\tests\PredisTests.php	/^    public function testSaveWithExpire()$/;"	f
Psr6CacheTests	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^class Psr6CacheTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $cache = new Psr6Cache($pool);$/;"	v
cache	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $cache = new Psr6Cache($pool, 'foo', $ttl);$/;"	v
item	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $item = Mockery::mock('Psr\\Cache\\CacheItemInterface');$/;"	v
pool	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $pool = Mockery::mock('Psr\\Cache\\CacheItemPoolInterface');$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $response = json_encode([[], ['' => true]]);$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $response = json_encode([[], []]);$/;"	v
testLoadFail	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^    public function testLoadFail()$/;"	f
testLoadSuccess	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^    public function testLoadSuccess()$/;"	f
testSave	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^    public function testSave()$/;"	f
ttl	vendor\league\flysystem-cached-adapter\tests\Psr6CacheTest.php	/^        $ttl = 4711;$/;"	v
StashTests	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^class StashTests extends TestCase$/;"	c
cache	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^        $cache = new Stash($pool);$/;"	v
item	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^        $item = Mockery::mock('Stash\\Item');$/;"	v
pool	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^        $pool = Mockery::mock('Stash\\Pool');$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^        $response = json_encode([[], ['' => true]]);$/;"	v
response	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^        $response = json_encode([[], []]);$/;"	v
testLoadFail	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^    public function testLoadFail()$/;"	f
testLoadSuccess	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^    public function testLoadSuccess()$/;"	f
testSave	vendor\league\flysystem-cached-adapter\tests\StashTest.php	/^    public function testSave()$/;"	f
AdapterInterface	vendor\league\flysystem\src\AdapterInterface.php	/^interface AdapterInterface extends ReadInterface$/;"	i
copy	vendor\league\flysystem\src\AdapterInterface.php	/^    public function copy($path, $newpath);$/;"	f
createDir	vendor\league\flysystem\src\AdapterInterface.php	/^    public function createDir($dirname, Config $config);$/;"	f
delete	vendor\league\flysystem\src\AdapterInterface.php	/^    public function delete($path);$/;"	f
deleteDir	vendor\league\flysystem\src\AdapterInterface.php	/^    public function deleteDir($dirname);$/;"	f
rename	vendor\league\flysystem\src\AdapterInterface.php	/^    public function rename($path, $newpath);$/;"	f
setVisibility	vendor\league\flysystem\src\AdapterInterface.php	/^    public function setVisibility($path, $visibility);$/;"	f
update	vendor\league\flysystem\src\AdapterInterface.php	/^    public function update($path, $contents, Config $config);$/;"	f
updateStream	vendor\league\flysystem\src\AdapterInterface.php	/^    public function updateStream($path, $resource, Config $config);$/;"	f
write	vendor\league\flysystem\src\AdapterInterface.php	/^    public function write($path, $contents, Config $config);$/;"	f
writeStream	vendor\league\flysystem\src\AdapterInterface.php	/^    public function writeStream($path, $resource, Config $config);$/;"	f
AbstractAdapter	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^abstract class AbstractAdapter implements AdapterInterface$/;"	c
applyPathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^    public function applyPathPrefix($path)$/;"	f
getPathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^    public function getPathPrefix()$/;"	f
pathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^            $this->pathPrefix = null;$/;"	v
pathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^        $this->pathPrefix = rtrim($prefix, '\\\\\/') . $this->pathSeparator;$/;"	v
pathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^    protected $pathPrefix;$/;"	v
pathSeparator	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^    protected $pathSeparator = '\/';$/;"	v
prefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^        $prefix = (string) $prefix;$/;"	v
removePathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^    public function removePathPrefix($path)$/;"	f
setPathPrefix	vendor\league\flysystem\src\Adapter\AbstractAdapter.php	/^    public function setPathPrefix($prefix)$/;"	f
AbstractFtpAdapter	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^abstract class AbstractFtpAdapter extends AbstractAdapter$/;"	c
__construct	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function __construct(array $config)$/;"	f
__destruct	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function __destruct()$/;"	f
base	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^                $base = preg_replace('~^\\.\/*|:$~', '', $item);$/;"	v
base	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $base = $prefix;$/;"	v
compare	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $compare = function ($one, $two) {$/;"	v
configurable	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $configurable = [];$/;"	v
connect	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    abstract public function connect();$/;"	f
connection	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $connection;$/;"	v
dateTime	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $dateTime = DateTime::createFromFormat('Y-M-j-G:i:s', "{$year}-{$month}-{$day}-{$hour}:{$minute}:{$seconds}");$/;"	v
detectSystemType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function detectSystemType($item)$/;"	f
detectType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function detectType($permissions)$/;"	f
dirname	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $dirname = (string) $dirname;$/;"	v
disconnect	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    abstract public function disconnect();$/;"	f
dt	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $dt = DateTime::createFromFormat($format, $date . $time);$/;"	v
enableTimestampsOnUnixListings	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->enableTimestampsOnUnixListings = $bool;$/;"	v
enableTimestampsOnUnixListings	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $enableTimestampsOnUnixListings = false;$/;"	v
ensureDirectory	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function ensureDirectory($dirname)$/;"	f
filter	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $filter = function ($line) {$/;"	v
format	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $format = strlen($date) === 8 ? 'm-d-yH:iA' : 'Y-m-dH:i';$/;"	v
getConnection	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getConnection()$/;"	f
getHost	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getHost()$/;"	f
getPassword	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getPassword()$/;"	f
getPermPrivate	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getPermPrivate()$/;"	f
getPermPublic	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getPermPublic()$/;"	f
getPort	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getPort()$/;"	f
getRoot	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getRoot()$/;"	f
getSize	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getSize($path)$/;"	f
getSystemType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getSystemType()$/;"	f
getTimeout	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getTimeout()$/;"	f
getUsername	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getUsername()$/;"	f
getVisibility	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function getVisibility($path)$/;"	f
has	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function has($path)$/;"	f
host	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->host = $host;$/;"	v
host	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $host;$/;"	v
hour	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $hour = '00';$/;"	v
isConnected	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    abstract public function isConnected();$/;"	f
item	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $item = preg_replace('#\\s+#', ' ', trim($item), 3);$/;"	v
item	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $item = preg_replace('#\\s+#', ' ', trim($item), 7);$/;"	v
listContents	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
listDirectoryContents	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    abstract protected function listDirectoryContents($directory, $recursive = false);$/;"	f
listing	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $listing = $this->removeDotDirectories($listing);$/;"	v
map	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $map = ['-' => '0', 'r' => '4', 'w' => '2', 'x' => '1'];$/;"	v
mapper	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $mapper = function ($part) {$/;"	v
method	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $method = 'set' . ucfirst($setting);$/;"	v
minute	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $minute = '00';$/;"	v
normalizeListing	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizeListing(array $listing, $prefix = '')$/;"	f
normalizeObject	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizeObject($item, $base)$/;"	f
normalizePermissions	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizePermissions($permissions)$/;"	f
normalizeUnixObject	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizeUnixObject($item, $base)$/;"	f
normalizeUnixTimestamp	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizeUnixTimestamp($month, $day, $timeOrYear)$/;"	f
normalizeWindowsObject	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizeWindowsObject($item, $base)$/;"	f
parts	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $parts = str_split($permissions, 3);$/;"	v
passive	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $passive = true;$/;"	v
path	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $path = $base === '' ? $name : $base . $this->separator . $name;$/;"	v
permPrivate	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->permPrivate = $permPrivate;$/;"	v
permPrivate	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $permPrivate = 0700;$/;"	v
permPublic	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->permPublic = $permPublic;$/;"	v
permPublic	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $permPublic = 0744;$/;"	v
permissions	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $permissions = $this->normalizePermissions($permissions);$/;"	v
permissions	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $permissions = strtr($permissions, $map);$/;"	v
permissions	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $permissions = substr($permissions, 1);$/;"	v
port	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->port = (int) $port;$/;"	v
port	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $port = 21;$/;"	v
prefix	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function normalizeListing(array $listing, $prefix = '')$/;"	v
recursive	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    abstract protected function listDirectoryContents($directory, $recursive = false);$/;"	v
recursive	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
removeDotDirectories	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function removeDotDirectories(array $list)$/;"	f
result	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $result = [];$/;"	v
result	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $result = compact('type', 'path', 'visibility', 'size');$/;"	v
root	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->root = rtrim($root, '\\\\\/') . $this->separator;$/;"	v
root	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $root;$/;"	v
safeStorage	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->safeStorage = new SafeStorage();$/;"	v
safeStorage	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $safeStorage;$/;"	v
seconds	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $seconds = '00';$/;"	v
separator	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $separator = '\/';$/;"	v
setConfig	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setConfig(array $config)$/;"	f
setEnableTimestampsOnUnixListings	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setEnableTimestampsOnUnixListings($bool = false)$/;"	f
setHost	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setHost($host)$/;"	f
setPassword	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setPassword($password)$/;"	f
setPermPrivate	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setPermPrivate($permPrivate)$/;"	f
setPermPublic	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setPermPublic($permPublic)$/;"	f
setPort	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setPort($port)$/;"	f
setRoot	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setRoot($root)$/;"	f
setSystemType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setSystemType($systemType)$/;"	f
setTimeout	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setTimeout($timeout)$/;"	f
setUsername	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    public function setUsername($username)$/;"	f
size	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $size = (int) $size;$/;"	v
sortListing	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected function sortListing(array $result)$/;"	f
ssl	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $ssl = false;$/;"	v
systemType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $systemType = $this->systemType ?: $this->detectSystemType($item);$/;"	v
systemType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->systemType = strtolower($systemType);$/;"	v
systemType	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $systemType;$/;"	v
timeout	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $this->timeout = (int) $timeout;$/;"	v
timeout	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^    protected $timeout = 90;$/;"	v
timestamp	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $timestamp = $this->normalizeUnixTimestamp($month, $day, $timeOrYear);$/;"	v
timestamp	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $timestamp = $dt ? $dt->getTimestamp() : (int) strtotime("$date $time");$/;"	v
tries	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $tries = 0;$/;"	v
type	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $type = 'dir';$/;"	v
type	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $type = $this->detectType($permissions);$/;"	v
type	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $type = 'file';$/;"	v
username	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $username = $this->safeStorage->retrieveSafely('username');$/;"	v
visibility	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $visibility = $permissions & 0044 ? AdapterInterface::VISIBILITY_PUBLIC : AdapterInterface::VISIBILITY_PRIVATE;$/;"	v
visibility	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^        $visibility = AdapterInterface::VISIBILITY_PUBLIC;$/;"	v
will	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^     * This function will return:$/;"	f
year	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $year = $timeOrYear;$/;"	v
year	vendor\league\flysystem\src\Adapter\AbstractFtpAdapter.php	/^            $year = date('Y');$/;"	v
CanOverwriteFiles	vendor\league\flysystem\src\Adapter\CanOverwriteFiles.php	/^interface CanOverwriteFiles$/;"	i
let	vendor\league\flysystem\src\Adapter\CanOverwriteFiles.php	/^ * Adapters that implement this interface let the Filesystem know that files can be overwritten using the write$/;"	i
to	vendor\league\flysystem\src\Adapter\CanOverwriteFiles.php	/^ * functions and don't need the update function to be called. This can help improve performance when asserts are disabled.$/;"	f
Ftp	vendor\league\flysystem\src\Adapter\Ftp.php	/^class Ftp extends AbstractFtpAdapter$/;"	c
configurable	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected $configurable = [$/;"	v
connect	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function connect()$/;"	f
connection	vendor\league\flysystem\src\Adapter\Ftp.php	/^            $this->connection = ftp_connect($this->getHost(), $this->getPort(), $this->getTimeout());$/;"	v
connection	vendor\league\flysystem\src\Adapter\Ftp.php	/^            $this->connection = ftp_ssl_connect($this->getHost(), $this->getPort(), $this->getTimeout());$/;"	v
connection	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $connection = $this->connection;$/;"	v
connection	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $connection = $this->getConnection();$/;"	v
connection	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->connection = null;$/;"	v
contents	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $contents = array_reverse($this->listDirectoryContents($dirname, false));$/;"	v
createActualDirectory	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function createActualDirectory($directory, $connection)$/;"	f
createDir	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function createDir($dirname, Config $config)$/;"	f
delete	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function deleteDir($dirname)$/;"	f
directories	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $directories = explode('\/', $dirname);$/;"	v
directory	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $directory = str_replace('*', '\\\\*', $directory);$/;"	v
disconnect	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function disconnect()$/;"	f
ftpRawlist	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function ftpRawlist($options, $path)$/;"	f
getMetadata	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function getMimetype($path)$/;"	f
getTimestamp	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function getTimestamp($path)$/;"	f
ignorePassiveAddress	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->ignorePassiveAddress = $ignorePassiveAddress;$/;"	v
ignorePassiveAddress	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected $ignorePassiveAddress = null;$/;"	v
isConnected	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function isConnected()$/;"	f
isLoggedIn	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $isLoggedIn = ftp_login($/;"	v
isPureFtpd	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->isPureFtpd = $this->isPureFtpdServer();$/;"	v
isPureFtpd	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected $isPureFtpd;$/;"	v
isPureFtpdServer	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function isPureFtpdServer()$/;"	f
key	vendor\league\flysystem\src\Adapter\Ftp.php	/^        foreach ($listing as $key => $item) {$/;"	v
listDirectoryContents	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function listDirectoryContents($directory, $recursive = true)$/;"	f
listDirectoryContentsRecursive	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function listDirectoryContentsRecursive($directory)$/;"	f
listing	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $listing = $this->ftpRawlist($options, $directory);$/;"	v
listing	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $listing = $this->ftpRawlist('-A', str_replace('*', '\\\\*', $path));$/;"	v
listing	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $listing = $this->normalizeListing($this->ftpRawlist('-aln', $directory) ?: [], $directory);$/;"	v
listing	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $listing = ftp_nlist($connection, '.') ?: [];$/;"	v
login	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function login()$/;"	f
metadata	vendor\league\flysystem\src\Adapter\Ftp.php	/^        if ( ! $metadata = $this->getMetadata($path)) {$/;"	v
mode	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $mode = $visibility === AdapterInterface::VISIBILITY_PUBLIC ? $this->getPermPublic() : $this->getPermPrivate();$/;"	v
object	vendor\league\flysystem\src\Adapter\Ftp.php	/^        if ( ! $object = $this->readStream($path)) {$/;"	v
options	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $options = $recursive ? '-alnR' : '-aln';$/;"	v
output	vendor\league\flysystem\src\Adapter\Ftp.php	/^            $output = array_merge($output, $this->listDirectoryContentsRecursive($item['path']));$/;"	v
output	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $output = [];$/;"	v
passive	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->passive = $passive;$/;"	v
path	vendor\league\flysystem\src\Adapter\Ftp.php	/^            $path = str_replace(' ', '\\ ', $path);$/;"	v
read	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function read($path)$/;"	f
readStream	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function readStream($path)$/;"	f
recurseManually	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->recurseManually = $recurseManually;$/;"	v
recurseManually	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected $recurseManually = false;$/;"	v
recursive	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function listDirectoryContents($directory, $recursive = true)$/;"	v
rename	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function rename($path, $newpath)$/;"	f
response	vendor\league\flysystem\src\Adapter\Ftp.php	/^            $response = ftp_raw($this->connection, "OPTS UTF8 ON");$/;"	v
response	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $response = ftp_raw($this->connection, 'HELP');$/;"	v
result	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $result = $this->writeStream($path, $stream, $config);$/;"	v
result	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $result = ftp_fget($this->getConnection(), $stream, $path, $this->transferMode);$/;"	v
root	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $root = $this->getRoot();$/;"	v
root	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->root = ftp_pwd($connection);$/;"	v
setConnectionPassiveMode	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function setConnectionPassiveMode()$/;"	f
setConnectionRoot	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function setConnectionRoot()$/;"	f
setIgnorePassiveAddress	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setIgnorePassiveAddress($ignorePassiveAddress)$/;"	f
setPassive	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setPassive($passive = true)$/;"	f
setRecurseManually	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setRecurseManually($recurseManually)$/;"	f
setSsl	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setSsl($ssl)$/;"	f
setTransferMode	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setTransferMode($mode)$/;"	f
setUtf8	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setUtf8($utf8)$/;"	f
setUtf8Mode	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected function setUtf8Mode()$/;"	f
setVisibility	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function setVisibility($path, $visibility)$/;"	f
ssl	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->ssl = (bool) $ssl;$/;"	v
stream	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $stream = fopen('php:\/\/temp', 'w+b');$/;"	v
timestamp	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $timestamp = ftp_mdtm($this->getConnection(), $path);$/;"	v
transferMode	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->transferMode = $mode;$/;"	v
transferMode	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected $transferMode = FTP_BINARY;$/;"	v
type	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $type = 'file';$/;"	v
update	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function update($path, $contents, Config $config)$/;"	f
updateStream	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function updateStream($path, $resource, Config $config)$/;"	f
utf8	vendor\league\flysystem\src\Adapter\Ftp.php	/^        $this->utf8 = (bool) $utf8;$/;"	v
utf8	vendor\league\flysystem\src\Adapter\Ftp.php	/^    protected $utf8 = false;$/;"	v
with	vendor\league\flysystem\src\Adapter\Ftp.php	/^     * The ftp_rawlist function with optional escaping.$/;"	f
write	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function write($path, $contents, Config $config)$/;"	f
writeStream	vendor\league\flysystem\src\Adapter\Ftp.php	/^    public function writeStream($path, $resource, Config $config)$/;"	f
Ftpd	vendor\league\flysystem\src\Adapter\Ftpd.php	/^class Ftpd extends Ftp$/;"	c
getMetadata	vendor\league\flysystem\src\Adapter\Ftpd.php	/^    public function getMetadata($path)$/;"	f
listDirectoryContents	vendor\league\flysystem\src\Adapter\Ftpd.php	/^    protected function listDirectoryContents($directory, $recursive = true)$/;"	f
listing	vendor\league\flysystem\src\Adapter\Ftpd.php	/^        $listing = ftp_rawlist($this->getConnection(), $directory, $recursive);$/;"	v
recursive	vendor\league\flysystem\src\Adapter\Ftpd.php	/^    protected function listDirectoryContents($directory, $recursive = true)$/;"	v
Local	vendor\league\flysystem\src\Adapter\Local.php	/^class Local extends AbstractAdapter$/;"	c
__construct	vendor\league\flysystem\src\Adapter\Local.php	/^    public function __construct($root, $writeFlags = LOCK_EX, $linkHandling = self::DISALLOW_LINKS, array $permissions = [])$/;"	f
contents	vendor\league\flysystem\src\Adapter\Local.php	/^        $contents = $this->getRecursiveDirectoryIterator($location, RecursiveIteratorIterator::CHILD_FIRST);$/;"	v
contents	vendor\league\flysystem\src\Adapter\Local.php	/^        $contents = @file_get_contents($location);$/;"	v
copy	vendor\league\flysystem\src\Adapter\Local.php	/^    public function copy($path, $newpath)$/;"	f
createDir	vendor\league\flysystem\src\Adapter\Local.php	/^    public function createDir($dirname, Config $config)$/;"	f
delete	vendor\league\flysystem\src\Adapter\Local.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem\src\Adapter\Local.php	/^    public function deleteDir($dirname)$/;"	f
deleteFileInfoObject	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function deleteFileInfoObject(SplFileInfo $file)$/;"	f
destination	vendor\league\flysystem\src\Adapter\Local.php	/^        $destination = $this->applyPathPrefix($newpath);$/;"	v
ensureDirectory	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function ensureDirectory($root)$/;"	f
errorMessage	vendor\league\flysystem\src\Adapter\Local.php	/^                $errorMessage = isset($mkdirError['message']) ? $mkdirError['message'] : '';$/;"	v
finfo	vendor\league\flysystem\src\Adapter\Local.php	/^        $finfo = new Finfo(FILEINFO_MIME_TYPE);$/;"	v
getDirectoryIterator	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function getDirectoryIterator($path)$/;"	f
getFilePath	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function getFilePath(SplFileInfo $file)$/;"	f
getMetadata	vendor\league\flysystem\src\Adapter\Local.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem\src\Adapter\Local.php	/^    public function getMimetype($path)$/;"	f
getRecursiveDirectoryIterator	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function getRecursiveDirectoryIterator($path, $mode = RecursiveIteratorIterator::SELF_FIRST)$/;"	f
getSize	vendor\league\flysystem\src\Adapter\Local.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem\src\Adapter\Local.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem\src\Adapter\Local.php	/^    public function getVisibility($path)$/;"	f
guardAgainstUnreadableFileInfo	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function guardAgainstUnreadableFileInfo(SplFileInfo $file)$/;"	f
has	vendor\league\flysystem\src\Adapter\Local.php	/^    public function has($path)$/;"	f
info	vendor\league\flysystem\src\Adapter\Local.php	/^        $info = new SplFileInfo($location);$/;"	v
iterator	vendor\league\flysystem\src\Adapter\Local.php	/^        $iterator = $recursive ? $this->getRecursiveDirectoryIterator($location) : $this->getDirectoryIterator($location);$/;"	v
iterator	vendor\league\flysystem\src\Adapter\Local.php	/^        $iterator = new DirectoryIterator($path);$/;"	v
linkHandling	vendor\league\flysystem\src\Adapter\Local.php	/^        $this->linkHandling = $linkHandling;$/;"	v
linkHandling	vendor\league\flysystem\src\Adapter\Local.php	/^    private $linkHandling;$/;"	v
listContents	vendor\league\flysystem\src\Adapter\Local.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
location	vendor\league\flysystem\src\Adapter\Local.php	/^        $location = $file->getPathname();$/;"	v
location	vendor\league\flysystem\src\Adapter\Local.php	/^        $location = $this->applyPathPrefix($directory);$/;"	v
location	vendor\league\flysystem\src\Adapter\Local.php	/^        $location = $this->applyPathPrefix($dirname);$/;"	v
location	vendor\league\flysystem\src\Adapter\Local.php	/^        $location = $this->applyPathPrefix($path);$/;"	v
mapFileInfo	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function mapFileInfo(SplFileInfo $file)$/;"	f
mimetype	vendor\league\flysystem\src\Adapter\Local.php	/^            $mimetype = Util\\MimeType::detectByFilename($location);$/;"	v
mimetype	vendor\league\flysystem\src\Adapter\Local.php	/^        $mimetype = $finfo->file($location);$/;"	v
mkdirError	vendor\league\flysystem\src\Adapter\Local.php	/^                $mkdirError = error_get_last();$/;"	v
mode	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function getRecursiveDirectoryIterator($path, $mode = RecursiveIteratorIterator::SELF_FIRST)$/;"	v
normalizeFileInfo	vendor\league\flysystem\src\Adapter\Local.php	/^    protected function normalizeFileInfo(SplFileInfo $file)$/;"	f
normalized	vendor\league\flysystem\src\Adapter\Local.php	/^        $normalized = [$/;"	v
parentDirectory	vendor\league\flysystem\src\Adapter\Local.php	/^        $parentDirectory = $this->applyPathPrefix(Util::dirname($newpath));$/;"	v
path	vendor\league\flysystem\src\Adapter\Local.php	/^            $path = $this->getFilePath($file);$/;"	v
path	vendor\league\flysystem\src\Adapter\Local.php	/^        $path = $this->removePathPrefix($location);$/;"	v
pathSeparator	vendor\league\flysystem\src\Adapter\Local.php	/^    protected $pathSeparator = DIRECTORY_SEPARATOR;$/;"	v
permissionMap	vendor\league\flysystem\src\Adapter\Local.php	/^        $this->permissionMap = array_replace_recursive(static::$permissions, $permissions);$/;"	v
permissionMap	vendor\league\flysystem\src\Adapter\Local.php	/^    protected $permissionMap;$/;"	v
permissions	vendor\league\flysystem\src\Adapter\Local.php	/^        $permissions = octdec(substr(sprintf('%o', fileperms($location)), -4));$/;"	v
permissions	vendor\league\flysystem\src\Adapter\Local.php	/^    protected static $permissions = [$/;"	v
read	vendor\league\flysystem\src\Adapter\Local.php	/^    public function read($path)$/;"	f
readStream	vendor\league\flysystem\src\Adapter\Local.php	/^    public function readStream($path)$/;"	f
recursive	vendor\league\flysystem\src\Adapter\Local.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
rename	vendor\league\flysystem\src\Adapter\Local.php	/^    public function rename($path, $newpath)$/;"	f
result	vendor\league\flysystem\src\Adapter\Local.php	/^        $result = [];$/;"	v
result	vendor\league\flysystem\src\Adapter\Local.php	/^        $result = compact('contents', 'type', 'size', 'path');$/;"	v
result	vendor\league\flysystem\src\Adapter\Local.php	/^        $result = compact('type', 'path');$/;"	v
result	vendor\league\flysystem\src\Adapter\Local.php	/^        $result = compact('type', 'path', 'size', 'contents');$/;"	v
return	vendor\league\flysystem\src\Adapter\Local.php	/^                $return = false;$/;"	v
return	vendor\league\flysystem\src\Adapter\Local.php	/^        $return = ['path' => $dirname, 'type' => 'dir'];$/;"	v
root	vendor\league\flysystem\src\Adapter\Local.php	/^        $root = is_link($root) ? realpath($root) : $root;$/;"	v
setVisibility	vendor\league\flysystem\src\Adapter\Local.php	/^    public function setVisibility($path, $visibility)$/;"	f
size	vendor\league\flysystem\src\Adapter\Local.php	/^        $size = file_put_contents($location, $contents, $this->writeFlags);$/;"	v
stream	vendor\league\flysystem\src\Adapter\Local.php	/^        $stream = fopen($location, 'rb');$/;"	v
stream	vendor\league\flysystem\src\Adapter\Local.php	/^        $stream = fopen($location, 'w+b');$/;"	v
success	vendor\league\flysystem\src\Adapter\Local.php	/^        $success = chmod($location, $this->permissionMap[$type][$visibility]);$/;"	v
type	vendor\league\flysystem\src\Adapter\Local.php	/^        $type = 'file';$/;"	v
type	vendor\league\flysystem\src\Adapter\Local.php	/^        $type = is_dir($location) ? 'dir' : 'file';$/;"	v
umask	vendor\league\flysystem\src\Adapter\Local.php	/^            $umask = umask(0);$/;"	v
umask	vendor\league\flysystem\src\Adapter\Local.php	/^        $umask = umask(0);$/;"	v
update	vendor\league\flysystem\src\Adapter\Local.php	/^    public function update($path, $contents, Config $config)$/;"	f
updateStream	vendor\league\flysystem\src\Adapter\Local.php	/^    public function updateStream($path, $resource, Config $config)$/;"	f
visibility	vendor\league\flysystem\src\Adapter\Local.php	/^        $visibility = $config->get('visibility', 'public');$/;"	v
visibility	vendor\league\flysystem\src\Adapter\Local.php	/^        $visibility = substr(sprintf('%o', fileperms($location)), -4);$/;"	v
visibility	vendor\league\flysystem\src\Adapter\Local.php	/^        foreach ($this->permissionMap[$type] as $visibility => $visibilityPermissions) {$/;"	v
write	vendor\league\flysystem\src\Adapter\Local.php	/^    public function write($path, $contents, Config $config)$/;"	f
writeFlags	vendor\league\flysystem\src\Adapter\Local.php	/^        $this->writeFlags = $writeFlags;$/;"	v
writeFlags	vendor\league\flysystem\src\Adapter\Local.php	/^    protected $writeFlags;$/;"	v
writeFlags	vendor\league\flysystem\src\Adapter\Local.php	/^    public function __construct($root, $writeFlags = LOCK_EX, $linkHandling = self::DISALLOW_LINKS, array $permissions = [])$/;"	v
writeStream	vendor\league\flysystem\src\Adapter\Local.php	/^    public function writeStream($path, $resource, Config $config)$/;"	f
NullAdapter	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^class NullAdapter extends AbstractAdapter$/;"	c
createDir	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function createDir($dirname, Config $config)$/;"	f
delete	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function deleteDir($dirname)$/;"	f
getMetadata	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function getMimetype($path)$/;"	f
getSize	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function getVisibility($path)$/;"	f
has	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function has($path)$/;"	f
listContents	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
read	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function read($path)$/;"	f
recursive	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
rename	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function rename($path, $newpath)$/;"	f
result	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^        $result = compact('contents', 'type', 'path');$/;"	v
setVisibility	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function setVisibility($path, $visibility)$/;"	f
type	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^        $type = 'file';$/;"	v
update	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function update($path, $contents, Config $config)$/;"	f
write	vendor\league\flysystem\src\Adapter\NullAdapter.php	/^    public function write($path, $contents, Config $config)$/;"	f
getVisibility	vendor\league\flysystem\src\Adapter\Polyfill\NotSupportingVisibilityTrait.php	/^    public function getVisibility($path)$/;"	f
setVisibility	vendor\league\flysystem\src\Adapter\Polyfill\NotSupportingVisibilityTrait.php	/^    public function setVisibility($path, $visibility)$/;"	f
copy	vendor\league\flysystem\src\Adapter\Polyfill\StreamedCopyTrait.php	/^    public function copy($path, $newpath)$/;"	f
readStream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedCopyTrait.php	/^    abstract public function readStream($path);$/;"	f
response	vendor\league\flysystem\src\Adapter\Polyfill\StreamedCopyTrait.php	/^        $response = $this->readStream($path);$/;"	v
result	vendor\league\flysystem\src\Adapter\Polyfill\StreamedCopyTrait.php	/^        $result = $this->writeStream($newpath, $response['stream'], new Config());$/;"	v
writeStream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedCopyTrait.php	/^    abstract public function writeStream($path, $resource, Config $config);$/;"	f
data	vendor\league\flysystem\src\Adapter\Polyfill\StreamedReadingTrait.php	/^        if ( ! $data = $this->read($path)) {$/;"	v
read	vendor\league\flysystem\src\Adapter\Polyfill\StreamedReadingTrait.php	/^    abstract public function read($path);$/;"	f
readStream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedReadingTrait.php	/^    public function readStream($path)$/;"	f
stream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedReadingTrait.php	/^        $stream = fopen('php:\/\/temp', 'w+b');$/;"	v
contents	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^        $contents = stream_get_contents($resource);$/;"	v
fallbackCall	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^        $fallbackCall = [$this, $fallback];$/;"	v
stream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^    protected function stream($path, $resource, Config $config, $fallback)$/;"	f
update	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^    abstract public function update($pash, $contents, Config $config);$/;"	f
updateStream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^    public function updateStream($path, $resource, Config $config)$/;"	f
write	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^    abstract public function write($pash, $contents, Config $config);$/;"	f
writeStream	vendor\league\flysystem\src\Adapter\Polyfill\StreamedWritingTrait.php	/^    public function writeStream($path, $resource, Config $config)$/;"	f
SynologyFtp	vendor\league\flysystem\src\Adapter\SynologyFtp.php	/^class SynologyFtp extends Ftpd$/;"	c
merely	vendor\league\flysystem\src\Adapter\SynologyFtp.php	/^    \/\/ This class merely exists because of BC.$/;"	c
Config	vendor\league\flysystem\src\Config.php	/^class Config$/;"	c
__construct	vendor\league\flysystem\src\Config.php	/^    public function __construct(array $settings = [])$/;"	f
default	vendor\league\flysystem\src\Config.php	/^    public function get($key, $default = null)$/;"	v
fallback	vendor\league\flysystem\src\Config.php	/^        $this->fallback = $fallback;$/;"	v
fallback	vendor\league\flysystem\src\Config.php	/^    protected $fallback;$/;"	v
get	vendor\league\flysystem\src\Config.php	/^    public function get($key, $default = null)$/;"	f
getDefault	vendor\league\flysystem\src\Config.php	/^    protected function getDefault($key, $default)$/;"	f
has	vendor\league\flysystem\src\Config.php	/^    public function has($key)$/;"	f
set	vendor\league\flysystem\src\Config.php	/^    public function set($key, $value)$/;"	f
setFallback	vendor\league\flysystem\src\Config.php	/^    public function setFallback(Config $fallback)$/;"	f
settings	vendor\league\flysystem\src\Config.php	/^        $this->settings = $settings;$/;"	v
settings	vendor\league\flysystem\src\Config.php	/^    protected $settings = [];$/;"	v
settings	vendor\league\flysystem\src\Config.php	/^    public function __construct(array $settings = [])$/;"	v
config	vendor\league\flysystem\src\ConfigAwareTrait.php	/^        $config = new Config($config);$/;"	v
config	vendor\league\flysystem\src\ConfigAwareTrait.php	/^        $this->config = $config ? Util::ensureConfig($config) : new Config;$/;"	v
config	vendor\league\flysystem\src\ConfigAwareTrait.php	/^    protected $config;$/;"	v
getConfig	vendor\league\flysystem\src\ConfigAwareTrait.php	/^    public function getConfig()$/;"	f
prepareConfig	vendor\league\flysystem\src\ConfigAwareTrait.php	/^    protected function prepareConfig(array $config)$/;"	f
setConfig	vendor\league\flysystem\src\ConfigAwareTrait.php	/^    protected function setConfig($config)$/;"	f
Directory	vendor\league\flysystem\src\Directory.php	/^class Directory extends Handler$/;"	c
delete	vendor\league\flysystem\src\Directory.php	/^    public function delete()$/;"	f
getContents	vendor\league\flysystem\src\Directory.php	/^    public function getContents($recursive = false)$/;"	f
Exception	vendor\league\flysystem\src\Exception.php	/^class Exception extends \\Exception$/;"	c
File	vendor\league\flysystem\src\File.php	/^class File extends Handler$/;"	c
copy	vendor\league\flysystem\src\File.php	/^    public function copy($newpath)$/;"	f
delete	vendor\league\flysystem\src\File.php	/^    public function delete()$/;"	f
exists	vendor\league\flysystem\src\File.php	/^    public function exists()$/;"	f
getMetadata	vendor\league\flysystem\src\File.php	/^    public function getMetadata()$/;"	f
getMimetype	vendor\league\flysystem\src\File.php	/^    public function getMimetype()$/;"	f
getSize	vendor\league\flysystem\src\File.php	/^    public function getSize()$/;"	f
getTimestamp	vendor\league\flysystem\src\File.php	/^    public function getTimestamp()$/;"	f
getVisibility	vendor\league\flysystem\src\File.php	/^    public function getVisibility()$/;"	f
path	vendor\league\flysystem\src\File.php	/^            $this->path = $newpath;$/;"	v
put	vendor\league\flysystem\src\File.php	/^    public function put($content)$/;"	f
putStream	vendor\league\flysystem\src\File.php	/^    public function putStream($resource)$/;"	f
read	vendor\league\flysystem\src\File.php	/^    public function read()$/;"	f
readStream	vendor\league\flysystem\src\File.php	/^    public function readStream()$/;"	f
rename	vendor\league\flysystem\src\File.php	/^    public function rename($newpath)$/;"	f
update	vendor\league\flysystem\src\File.php	/^    public function update($content)$/;"	f
updateStream	vendor\league\flysystem\src\File.php	/^    public function updateStream($resource)$/;"	f
write	vendor\league\flysystem\src\File.php	/^    public function write($content)$/;"	f
writeStream	vendor\league\flysystem\src\File.php	/^    public function writeStream($resource)$/;"	f
FileExistsException	vendor\league\flysystem\src\FileExistsException.php	/^class FileExistsException extends Exception$/;"	c
__construct	vendor\league\flysystem\src\FileExistsException.php	/^    public function __construct($path, $code = 0, BaseException $previous = null)$/;"	f
code	vendor\league\flysystem\src\FileExistsException.php	/^    public function __construct($path, $code = 0, BaseException $previous = null)$/;"	v
getPath	vendor\league\flysystem\src\FileExistsException.php	/^    public function getPath()$/;"	f
path	vendor\league\flysystem\src\FileExistsException.php	/^        $this->path = $path;$/;"	v
path	vendor\league\flysystem\src\FileExistsException.php	/^    protected $path;$/;"	v
FileNotFoundException	vendor\league\flysystem\src\FileNotFoundException.php	/^class FileNotFoundException extends Exception$/;"	c
__construct	vendor\league\flysystem\src\FileNotFoundException.php	/^    public function __construct($path, $code = 0, BaseException $previous = null)$/;"	f
code	vendor\league\flysystem\src\FileNotFoundException.php	/^    public function __construct($path, $code = 0, BaseException $previous = null)$/;"	v
getPath	vendor\league\flysystem\src\FileNotFoundException.php	/^    public function getPath()$/;"	f
path	vendor\league\flysystem\src\FileNotFoundException.php	/^        $this->path = $path;$/;"	v
path	vendor\league\flysystem\src\FileNotFoundException.php	/^    protected $path;$/;"	v
Filesystem	vendor\league\flysystem\src\Filesystem.php	/^class Filesystem implements FilesystemInterface$/;"	c
__construct	vendor\league\flysystem\src\Filesystem.php	/^    public function __construct(AdapterInterface $adapter, $config = null)$/;"	f
adapter	vendor\league\flysystem\src\Filesystem.php	/^        $this->adapter = $adapter;$/;"	v
adapter	vendor\league\flysystem\src\Filesystem.php	/^    protected $adapter;$/;"	v
assertAbsent	vendor\league\flysystem\src\Filesystem.php	/^    public function assertAbsent($path)$/;"	f
assertPresent	vendor\league\flysystem\src\Filesystem.php	/^    public function assertPresent($path)$/;"	f
config	vendor\league\flysystem\src\Filesystem.php	/^        $config = $this->prepareConfig($config);$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function __construct(AdapterInterface $adapter, $config = null)$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function createDir($dirname, array $config = [])$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function put($path, $contents, array $config = [])$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function putStream($path, $resource, array $config = [])$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function update($path, $contents, array $config = [])$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function updateStream($path, $resource, array $config = [])$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function write($path, $contents, array $config = [])$/;"	v
config	vendor\league\flysystem\src\Filesystem.php	/^    public function writeStream($path, $resource, array $config = [])$/;"	v
contents	vendor\league\flysystem\src\Filesystem.php	/^        $contents = $this->getAdapter()->listContents($directory, $recursive);$/;"	v
contents	vendor\league\flysystem\src\Filesystem.php	/^        $contents = $this->read($path);$/;"	v
copy	vendor\league\flysystem\src\Filesystem.php	/^    public function copy($path, $newpath)$/;"	f
createDir	vendor\league\flysystem\src\Filesystem.php	/^    public function createDir($dirname, array $config = [])$/;"	f
delete	vendor\league\flysystem\src\Filesystem.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem\src\Filesystem.php	/^    public function deleteDir($dirname)$/;"	f
directory	vendor\league\flysystem\src\Filesystem.php	/^        $directory = Util::normalizePath($directory);$/;"	v
dirname	vendor\league\flysystem\src\Filesystem.php	/^        $dirname = Util::normalizePath($dirname);$/;"	v
get	vendor\league\flysystem\src\Filesystem.php	/^    public function get($path, Handler $handler = null)$/;"	f
getAdapter	vendor\league\flysystem\src\Filesystem.php	/^    public function getAdapter()$/;"	f
getMetadata	vendor\league\flysystem\src\Filesystem.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem\src\Filesystem.php	/^    public function getMimetype($path)$/;"	f
getSize	vendor\league\flysystem\src\Filesystem.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem\src\Filesystem.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem\src\Filesystem.php	/^    public function getVisibility($path)$/;"	f
handler	vendor\league\flysystem\src\Filesystem.php	/^            $handler = ($metadata && $metadata['type'] === 'file') ? new File($this, $path) : new Directory($this, $path);$/;"	v
handler	vendor\league\flysystem\src\Filesystem.php	/^    public function get($path, Handler $handler = null)$/;"	v
has	vendor\league\flysystem\src\Filesystem.php	/^    public function has($path)$/;"	f
keys	vendor\league\flysystem\src\Filesystem.php	/^ * @method array listWith(array $keys = [], $directory = '', $recursive = false)$/;"	v
listContents	vendor\league\flysystem\src\Filesystem.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
metadata	vendor\league\flysystem\src\Filesystem.php	/^            $metadata = $this->getMetadata($path);$/;"	v
newpath	vendor\league\flysystem\src\Filesystem.php	/^        $newpath = Util::normalizePath($newpath);$/;"	v
object	vendor\league\flysystem\src\Filesystem.php	/^        if ( ! $object = $this->getAdapter()->readStream($path)) {$/;"	v
object	vendor\league\flysystem\src\Filesystem.php	/^        if (( ! $object = $this->getAdapter()->getMimetype($path)) || ! array_key_exists('mimetype', $object)) {$/;"	v
object	vendor\league\flysystem\src\Filesystem.php	/^        if (( ! $object = $this->getAdapter()->getSize($path)) || ! array_key_exists('size', $object)) {$/;"	v
object	vendor\league\flysystem\src\Filesystem.php	/^        if (( ! $object = $this->getAdapter()->getTimestamp($path)) || ! array_key_exists('timestamp', $object)) {$/;"	v
object	vendor\league\flysystem\src\Filesystem.php	/^        if (( ! $object = $this->getAdapter()->getVisibility($path)) || ! array_key_exists('visibility', $object)) {$/;"	v
path	vendor\league\flysystem\src\Filesystem.php	/^        $path = Util::normalizePath($path);$/;"	v
path	vendor\league\flysystem\src\Filesystem.php	/^ * @method array listFiles(string $path = '', boolean $recursive = false)$/;"	v
path	vendor\league\flysystem\src\Filesystem.php	/^ * @method array listPaths(string $path = '', boolean $recursive = false)$/;"	v
put	vendor\league\flysystem\src\Filesystem.php	/^    public function put($path, $contents, array $config = [])$/;"	f
putStream	vendor\league\flysystem\src\Filesystem.php	/^    public function putStream($path, $resource, array $config = [])$/;"	f
read	vendor\league\flysystem\src\Filesystem.php	/^    public function read($path)$/;"	f
readAndDelete	vendor\league\flysystem\src\Filesystem.php	/^    public function readAndDelete($path)$/;"	f
readStream	vendor\league\flysystem\src\Filesystem.php	/^    public function readStream($path)$/;"	f
recursive	vendor\league\flysystem\src\Filesystem.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
rename	vendor\league\flysystem\src\Filesystem.php	/^    public function rename($path, $newpath)$/;"	f
setVisibility	vendor\league\flysystem\src\Filesystem.php	/^    public function setVisibility($path, $visibility)$/;"	f
update	vendor\league\flysystem\src\Filesystem.php	/^    public function update($path, $contents, array $config = [])$/;"	f
updateStream	vendor\league\flysystem\src\Filesystem.php	/^    public function updateStream($path, $resource, array $config = [])$/;"	f
write	vendor\league\flysystem\src\Filesystem.php	/^    public function write($path, $contents, array $config = [])$/;"	f
writeStream	vendor\league\flysystem\src\Filesystem.php	/^    public function writeStream($path, $resource, array $config = [])$/;"	f
FilesystemInterface	vendor\league\flysystem\src\FilesystemInterface.php	/^interface FilesystemInterface$/;"	i
addPlugin	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function addPlugin(PluginInterface $plugin);$/;"	f
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function createDir($dirname, array $config = []);$/;"	v
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function put($path, $contents, array $config = []);$/;"	v
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function putStream($path, $resource, array $config = []);$/;"	v
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function update($path, $contents, array $config = []);$/;"	v
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function updateStream($path, $resource, array $config = []);$/;"	v
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function write($path, $contents, array $config = []);$/;"	v
config	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function writeStream($path, $resource, array $config = []);$/;"	v
copy	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function copy($path, $newpath);$/;"	f
createDir	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function createDir($dirname, array $config = []);$/;"	f
delete	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function delete($path);$/;"	f
deleteDir	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function deleteDir($dirname);$/;"	f
get	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function get($path, Handler $handler = null);$/;"	f
getMetadata	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function getMetadata($path);$/;"	f
getMimetype	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function getMimetype($path);$/;"	f
getSize	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function getSize($path);$/;"	f
getTimestamp	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function getTimestamp($path);$/;"	f
getVisibility	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function getVisibility($path);$/;"	f
handler	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function get($path, Handler $handler = null);$/;"	v
has	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function has($path);$/;"	f
listContents	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function listContents($directory = '', $recursive = false);$/;"	f
put	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function put($path, $contents, array $config = []);$/;"	f
putStream	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function putStream($path, $resource, array $config = []);$/;"	f
read	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function read($path);$/;"	f
readAndDelete	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function readAndDelete($path);$/;"	f
readStream	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function readStream($path);$/;"	f
recursive	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function listContents($directory = '', $recursive = false);$/;"	v
rename	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function rename($path, $newpath);$/;"	f
setVisibility	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function setVisibility($path, $visibility);$/;"	f
update	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function update($path, $contents, array $config = []);$/;"	f
updateStream	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function updateStream($path, $resource, array $config = []);$/;"	f
write	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function write($path, $contents, array $config = []);$/;"	f
writeStream	vendor\league\flysystem\src\FilesystemInterface.php	/^    public function writeStream($path, $resource, array $config = []);$/;"	f
FilesystemNotFoundException	vendor\league\flysystem\src\FilesystemNotFoundException.php	/^class FilesystemNotFoundException extends LogicException$/;"	c
Handler	vendor\league\flysystem\src\Handler.php	/^abstract class Handler$/;"	c
__call	vendor\league\flysystem\src\Handler.php	/^    public function __call($method, array $arguments)$/;"	f
__construct	vendor\league\flysystem\src\Handler.php	/^    public function __construct(FilesystemInterface $filesystem = null, $path = null)$/;"	f
callback	vendor\league\flysystem\src\Handler.php	/^        $callback = [$this->filesystem, $method];$/;"	v
filesystem	vendor\league\flysystem\src\Handler.php	/^        $this->filesystem = $filesystem;$/;"	v
filesystem	vendor\league\flysystem\src\Handler.php	/^    protected $filesystem;$/;"	v
filesystem	vendor\league\flysystem\src\Handler.php	/^    public function __construct(FilesystemInterface $filesystem = null, $path = null)$/;"	v
getFilesystem	vendor\league\flysystem\src\Handler.php	/^    public function getFilesystem()$/;"	f
getPath	vendor\league\flysystem\src\Handler.php	/^    public function getPath()$/;"	f
getType	vendor\league\flysystem\src\Handler.php	/^    public function getType()$/;"	f
isDir	vendor\league\flysystem\src\Handler.php	/^    public function isDir()$/;"	f
isFile	vendor\league\flysystem\src\Handler.php	/^    public function isFile()$/;"	f
metadata	vendor\league\flysystem\src\Handler.php	/^        $metadata = $this->filesystem->getMetadata($this->path);$/;"	v
path	vendor\league\flysystem\src\Handler.php	/^        $this->path = $path;$/;"	v
path	vendor\league\flysystem\src\Handler.php	/^    protected $path;$/;"	v
setFilesystem	vendor\league\flysystem\src\Handler.php	/^    public function setFilesystem(FilesystemInterface $filesystem)$/;"	f
setPath	vendor\league\flysystem\src\Handler.php	/^    public function setPath($path)$/;"	f
MountManager	vendor\league\flysystem\src\MountManager.php	/^class MountManager implements FilesystemInterface$/;"	c
__call	vendor\league\flysystem\src\MountManager.php	/^    public function __call($method, $arguments)$/;"	f
__construct	vendor\league\flysystem\src\MountManager.php	/^    public function __construct(array $filesystems = [])$/;"	f
arguments	vendor\league\flysystem\src\MountManager.php	/^        $arguments = [$keys, $directory, $recursive];$/;"	v
buffer	vendor\league\flysystem\src\MountManager.php	/^        $buffer = $this->getFilesystem($prefixFrom)->readStream($from);$/;"	v
callback	vendor\league\flysystem\src\MountManager.php	/^        $callback = [$filesystem, $method];$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function copy($from, $to, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function createDir($dirname, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function move($from, $to, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function put($path, $contents, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function putStream($path, $resource, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function update($path, $contents, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function updateStream($path, $resource, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function write($path, $contents, array $config = [])$/;"	v
config	vendor\league\flysystem\src\MountManager.php	/^    public function writeStream($path, $resource, array $config = [])$/;"	v
copied	vendor\league\flysystem\src\MountManager.php	/^        $copied = $this->copy($from, $to, $config);$/;"	v
copy	vendor\league\flysystem\src\MountManager.php	/^    public function copy($from, $to, array $config = [])$/;"	f
createDir	vendor\league\flysystem\src\MountManager.php	/^    public function createDir($dirname, array $config = [])$/;"	f
delete	vendor\league\flysystem\src\MountManager.php	/^    public function delete($path)$/;"	f
deleteDir	vendor\league\flysystem\src\MountManager.php	/^    public function deleteDir($dirname)$/;"	f
filesystem	vendor\league\flysystem\src\MountManager.php	/^            $filesystem = $this->getFilesystem($prefixFrom);$/;"	v
filesystem	vendor\league\flysystem\src\MountManager.php	/^        $filesystem = $this->getFilesystem($prefix);$/;"	v
filesystems	vendor\league\flysystem\src\MountManager.php	/^    protected $filesystems = [];$/;"	v
filesystems	vendor\league\flysystem\src\MountManager.php	/^    public function __construct(array $filesystems = [])$/;"	v
filterPrefix	vendor\league\flysystem\src\MountManager.php	/^    public function filterPrefix(array $arguments)$/;"	f
get	vendor\league\flysystem\src\MountManager.php	/^    public function get($path, Handler $handler = null)$/;"	f
getFilesystem	vendor\league\flysystem\src\MountManager.php	/^    public function getFilesystem($prefix)$/;"	f
getMetadata	vendor\league\flysystem\src\MountManager.php	/^    public function getMetadata($path)$/;"	f
getMimetype	vendor\league\flysystem\src\MountManager.php	/^    public function getMimetype($path)$/;"	f
getPrefixAndPath	vendor\league\flysystem\src\MountManager.php	/^    protected function getPrefixAndPath($path)$/;"	f
getSize	vendor\league\flysystem\src\MountManager.php	/^    public function getSize($path)$/;"	f
getTimestamp	vendor\league\flysystem\src\MountManager.php	/^    public function getTimestamp($path)$/;"	f
getVisibility	vendor\league\flysystem\src\MountManager.php	/^    public function getVisibility($path)$/;"	f
handler	vendor\league\flysystem\src\MountManager.php	/^    public function get($path, Handler $handler = null)$/;"	v
has	vendor\league\flysystem\src\MountManager.php	/^    public function has($path)$/;"	f
invokePluginOnFilesystem	vendor\league\flysystem\src\MountManager.php	/^    public function invokePluginOnFilesystem($method, $arguments, $prefix)$/;"	f
keys	vendor\league\flysystem\src\MountManager.php	/^    public function listWith(array $keys = [], $directory = '', $recursive = false)$/;"	v
listContents	vendor\league\flysystem\src\MountManager.php	/^    public function listContents($directory = '', $recursive = false)$/;"	f
listWith	vendor\league\flysystem\src\MountManager.php	/^    public function listWith(array $keys = [], $directory = '', $recursive = false)$/;"	f
mountFilesystem	vendor\league\flysystem\src\MountManager.php	/^    public function mountFilesystem($prefix, FilesystemInterface $filesystem)$/;"	f
mountFilesystems	vendor\league\flysystem\src\MountManager.php	/^    public function mountFilesystems(array $filesystems)$/;"	f
move	vendor\league\flysystem\src\MountManager.php	/^    public function move($from, $to, array $config = [])$/;"	f
path	vendor\league\flysystem\src\MountManager.php	/^        $path = array_shift($arguments);$/;"	v
prefix	vendor\league\flysystem\src\MountManager.php	/^        foreach ($filesystems as $prefix => $filesystem) {$/;"	v
put	vendor\league\flysystem\src\MountManager.php	/^    public function put($path, $contents, array $config = [])$/;"	f
putStream	vendor\league\flysystem\src\MountManager.php	/^    public function putStream($path, $resource, array $config = [])$/;"	f
read	vendor\league\flysystem\src\MountManager.php	/^    public function read($path)$/;"	f
readAndDelete	vendor\league\flysystem\src\MountManager.php	/^    public function readAndDelete($path)$/;"	f
readStream	vendor\league\flysystem\src\MountManager.php	/^    public function readStream($path)$/;"	f
recursive	vendor\league\flysystem\src\MountManager.php	/^    public function listContents($directory = '', $recursive = false)$/;"	v
recursive	vendor\league\flysystem\src\MountManager.php	/^ * @method array listFiles($directory = '', $recursive = false)$/;"	v
recursive	vendor\league\flysystem\src\MountManager.php	/^ * @method array listPaths($directory = '', $recursive = false)$/;"	v
rename	vendor\league\flysystem\src\MountManager.php	/^    public function rename($path, $newpath)$/;"	f
renamed	vendor\league\flysystem\src\MountManager.php	/^            $renamed = $filesystem->rename($pathFrom, $pathTo);$/;"	v
result	vendor\league\flysystem\src\MountManager.php	/^        $result = $filesystem->listContents($directory, $recursive);$/;"	v
result	vendor\league\flysystem\src\MountManager.php	/^        $result = $this->getFilesystem($prefixTo)->writeStream($to, $buffer, $config);$/;"	v
setVisibility	vendor\league\flysystem\src\MountManager.php	/^    public function setVisibility($path, $visibility)$/;"	f
update	vendor\league\flysystem\src\MountManager.php	/^    public function update($path, $contents, array $config = [])$/;"	f
updateStream	vendor\league\flysystem\src\MountManager.php	/^    public function updateStream($path, $resource, array $config = [])$/;"	f
write	vendor\league\flysystem\src\MountManager.php	/^    public function write($path, $contents, array $config = [])$/;"	f
writeStream	vendor\league\flysystem\src\MountManager.php	/^    public function writeStream($path, $resource, array $config = [])$/;"	f
NotSupportedException	vendor\league\flysystem\src\NotSupportedException.php	/^class NotSupportedException extends RuntimeException$/;"	c
forFtpSystemType	vendor\league\flysystem\src\NotSupportedException.php	/^    public static function forFtpSystemType($systemType)$/;"	f
forLink	vendor\league\flysystem\src\NotSupportedException.php	/^    public static function forLink(SplFileInfo $file)$/;"	f
message	vendor\league\flysystem\src\NotSupportedException.php	/^        $message = "The FTP system type '$systemType' is currently not supported.";$/;"	v
message	vendor\league\flysystem\src\NotSupportedException.php	/^        $message = 'Links are not supported, encountered link at ';$/;"	v
PluginInterface	vendor\league\flysystem\src\PluginInterface.php	/^interface PluginInterface$/;"	i
getMethod	vendor\league\flysystem\src\PluginInterface.php	/^    public function getMethod();$/;"	f
setFilesystem	vendor\league\flysystem\src\PluginInterface.php	/^    public function setFilesystem(FilesystemInterface $filesystem);$/;"	f
AbstractPlugin	vendor\league\flysystem\src\Plugin\AbstractPlugin.php	/^abstract class AbstractPlugin implements PluginInterface$/;"	c
filesystem	vendor\league\flysystem\src\Plugin\AbstractPlugin.php	/^        $this->filesystem = $filesystem;$/;"	v
filesystem	vendor\league\flysystem\src\Plugin\AbstractPlugin.php	/^    protected $filesystem;$/;"	v
setFilesystem	vendor\league\flysystem\src\Plugin\AbstractPlugin.php	/^    public function setFilesystem(FilesystemInterface $filesystem)$/;"	f
EmptyDir	vendor\league\flysystem\src\Plugin\EmptyDir.php	/^class EmptyDir extends AbstractPlugin$/;"	c
getMethod	vendor\league\flysystem\src\Plugin\EmptyDir.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\EmptyDir.php	/^    public function handle($dirname)$/;"	f
listing	vendor\league\flysystem\src\Plugin\EmptyDir.php	/^        $listing = $this->filesystem->listContents($dirname, false);$/;"	v
ForcedCopy	vendor\league\flysystem\src\Plugin\ForcedCopy.php	/^class ForcedCopy extends AbstractPlugin$/;"	c
deleted	vendor\league\flysystem\src\Plugin\ForcedCopy.php	/^            $deleted = $this->filesystem->delete($newpath);$/;"	v
deleted	vendor\league\flysystem\src\Plugin\ForcedCopy.php	/^            $deleted = true;$/;"	v
getMethod	vendor\league\flysystem\src\Plugin\ForcedCopy.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\ForcedCopy.php	/^    public function handle($path, $newpath)$/;"	f
ForcedRename	vendor\league\flysystem\src\Plugin\ForcedRename.php	/^class ForcedRename extends AbstractPlugin$/;"	c
deleted	vendor\league\flysystem\src\Plugin\ForcedRename.php	/^            $deleted = $this->filesystem->delete($newpath);$/;"	v
deleted	vendor\league\flysystem\src\Plugin\ForcedRename.php	/^            $deleted = true;$/;"	v
getMethod	vendor\league\flysystem\src\Plugin\ForcedRename.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\ForcedRename.php	/^    public function handle($path, $newpath)$/;"	f
GetWithMetadata	vendor\league\flysystem\src\Plugin\GetWithMetadata.php	/^class GetWithMetadata extends AbstractPlugin$/;"	c
getMethod	vendor\league\flysystem\src\Plugin\GetWithMetadata.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\GetWithMetadata.php	/^    public function handle($path, array $metadata)$/;"	f
keys	vendor\league\flysystem\src\Plugin\GetWithMetadata.php	/^        $keys = array_diff($metadata, array_keys($object));$/;"	v
method	vendor\league\flysystem\src\Plugin\GetWithMetadata.php	/^            if ( ! method_exists($this->filesystem, $method = 'get' . ucfirst($key))) {$/;"	v
object	vendor\league\flysystem\src\Plugin\GetWithMetadata.php	/^        $object = $this->filesystem->getMetadata($path);$/;"	v
ListFiles	vendor\league\flysystem\src\Plugin\ListFiles.php	/^class ListFiles extends AbstractPlugin$/;"	c
contents	vendor\league\flysystem\src\Plugin\ListFiles.php	/^        $contents = $this->filesystem->listContents($directory, $recursive);$/;"	v
filter	vendor\league\flysystem\src\Plugin\ListFiles.php	/^        $filter = function ($object) {$/;"	v
getMethod	vendor\league\flysystem\src\Plugin\ListFiles.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\ListFiles.php	/^    public function handle($directory = '', $recursive = false)$/;"	f
recursive	vendor\league\flysystem\src\Plugin\ListFiles.php	/^    public function handle($directory = '', $recursive = false)$/;"	v
ListPaths	vendor\league\flysystem\src\Plugin\ListPaths.php	/^class ListPaths extends AbstractPlugin$/;"	c
contents	vendor\league\flysystem\src\Plugin\ListPaths.php	/^        $contents = $this->filesystem->listContents($directory, $recursive);$/;"	v
getMethod	vendor\league\flysystem\src\Plugin\ListPaths.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\ListPaths.php	/^    public function handle($directory = '', $recursive = false)$/;"	f
recursive	vendor\league\flysystem\src\Plugin\ListPaths.php	/^    public function handle($directory = '', $recursive = false)$/;"	v
result	vendor\league\flysystem\src\Plugin\ListPaths.php	/^        $result = [];$/;"	v
ListWith	vendor\league\flysystem\src\Plugin\ListWith.php	/^class ListWith extends AbstractPlugin$/;"	c
contents	vendor\league\flysystem\src\Plugin\ListWith.php	/^        $contents = $this->filesystem->listContents($directory, $recursive);$/;"	v
getMetadataByName	vendor\league\flysystem\src\Plugin\ListWith.php	/^    protected function getMetadataByName(array $object, $key)$/;"	f
getMethod	vendor\league\flysystem\src\Plugin\ListWith.php	/^    public function getMethod()$/;"	f
handle	vendor\league\flysystem\src\Plugin\ListWith.php	/^    public function handle(array $keys = [], $directory = '', $recursive = false)$/;"	f
index	vendor\league\flysystem\src\Plugin\ListWith.php	/^        foreach ($contents as $index => $object) {$/;"	v
keys	vendor\league\flysystem\src\Plugin\ListWith.php	/^    public function handle(array $keys = [], $directory = '', $recursive = false)$/;"	v
method	vendor\league\flysystem\src\Plugin\ListWith.php	/^        $method = 'get' . ucfirst($key);$/;"	v
missingKeys	vendor\league\flysystem\src\Plugin\ListWith.php	/^                $missingKeys = array_diff($keys, array_keys($object));$/;"	v
__call	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^    public function __call($method, array $arguments)$/;"	f
addPlugin	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^    public function addPlugin(PluginInterface $plugin)$/;"	f
callback	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^        $callback = [$plugin, 'handle'];$/;"	v
findPlugin	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^    protected function findPlugin($method)$/;"	f
invokePlugin	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^    protected function invokePlugin($method, array $arguments, FilesystemInterface $filesystem)$/;"	f
plugin	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^        $plugin = $this->findPlugin($method);$/;"	v
plugins	vendor\league\flysystem\src\Plugin\PluggableTrait.php	/^    protected $plugins = [];$/;"	v
PluginNotFoundException	vendor\league\flysystem\src\Plugin\PluginNotFoundException.php	/^class PluginNotFoundException extends LogicException$/;"	c
ReadInterface	vendor\league\flysystem\src\ReadInterface.php	/^interface ReadInterface$/;"	i
getMetadata	vendor\league\flysystem\src\ReadInterface.php	/^    public function getMetadata($path);$/;"	f
getMimetype	vendor\league\flysystem\src\ReadInterface.php	/^    public function getMimetype($path);$/;"	f
getSize	vendor\league\flysystem\src\ReadInterface.php	/^    public function getSize($path);$/;"	f
getTimestamp	vendor\league\flysystem\src\ReadInterface.php	/^    public function getTimestamp($path);$/;"	f
getVisibility	vendor\league\flysystem\src\ReadInterface.php	/^    public function getVisibility($path);$/;"	f
has	vendor\league\flysystem\src\ReadInterface.php	/^    public function has($path);$/;"	f
listContents	vendor\league\flysystem\src\ReadInterface.php	/^    public function listContents($directory = '', $recursive = false);$/;"	f
read	vendor\league\flysystem\src\ReadInterface.php	/^    public function read($path);$/;"	f
readStream	vendor\league\flysystem\src\ReadInterface.php	/^    public function readStream($path);$/;"	f
recursive	vendor\league\flysystem\src\ReadInterface.php	/^    public function listContents($directory = '', $recursive = false);$/;"	v
RootViolationException	vendor\league\flysystem\src\RootViolationException.php	/^class RootViolationException extends LogicException$/;"	c
SafeStorage	vendor\league\flysystem\src\SafeStorage.php	/^final class SafeStorage$/;"	c
__construct	vendor\league\flysystem\src\SafeStorage.php	/^    public function __construct()$/;"	f
__destruct	vendor\league\flysystem\src\SafeStorage.php	/^    public function __destruct()$/;"	f
hash	vendor\league\flysystem\src\SafeStorage.php	/^        $this->hash = spl_object_hash($this);$/;"	v
hash	vendor\league\flysystem\src\SafeStorage.php	/^    private $hash;$/;"	v
retrieveSafely	vendor\league\flysystem\src\SafeStorage.php	/^    public function retrieveSafely($key)$/;"	f
safeStorage	vendor\league\flysystem\src\SafeStorage.php	/^    protected static $safeStorage = [];$/;"	v
storeSafely	vendor\league\flysystem\src\SafeStorage.php	/^    public function storeSafely($key, $value)$/;"	f
UnreadableFileException	vendor\league\flysystem\src\UnreadableFileException.php	/^class UnreadableFileException extends Exception$/;"	c
forFileInfo	vendor\league\flysystem\src\UnreadableFileException.php	/^    public static function forFileInfo(SplFileInfo $fileInfo)$/;"	f
Util	vendor\league\flysystem\src\Util.php	/^class Util$/;"	c
basename	vendor\league\flysystem\src\Util.php	/^            $basename = rtrim($basename, ':');$/;"	v
basename	vendor\league\flysystem\src\Util.php	/^            $basename = substr($basename, 2);$/;"	v
basename	vendor\league\flysystem\src\Util.php	/^        $basename = preg_replace('#.*?([^' . preg_quote($separators, '#') . ']+$)#', '$1', $path);$/;"	v
basename	vendor\league\flysystem\src\Util.php	/^    private static function basename($path)$/;"	f
contentSize	vendor\league\flysystem\src\Util.php	/^    public static function contentSize($contents)$/;"	f
directories	vendor\league\flysystem\src\Util.php	/^        $directories = [];$/;"	v
directories	vendor\league\flysystem\src\Util.php	/^        $directories = array_diff(array_unique($directories), array_unique($listedDirectories));$/;"	v
dirname	vendor\league\flysystem\src\Util.php	/^        if ('' !== $dirname = dirname($path)) {$/;"	v
dirname	vendor\league\flysystem\src\Util.php	/^        return $dirname === '.' ? '' : $dirname;$/;"	v
dirname	vendor\league\flysystem\src\Util.php	/^    public static function dirname($path)$/;"	f
emulateDirectories	vendor\league\flysystem\src\Util.php	/^    public static function emulateDirectories(array $listing)$/;"	f
emulateObjectDirectories	vendor\league\flysystem\src\Util.php	/^    protected static function emulateObjectDirectories(array $object, array $directories, array $listedDirectories)$/;"	f
ensureConfig	vendor\league\flysystem\src\Util.php	/^    public static function ensureConfig($config)$/;"	f
from	vendor\league\flysystem\src\Util.php	/^        foreach ($map as $from => $to) {$/;"	v
getStreamSize	vendor\league\flysystem\src\Util.php	/^    public static function getStreamSize($resource)$/;"	f
guessMimeType	vendor\league\flysystem\src\Util.php	/^    public static function guessMimeType($path, $content)$/;"	f
isSeekableStream	vendor\league\flysystem\src\Util.php	/^    public static function isSeekableStream($resource)$/;"	f
listedDirectories	vendor\league\flysystem\src\Util.php	/^        $listedDirectories = [];$/;"	v
map	vendor\league\flysystem\src\Util.php	/^    public static function map(array $object, array $map)$/;"	f
metadata	vendor\league\flysystem\src\Util.php	/^        $metadata = stream_get_meta_data($resource);$/;"	v
mimeType	vendor\league\flysystem\src\Util.php	/^        $mimeType = MimeType::detectByContent($content);$/;"	v
normalizeDirname	vendor\league\flysystem\src\Util.php	/^    public static function normalizeDirname($dirname)$/;"	f
normalizePath	vendor\league\flysystem\src\Util.php	/^    public static function normalizePath($path)$/;"	f
normalizePrefix	vendor\league\flysystem\src\Util.php	/^    public static function normalizePrefix($prefix, $separator)$/;"	f
normalizeRelativePath	vendor\league\flysystem\src\Util.php	/^    public static function normalizeRelativePath($path)$/;"	f
parent	vendor\league\flysystem\src\Util.php	/^            $parent = static::dirname($parent);$/;"	v
parent	vendor\league\flysystem\src\Util.php	/^        $parent = $object['dirname'];$/;"	v
parts	vendor\league\flysystem\src\Util.php	/^        $parts = [];$/;"	v
path	vendor\league\flysystem\src\Util.php	/^            $path = preg_replace('#\\p{C}+|^\\.\/#u', '', $path);$/;"	v
path	vendor\league\flysystem\src\Util.php	/^        $path = rtrim($path, $separators);$/;"	v
path	vendor\league\flysystem\src\Util.php	/^        $path = static::removeFunkyWhiteSpace($path);$/;"	v
path	vendor\league\flysystem\src\Util.php	/^        $path = str_replace('\\\\', '\/', $path);$/;"	v
pathinfo	vendor\league\flysystem\src\Util.php	/^        $pathinfo = compact('path');$/;"	v
pathinfo	vendor\league\flysystem\src\Util.php	/^    public static function pathinfo($path)$/;"	f
removeFunkyWhiteSpace	vendor\league\flysystem\src\Util.php	/^    protected static function removeFunkyWhiteSpace($path)$/;"	f
result	vendor\league\flysystem\src\Util.php	/^        $result = [];$/;"	v
rewindStream	vendor\league\flysystem\src\Util.php	/^    public static function rewindStream($resource)$/;"	f
separators	vendor\league\flysystem\src\Util.php	/^        $separators = DIRECTORY_SEPARATOR === '\/' ? '\/' : '\\\/';$/;"	v
stat	vendor\league\flysystem\src\Util.php	/^        $stat = fstat($resource);$/;"	v
ContentListingFormatter	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^class ContentListingFormatter$/;"	c
__construct	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    public function __construct($directory, $recursive, $caseSensitive = true)$/;"	f
addPathInfo	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private function addPathInfo(array $entry)$/;"	f
caseSensitive	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^        $this->caseSensitive = $caseSensitive;$/;"	v
caseSensitive	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private $caseSensitive;$/;"	v
caseSensitive	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    public function __construct($directory, $recursive, $caseSensitive = true)$/;"	v
directory	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^        $this->directory = rtrim($directory, '\/');$/;"	v
directory	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private $directory;$/;"	v
formatListing	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    public function formatListing(array $listing)$/;"	f
isDirectChild	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private function isDirectChild(array $entry)$/;"	f
isEntryOutOfScope	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private function isEntryOutOfScope(array $entry)$/;"	f
listing	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^        $listing = array_filter(array_map([$this, 'addPathInfo'], $listing), [$this, 'isEntryOutOfScope']);$/;"	v
recursive	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^        $this->recursive = $recursive;$/;"	v
recursive	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private $recursive;$/;"	v
residesInDirectory	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private function residesInDirectory(array $entry)$/;"	f
sortListing	vendor\league\flysystem\src\Util\ContentListingFormatter.php	/^    private function sortListing(array $listing)$/;"	f
MimeType	vendor\league\flysystem\src\Util\MimeType.php	/^class MimeType$/;"	c
detectByContent	vendor\league\flysystem\src\Util\MimeType.php	/^    public static function detectByContent($content)$/;"	f
detectByFileExtension	vendor\league\flysystem\src\Util\MimeType.php	/^    public static function detectByFileExtension($extension)$/;"	f
detectByFilename	vendor\league\flysystem\src\Util\MimeType.php	/^    public static function detectByFilename($filename)$/;"	f
extension	vendor\league\flysystem\src\Util\MimeType.php	/^        $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));$/;"	v
extensionToMimeTypeMap	vendor\league\flysystem\src\Util\MimeType.php	/^    protected static $extensionToMimeTypeMap = [$/;"	v
finfo	vendor\league\flysystem\src\Util\MimeType.php	/^            $finfo = new finfo(FILEINFO_MIME_TYPE);$/;"	v
getExtensionToMimeTypeMap	vendor\league\flysystem\src\Util\MimeType.php	/^    public static function getExtensionToMimeTypeMap()$/;"	f
StreamHasher	vendor\league\flysystem\src\Util\StreamHasher.php	/^class StreamHasher$/;"	c
__construct	vendor\league\flysystem\src\Util\StreamHasher.php	/^    public function __construct($algo)$/;"	f
algo	vendor\league\flysystem\src\Util\StreamHasher.php	/^        $this->algo = $algo;$/;"	v
algo	vendor\league\flysystem\src\Util\StreamHasher.php	/^    private $algo;$/;"	v
context	vendor\league\flysystem\src\Util\StreamHasher.php	/^        $context = hash_init($this->algo);$/;"	v
hash	vendor\league\flysystem\src\Util\StreamHasher.php	/^    public function hash($resource)$/;"	f
class	vendor\opis\closure\autoload.php	/^            $class = substr($class, $pos + 1);$/;"	v
class	vendor\opis\closure\autoload.php	/^        $class = substr($class, strlen($namespace));$/;"	v
class	vendor\opis\closure\autoload.php	/^    $class = ltrim($class, '\\\\');$/;"	v
dir	vendor\opis\closure\autoload.php	/^    $dir = __DIR__ . '\/src';$/;"	v
namespace	vendor\opis\closure\autoload.php	/^    $namespace = 'Opis\\Closure';$/;"	v
path	vendor\opis\closure\autoload.php	/^            $path = str_replace('\\\\', '\/', substr($class, 0, $pos)) . '\/';$/;"	v
path	vendor\opis\closure\autoload.php	/^        $path = '';$/;"	v
data	vendor\opis\closure\functions.php	/^    $data = \\serialize($data);$/;"	v
data	vendor\opis\closure\functions.php	/^    $data = \\unserialize($data);$/;"	v
serialize	vendor\opis\closure\functions.php	/^function serialize($data)$/;"	f
unserialize	vendor\opis\closure\functions.php	/^function unserialize($data)$/;"	f
Analyzer	vendor\opis\closure\src\Analyzer.php	/^class Analyzer extends ClosureAnalyzer$/;"	c
analyze	vendor\opis\closure\src\Analyzer.php	/^    public function analyze(Closure $closure)$/;"	f
data	vendor\opis\closure\src\Analyzer.php	/^        $data = [$/;"	v
determineCode	vendor\opis\closure\src\Analyzer.php	/^    protected function determineCode(array &$data)$/;"	f
determineContext	vendor\opis\closure\src\Analyzer.php	/^    protected function determineContext(array &$data)$/;"	f
reflection	vendor\opis\closure\src\Analyzer.php	/^        $reflection = new ReflectionClosure($closure);$/;"	v
scope	vendor\opis\closure\src\Analyzer.php	/^        $scope = $reflection->getClosureScopeClass();$/;"	v
ClosureContext	vendor\opis\closure\src\ClosureContext.php	/^class ClosureContext$/;"	c
__construct	vendor\opis\closure\src\ClosureContext.php	/^    public function __construct()$/;"	f
locks	vendor\opis\closure\src\ClosureContext.php	/^        $this->locks = 0;$/;"	v
locks	vendor\opis\closure\src\ClosureContext.php	/^    public $locks;$/;"	v
scope	vendor\opis\closure\src\ClosureContext.php	/^        $this->scope = new ClosureScope();$/;"	v
scope	vendor\opis\closure\src\ClosureContext.php	/^    public $scope;$/;"	v
ClosureScope	vendor\opis\closure\src\ClosureScope.php	/^class ClosureScope extends \\SplObjectStorage$/;"	c
serializations	vendor\opis\closure\src\ClosureScope.php	/^    public $serializations = 0;$/;"	v
toserialize	vendor\opis\closure\src\ClosureScope.php	/^    public $toserialize = 0;$/;"	v
ClosureStream	vendor\opis\closure\src\ClosureStream.php	/^class ClosureStream$/;"	c
content	vendor\opis\closure\src\ClosureStream.php	/^        $this->content = "<?php\\nreturn " . substr($path, strlen(static::STREAM_PROTO . ':\/\/')) . ";";$/;"	v
content	vendor\opis\closure\src\ClosureStream.php	/^    protected $content;$/;"	v
crt	vendor\opis\closure\src\ClosureStream.php	/^        $crt = $this->pointer;$/;"	v
isRegistered	vendor\opis\closure\src\ClosureStream.php	/^    protected static $isRegistered = false;$/;"	v
length	vendor\opis\closure\src\ClosureStream.php	/^        $this->length = strlen($this->content);$/;"	v
length	vendor\opis\closure\src\ClosureStream.php	/^    protected $length;$/;"	v
pointer	vendor\opis\closure\src\ClosureStream.php	/^                $this->pointer = $offset;$/;"	v
pointer	vendor\opis\closure\src\ClosureStream.php	/^                $this->pointer = $this->length + $offset;$/;"	v
pointer	vendor\opis\closure\src\ClosureStream.php	/^            $this->pointer = $crt;$/;"	v
pointer	vendor\opis\closure\src\ClosureStream.php	/^    protected $pointer = 0;$/;"	v
register	vendor\opis\closure\src\ClosureStream.php	/^    public static function register()$/;"	f
stat	vendor\opis\closure\src\ClosureStream.php	/^        $stat = stat(__FILE__);$/;"	v
stream_eof	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_eof()$/;"	f
stream_open	vendor\opis\closure\src\ClosureStream.php	/^    function stream_open($path, $mode, $options, &$opened_path)$/;"	f
stream_read	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_read($count)$/;"	f
stream_seek	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_seek($offset, $whence = SEEK_SET)$/;"	f
stream_set_option	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_set_option($option, $arg1, $arg2)$/;"	f
stream_stat	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_stat()$/;"	f
stream_tell	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_tell()$/;"	f
url_stat	vendor\opis\closure\src\ClosureStream.php	/^    public function url_stat($path, $flags)$/;"	f
value	vendor\opis\closure\src\ClosureStream.php	/^        $value = substr($this->content, $this->pointer, $count);$/;"	v
whence	vendor\opis\closure\src\ClosureStream.php	/^    public function stream_seek($offset, $whence = SEEK_SET)$/;"	v
ISecurityProvider	vendor\opis\closure\src\ISecurityProvider.php	/^interface ISecurityProvider$/;"	i
sign	vendor\opis\closure\src\ISecurityProvider.php	/^    public function sign($closure);$/;"	f
verify	vendor\opis\closure\src\ISecurityProvider.php	/^    public function verify(array $data);$/;"	f
ReflectionClosure	vendor\opis\closure\src\ReflectionClosure.php	/^class ReflectionClosure extends ReflectionFunction$/;"	c
__construct	vendor\opis\closure\src\ReflectionClosure.php	/^    public function __construct(Closure $closure, $code = null)$/;"	f
_class	vendor\opis\closure\src\ReflectionClosure.php	/^        $_class = var_export(trim($className, '\\\\'), true);$/;"	v
_dir	vendor\opis\closure\src\ReflectionClosure.php	/^        $_dir = var_export(dirname($fileName), true);$/;"	v
_file	vendor\opis\closure\src\ReflectionClosure.php	/^        $_file = var_export($fileName, true);$/;"	v
_function	vendor\opis\closure\src\ReflectionClosure.php	/^        $_function = $ns . ($ns == '' ? '' : '\\\\') . '{closure}';$/;"	v
_function	vendor\opis\closure\src\ReflectionClosure.php	/^        $_function = var_export($_function, true);$/;"	v
_method	vendor\opis\closure\src\ReflectionClosure.php	/^        $_method = ($className == '' ? '' : trim($className, '\\\\') . '::') . $_function;$/;"	v
_method	vendor\opis\closure\src\ReflectionClosure.php	/^        $_method = var_export($_method, true);$/;"	v
_namespace	vendor\opis\closure\src\ReflectionClosure.php	/^        $_namespace = var_export($ns, true);$/;"	v
_trait	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $_trait = ($ns == '' ? '' : $ns . '\\\\') . $struct['name'];$/;"	v
_trait	vendor\opis\closure\src\ReflectionClosure.php	/^                                $_trait = '';$/;"	v
_trait	vendor\opis\closure\src\ReflectionClosure.php	/^                                $_trait = var_export($_trait, true);$/;"	v
_trait	vendor\opis\closure\src\ReflectionClosure.php	/^        $_trait = null;$/;"	v
alias	vendor\opis\closure\src\ReflectionClosure.php	/^                            $alias = $token[1];$/;"	v
alias	vendor\opis\closure\src\ReflectionClosure.php	/^                        $alias = $token[1];$/;"	v
alias	vendor\opis\closure\src\ReflectionClosure.php	/^        $alias = '';$/;"	v
anonymous_mark	vendor\opis\closure\src\ReflectionClosure.php	/^                                $anonymous_mark = $open;$/;"	v
anonymous_mark	vendor\opis\closure\src\ReflectionClosure.php	/^        $anonymous_mark = 0;$/;"	v
className	vendor\opis\closure\src\ReflectionClosure.php	/^            $className = '\\\\' . trim($className->getName(), '\\\\');$/;"	v
className	vendor\opis\closure\src\ReflectionClosure.php	/^        $className = null;$/;"	v
className	vendor\opis\closure\src\ReflectionClosure.php	/^        if (null !== $className = $this->getClosureScopeClass()) {$/;"	v
classes	vendor\opis\closure\src\ReflectionClosure.php	/^                                            $classes = $this->getClasses();$/;"	v
classes	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $classes = $this->getClasses();$/;"	v
classes	vendor\opis\closure\src\ReflectionClosure.php	/^        $classes = $functions = $constants = null;$/;"	v
classes	vendor\opis\closure\src\ReflectionClosure.php	/^        $classes = array();$/;"	v
classes	vendor\opis\closure\src\ReflectionClosure.php	/^    protected static $classes = array();$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^                            $code = '';$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^                        $code = $token[1];$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^                        $code = '';$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^                $code = substr($code, 6);$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^            $code = $this->getCode();$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^            return $this->code = substr($fileName, strlen($match));$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^        $code = '';$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^        $this->code = $code;$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $code;$/;"	v
code	vendor\opis\closure\src\ReflectionClosure.php	/^    public function __construct(Closure $closure, $code = null)$/;"	v
constants	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $constants = $this->getConstants();$/;"	v
constants	vendor\opis\closure\src\ReflectionClosure.php	/^        $constants = array();$/;"	v
constants	vendor\opis\closure\src\ReflectionClosure.php	/^    protected static $constants = array();$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                                    $context === 'args' ||$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                                    $context === 'extends'$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                                    $context === 'instanceof' ||$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                                    $context === 'return_type' ||$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'args';$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'extends';$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'instanceof';$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'new';$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'return_type';$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'root';$/;"	v
context	vendor\opis\closure\src\ReflectionClosure.php	/^                            $context = 'use';$/;"	v
endLine	vendor\opis\closure\src\ReflectionClosure.php	/^                                $endLine = $this->getEndLine();$/;"	v
endLine	vendor\opis\closure\src\ReflectionClosure.php	/^                                $endLine = $token[2];$/;"	v
endLine	vendor\opis\closure\src\ReflectionClosure.php	/^            $endLine = $this->getEndLine();$/;"	v
fetchItems	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function fetchItems()$/;"	f
fileName	vendor\opis\closure\src\ReflectionClosure.php	/^        $fileName = $this->getFileName();$/;"	v
files	vendor\opis\closure\src\ReflectionClosure.php	/^    protected static $files = array();$/;"	v
fn	vendor\opis\closure\src\ReflectionClosure.php	/^            $fn = PHP_MINOR_VERSION === 4;$/;"	v
fn	vendor\opis\closure\src\ReflectionClosure.php	/^        $fn = false;$/;"	v
functions	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $functions = $this->getFunctions();$/;"	v
functions	vendor\opis\closure\src\ReflectionClosure.php	/^        $functions = array();$/;"	v
functions	vendor\opis\closure\src\ReflectionClosure.php	/^    protected static $functions = array();$/;"	v
getClasses	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getClasses()$/;"	f
getCode	vendor\opis\closure\src\ReflectionClosure.php	/^    public function getCode()$/;"	f
getConstants	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getConstants()$/;"	f
getFileTokens	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getFileTokens()$/;"	f
getFunctions	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getFunctions()$/;"	f
getHashedFileName	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getHashedFileName()$/;"	f
getStructures	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getStructures()$/;"	f
getTokens	vendor\opis\closure\src\ReflectionClosure.php	/^    protected function getTokens()$/;"	f
getUseVariables	vendor\opis\closure\src\ReflectionClosure.php	/^    public function getUseVariables()$/;"	f
hashedName	vendor\opis\closure\src\ReflectionClosure.php	/^            $this->hashedName = sha1($this->getFileName());$/;"	v
hashedName	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $hashedName;$/;"	v
id_name	vendor\opis\closure\src\ReflectionClosure.php	/^                            $id_name = '';$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                                            $id_start = $classes[$id_start_ci];$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                                            $id_start = $nsf . '\\\\' . $id_start;$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $id_start = $classes[$id_start_ci];$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $id_start = $constants[$id_start];$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $id_start = $functions[$id_start_ci];$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $id_start = $nsf . '\\\\' . $id_start;$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^                            $id_start = $token[1];$/;"	v
id_start	vendor\opis\closure\src\ReflectionClosure.php	/^        $id_start = $id_start_ci = $id_name = $context = '';$/;"	v
id_start_ci	vendor\opis\closure\src\ReflectionClosure.php	/^                                    if($id_start_ci === 'self' || $id_start_ci === 'static' || $id_start_ci === 'parent'){$/;"	v
id_start_ci	vendor\opis\closure\src\ReflectionClosure.php	/^                                if($id_start_ci === 'self' || $id_start_ci === 'static' || $id_start_ci === 'parent'){$/;"	v
id_start_ci	vendor\opis\closure\src\ReflectionClosure.php	/^                            $id_start_ci = strtolower($id_start);$/;"	v
inside_anonymous	vendor\opis\closure\src\ReflectionClosure.php	/^                                $inside_anonymous = !($open === $anonymous_mark);$/;"	v
inside_anonymous	vendor\opis\closure\src\ReflectionClosure.php	/^                                $inside_anonymous = true;$/;"	v
inside_anonymous	vendor\opis\closure\src\ReflectionClosure.php	/^        $inside_anonymous = false;$/;"	v
isBindingRequired	vendor\opis\closure\src\ReflectionClosure.php	/^        $this->isBindingRequired = $isUsingThisObject;$/;"	v
isBindingRequired	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $isBindingRequired;$/;"	v
isBindingRequired	vendor\opis\closure\src\ReflectionClosure.php	/^    public function isBindingRequired()$/;"	f
isConst	vendor\opis\closure\src\ReflectionClosure.php	/^                            $isConst = true;$/;"	v
isFunc	vendor\opis\closure\src\ReflectionClosure.php	/^                            $isFunc = $isConst = false;$/;"	v
isFunc	vendor\opis\closure\src\ReflectionClosure.php	/^                            $isFunc = true;$/;"	v
isFunc	vendor\opis\closure\src\ReflectionClosure.php	/^        $isFunc = $isConst = false;$/;"	v
isScopeRequired	vendor\opis\closure\src\ReflectionClosure.php	/^        $this->isScopeRequired = $isUsingScope;$/;"	v
isScopeRequired	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $isScopeRequired;$/;"	v
isScopeRequired	vendor\opis\closure\src\ReflectionClosure.php	/^    public function isScopeRequired()$/;"	f
isShortClosure	vendor\opis\closure\src\ReflectionClosure.php	/^                        $isShortClosure = true;$/;"	v
isShortClosure	vendor\opis\closure\src\ReflectionClosure.php	/^            $this->isShortClosure = strtolower(substr(trim($code), 0, 2)) === 'fn';$/;"	v
isShortClosure	vendor\opis\closure\src\ReflectionClosure.php	/^        $isShortClosure = false;$/;"	v
isShortClosure	vendor\opis\closure\src\ReflectionClosure.php	/^        $this->isShortClosure = $isShortClosure;$/;"	v
isShortClosure	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $isShortClosure;$/;"	v
isShortClosure	vendor\opis\closure\src\ReflectionClosure.php	/^    public function isShortClosure()$/;"	f
isStatic	vendor\opis\closure\src\ReflectionClosure.php	/^    public function isStatic()$/;"	f
isStaticClosure	vendor\opis\closure\src\ReflectionClosure.php	/^            $this->isStaticClosure = strtolower(substr($this->getCode(), 0, 6)) === 'static';$/;"	v
isStaticClosure	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $isStaticClosure;$/;"	v
isUsingScope	vendor\opis\closure\src\ReflectionClosure.php	/^                                        $isUsingScope = true;$/;"	v
isUsingScope	vendor\opis\closure\src\ReflectionClosure.php	/^                                    $isUsingScope = true;$/;"	v
isUsingScope	vendor\opis\closure\src\ReflectionClosure.php	/^                            $isUsingScope = true;$/;"	v
isUsingScope	vendor\opis\closure\src\ReflectionClosure.php	/^        $isUsingScope = false;$/;"	v
isUsingThisObject	vendor\opis\closure\src\ReflectionClosure.php	/^                                $isUsingThisObject = true;$/;"	v
isUsingThisObject	vendor\opis\closure\src\ReflectionClosure.php	/^        $isUsingThisObject = false;$/;"	v
is_array	vendor\opis\closure\src\ReflectionClosure.php	/^            $is_array = is_array($token);$/;"	v
key	vendor\opis\closure\src\ReflectionClosure.php	/^        $key = $this->getHashedFileName();$/;"	v
l	vendor\opis\closure\src\ReflectionClosure.php	/^        for($i = 0, $l = count($tokens); $i < $l; $i++) {$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^                            $lastState = 'anonymous';$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^                            $lastState = 'closure';$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^                            $lastState = 'closure_args';$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^                            $lastState = 'return';$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^                            $lastState = 'use';$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^                            $lastState = 'use-group';$/;"	v
lastState	vendor\opis\closure\src\ReflectionClosure.php	/^        $lastState = '';$/;"	v
line	vendor\opis\closure\src\ReflectionClosure.php	/^                $line = $token[2];$/;"	v
line	vendor\opis\closure\src\ReflectionClosure.php	/^        $line = $this->getStartLine() - 1;$/;"	v
lineAdd	vendor\opis\closure\src\ReflectionClosure.php	/^        $lineAdd = 0;$/;"	v
match	vendor\opis\closure\src\ReflectionClosure.php	/^        $match = ClosureStream::STREAM_PROTO . ':\/\/';$/;"	v
name	vendor\opis\closure\src\ReflectionClosure.php	/^                                $name = '\\\\' . $name;$/;"	v
name	vendor\opis\closure\src\ReflectionClosure.php	/^                            $name = $alias = '';$/;"	v
name	vendor\opis\closure\src\ReflectionClosure.php	/^        $name = '';$/;"	v
ns	vendor\opis\closure\src\ReflectionClosure.php	/^        $ns = $this->getNamespaceName();$/;"	v
nsf	vendor\opis\closure\src\ReflectionClosure.php	/^        $nsf = $ns == '' ? '' : ($ns[0] == '\\\\' ? $ns : '\\\\' . $ns);$/;"	v
open	vendor\opis\closure\src\ReflectionClosure.php	/^                            if ($isShortClosure && $open === 0) {$/;"	v
open	vendor\opis\closure\src\ReflectionClosure.php	/^        $open = 0;$/;"	v
php7_types	vendor\opis\closure\src\ReflectionClosure.php	/^                    $php7_types = array('string', 'int', 'bool', 'float');$/;"	v
php7_types	vendor\opis\closure\src\ReflectionClosure.php	/^                    $php7_types = array('string', 'int', 'bool', 'float', 'void');$/;"	v
php7_types	vendor\opis\closure\src\ReflectionClosure.php	/^                    $php7_types = array('string', 'int', 'bool', 'float', 'void', 'object');$/;"	v
prefix	vendor\opis\closure\src\ReflectionClosure.php	/^                                $prefix = '\\\\' . $prefix;$/;"	v
prefix	vendor\opis\closure\src\ReflectionClosure.php	/^                            $prefix = $name = $alias = '';$/;"	v
prefix	vendor\opis\closure\src\ReflectionClosure.php	/^                            $prefix = $name;$/;"	v
prefix	vendor\opis\closure\src\ReflectionClosure.php	/^        $prefix = '';$/;"	v
results	vendor\opis\closure\src\ReflectionClosure.php	/^            $results = array();$/;"	v
start	vendor\opis\closure\src\ReflectionClosure.php	/^                        $start = true;$/;"	v
start	vendor\opis\closure\src\ReflectionClosure.php	/^            $start = false;$/;"	v
startLine	vendor\opis\closure\src\ReflectionClosure.php	/^                                $startLine = $this->getStartLine();$/;"	v
startLine	vendor\opis\closure\src\ReflectionClosure.php	/^                            $startLine = $token[2];$/;"	v
startLine	vendor\opis\closure\src\ReflectionClosure.php	/^            $startLine = $this->getStartLine();$/;"	v
startLine	vendor\opis\closure\src\ReflectionClosure.php	/^        $startLine = $endLine = 0;$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                                $state = 'closure';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                                $state = 'start';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = $lastState;$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = $token === ';' ? 'start' : 'use';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = $token === '}' ? 'use' : 'use-group';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = $token[0] === T_DOUBLE_COLON ? 'ignore_next' : $lastState;$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'alias';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'anonymous';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'before_structure';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'closure';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'closure_args';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'function';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'id_name';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'id_start';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'ignore_next';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'invoke';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'named_function';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'new';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'return';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'start';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'structure';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'use';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                            $state = 'use-group';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                        $state = $lastState;$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                        $state = $token[0] === T_FUNCTION ? 'function' : 'static';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                        $state = 'closure_args';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                        $state = 'start';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                        $state = 'structure';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^                        $state = 'use';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^        $state = $lastState = 'start';$/;"	v
state	vendor\opis\closure\src\ReflectionClosure.php	/^        $state = 'start';$/;"	v
structIgnore	vendor\opis\closure\src\ReflectionClosure.php	/^                                $structIgnore = false;$/;"	v
structIgnore	vendor\opis\closure\src\ReflectionClosure.php	/^                            $structIgnore = true;$/;"	v
structIgnore	vendor\opis\closure\src\ReflectionClosure.php	/^        $structIgnore = false;$/;"	v
structName	vendor\opis\closure\src\ReflectionClosure.php	/^                        $structName = $token[1];$/;"	v
structType	vendor\opis\closure\src\ReflectionClosure.php	/^                            $structType = $token[0] == T_CLASS$/;"	v
structType	vendor\opis\closure\src\ReflectionClosure.php	/^        $structType = $structName = '';$/;"	v
structures	vendor\opis\closure\src\ReflectionClosure.php	/^                                $structures = $this->getStructures();$/;"	v
structures	vendor\opis\closure\src\ReflectionClosure.php	/^        $structures = array();$/;"	v
structures	vendor\opis\closure\src\ReflectionClosure.php	/^    protected static $structures = array();$/;"	v
timestamp	vendor\opis\closure\src\ReflectionClosure.php	/^                                $timestamp = time();$/;"	v
token	vendor\opis\closure\src\ReflectionClosure.php	/^            $token = $tokens[$i];$/;"	v
tokens	vendor\opis\closure\src\ReflectionClosure.php	/^            $this->tokens = $results;$/;"	v
tokens	vendor\opis\closure\src\ReflectionClosure.php	/^            $tokens = $this->getFileTokens();$/;"	v
tokens	vendor\opis\closure\src\ReflectionClosure.php	/^        $tokens = $this->getFileTokens();$/;"	v
tokens	vendor\opis\closure\src\ReflectionClosure.php	/^        $tokens = $this->getTokens();$/;"	v
tokens	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $tokens;$/;"	v
use	vendor\opis\closure\src\ReflectionClosure.php	/^        $use = array();$/;"	v
useVariables	vendor\opis\closure\src\ReflectionClosure.php	/^            $this->useVariables = $this->getStaticVariables();$/;"	v
useVariables	vendor\opis\closure\src\ReflectionClosure.php	/^            $this->useVariables = empty($use) ? $use : array_intersect_key($this->getStaticVariables(), array_flip($use));$/;"	v
useVariables	vendor\opis\closure\src\ReflectionClosure.php	/^        $this->useVariables = empty($use) ? $use : array_intersect_key($this->getStaticVariables(), array_flip($use));$/;"	v
useVariables	vendor\opis\closure\src\ReflectionClosure.php	/^    protected $useVariables;$/;"	v
SecurityException	vendor\opis\closure\src\SecurityException.php	/^class SecurityException extends Exception$/;"	c
SecurityProvider	vendor\opis\closure\src\SecurityProvider.php	/^class SecurityProvider implements ISecurityProvider$/;"	c
__construct	vendor\opis\closure\src\SecurityProvider.php	/^    public function __construct($secret)$/;"	f
secret	vendor\opis\closure\src\SecurityProvider.php	/^        $this->secret = $secret;$/;"	v
secret	vendor\opis\closure\src\SecurityProvider.php	/^    protected $secret;$/;"	v
sign	vendor\opis\closure\src\SecurityProvider.php	/^    public function sign($closure)$/;"	f
verify	vendor\opis\closure\src\SecurityProvider.php	/^    public function verify(array $data)$/;"	f
SelfReference	vendor\opis\closure\src\SelfReference.php	/^class SelfReference$/;"	c
__construct	vendor\opis\closure\src\SelfReference.php	/^    public function __construct($hash)$/;"	f
hash	vendor\opis\closure\src\SelfReference.php	/^        $this->hash = $hash;$/;"	v
hash	vendor\opis\closure\src\SelfReference.php	/^    public $hash;$/;"	v
used	vendor\opis\closure\src\SelfReference.php	/^ * Helper class used to indicate a reference to an object$/;"	c
SerializableClosure	vendor\opis\closure\src\SerializableClosure.php	/^class SerializableClosure implements Serializable$/;"	c
__construct	vendor\opis\closure\src\SerializableClosure.php	/^    public function __construct(Closure $closure)$/;"	f
__invoke	vendor\opis\closure\src\SerializableClosure.php	/^    public function __invoke()$/;"	f
addSecurityProvider	vendor\opis\closure\src\SerializableClosure.php	/^    public static function addSecurityProvider(ISecurityProvider $securityProvider)$/;"	f
closure	vendor\opis\closure\src\SerializableClosure.php	/^                $closure = substr($data, $separator + 1);$/;"	v
closure	vendor\opis\closure\src\SerializableClosure.php	/^            $this->closure = $this->closure->bindTo($this->code['this'], $this->code['scope']);$/;"	v
closure	vendor\opis\closure\src\SerializableClosure.php	/^        $this->closure = $closure;$/;"	v
closure	vendor\opis\closure\src\SerializableClosure.php	/^        $this->closure = include(ClosureStream::STREAM_PROTO . ':\/\/' . $this->code['function']);$/;"	v
closure	vendor\opis\closure\src\SerializableClosure.php	/^    protected $closure;$/;"	v
code	vendor\opis\closure\src\SerializableClosure.php	/^            $this->code = null;$/;"	v
code	vendor\opis\closure\src\SerializableClosure.php	/^        $code = $reflector->getCode();$/;"	v
code	vendor\opis\closure\src\SerializableClosure.php	/^        $this->code = $this->code['function'];$/;"	v
code	vendor\opis\closure\src\SerializableClosure.php	/^        $this->code = \\unserialize($data);$/;"	v
code	vendor\opis\closure\src\SerializableClosure.php	/^    protected $code;$/;"	v
context	vendor\opis\closure\src\SerializableClosure.php	/^    protected static $context;$/;"	v
createClosure	vendor\opis\closure\src\SerializableClosure.php	/^    public static function createClosure($args, $code)$/;"	f
data	vendor\opis\closure\src\SerializableClosure.php	/^                $data = $storage[$data];$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^                $data = $this->scope[$data];$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^                $data = ['hash' => $hash, 'closure' => $closure];$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^                $data = json_decode(substr($data, 1), true);$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^                $data = new SelfReference($this->reference);$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = $data->getClosure();$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = $data['closure'];$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = $storage[$data] = clone($data);$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = $this->scope[$data] = $instance;$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = &$data->closure;$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = static::$securityProvider->sign($ret);$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $data = static::from($data);$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $storage[$instance] = $data = $reflection->newInstanceWithoutConstructor();$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $this->scope[$instance] = $data = $reflection->newInstanceWithoutConstructor();$/;"	v
data	vendor\opis\closure\src\SerializableClosure.php	/^            $this->scope[$instance] = $data = clone($data);$/;"	v
enterContext	vendor\opis\closure\src\SerializableClosure.php	/^    public static function enterContext()$/;"	f
exitContext	vendor\opis\closure\src\SerializableClosure.php	/^    public static function exitContext()$/;"	f
from	vendor\opis\closure\src\SerializableClosure.php	/^    public static function from(Closure $closure)$/;"	f
getClosure	vendor\opis\closure\src\SerializableClosure.php	/^    public function getClosure()$/;"	f
getReflector	vendor\opis\closure\src\SerializableClosure.php	/^    public function getReflector()$/;"	f
getSecurityProvider	vendor\opis\closure\src\SerializableClosure.php	/^    public static function getSecurityProvider()$/;"	f
hash	vendor\opis\closure\src\SerializableClosure.php	/^                $hash = substr($data, 1, $separator - 1);$/;"	v
instance	vendor\opis\closure\src\SerializableClosure.php	/^            $instance = $data;$/;"	v
instance	vendor\opis\closure\src\SerializableClosure.php	/^            $instance = new static($closure);$/;"	v
instance	vendor\opis\closure\src\SerializableClosure.php	/^            $instance = new static($data);$/;"	v
instance	vendor\opis\closure\src\SerializableClosure.php	/^            $instance = static::$context->scope[$closure];$/;"	v
item	vendor\opis\closure\src\SerializableClosure.php	/^                    $item = $property->getValue($data);$/;"	v
key	vendor\opis\closure\src\SerializableClosure.php	/^            foreach ($data as $key => &$value){$/;"	v
mapByReference	vendor\opis\closure\src\SerializableClosure.php	/^    protected function mapByReference(&$data)$/;"	f
mapPointers	vendor\opis\closure\src\SerializableClosure.php	/^    protected function mapPointers(&$data)$/;"	f
object	vendor\opis\closure\src\SerializableClosure.php	/^            $object = $reflector->getClosureThis();$/;"	v
reference	vendor\opis\closure\src\SerializableClosure.php	/^        $this->reference = spl_object_hash($this->closure);$/;"	v
reference	vendor\opis\closure\src\SerializableClosure.php	/^    protected $reference;$/;"	v
reflection	vendor\opis\closure\src\SerializableClosure.php	/^            $reflection = new ReflectionObject($data);$/;"	v
reflection	vendor\opis\closure\src\SerializableClosure.php	/^            $reflection = new ReflectionObject($instance);$/;"	v
reflector	vendor\opis\closure\src\SerializableClosure.php	/^            $this->reflector = new ReflectionClosure($this->closure, $this->code);$/;"	v
reflector	vendor\opis\closure\src\SerializableClosure.php	/^        $reflector = $this->getReflector();$/;"	v
reflector	vendor\opis\closure\src\SerializableClosure.php	/^    protected $reflector;$/;"	v
removeSecurityProvider	vendor\opis\closure\src\SerializableClosure.php	/^    public static function removeSecurityProvider()$/;"	f
resolveUseVariables	vendor\opis\closure\src\SerializableClosure.php	/^    protected function resolveUseVariables($data)$/;"	f
ret	vendor\opis\closure\src\SerializableClosure.php	/^            $ret =  '@' . $data['hash'] . '.' . $data['closure'];$/;"	v
ret	vendor\opis\closure\src\SerializableClosure.php	/^        $ret = \\serialize(array($/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^                $scope = $scope->name;$/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^            $this->scope = new ClosureScope();$/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^            $this->scope = null;$/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^            $this->scope = static::$context->scope;$/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^        $scope = $object = null;$/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^        $scope = $this->scope;$/;"	v
scope	vendor\opis\closure\src\SerializableClosure.php	/^    protected $scope;$/;"	v
securityProvider	vendor\opis\closure\src\SerializableClosure.php	/^    protected static $securityProvider;$/;"	v
separator	vendor\opis\closure\src\SerializableClosure.php	/^                $separator = strpos($data, '.');$/;"	v
serialize	vendor\opis\closure\src\SerializableClosure.php	/^    public function serialize()$/;"	f
setSecretKey	vendor\opis\closure\src\SerializableClosure.php	/^    public static function setSecretKey($secret)$/;"	f
storage	vendor\opis\closure\src\SerializableClosure.php	/^            $storage = static::$context->scope;$/;"	v
storage	vendor\opis\closure\src\SerializableClosure.php	/^    public static function unwrapClosures(&$data, SplObjectStorage $storage = null)$/;"	v
storage	vendor\opis\closure\src\SerializableClosure.php	/^    public static function wrapClosures(&$data, SplObjectStorage $storage = null)$/;"	v
transformUseVariables	vendor\opis\closure\src\SerializableClosure.php	/^    protected function transformUseVariables($data)$/;"	f
unserialize	vendor\opis\closure\src\SerializableClosure.php	/^    public function unserialize($data)$/;"	f
unwrapClosures	vendor\opis\closure\src\SerializableClosure.php	/^    public static function unwrapClosures(&$data, SplObjectStorage $storage = null)$/;"	f
use	vendor\opis\closure\src\SerializableClosure.php	/^        $use = $this->transformUseVariables($reflector->getUseVariables());$/;"	v
value	vendor\opis\closure\src\SerializableClosure.php	/^                    $value = $property->getValue($data);$/;"	v
value	vendor\opis\closure\src\SerializableClosure.php	/^                    $value = $property->getValue($instance);$/;"	v
wrapClosures	vendor\opis\closure\src\SerializableClosure.php	/^    public static function wrapClosures(&$data, SplObjectStorage $storage = null)$/;"	f
CacheException	vendor\psr\cache\src\CacheException.php	/^interface CacheException$/;"	i
for	vendor\psr\cache\src\CacheException.php	/^ * Exception interface for all exceptions thrown by an Implementing Library.$/;"	i
CacheItemInterface	vendor\psr\cache\src\CacheItemInterface.php	/^interface CacheItemInterface$/;"	i
expiresAfter	vendor\psr\cache\src\CacheItemInterface.php	/^    public function expiresAfter($time);$/;"	f
expiresAt	vendor\psr\cache\src\CacheItemInterface.php	/^    public function expiresAt($expiration);$/;"	f
for	vendor\psr\cache\src\CacheItemInterface.php	/^ * CacheItemInterface defines an interface for interacting with objects inside a cache.$/;"	i
get	vendor\psr\cache\src\CacheItemInterface.php	/^    public function get();$/;"	f
getKey	vendor\psr\cache\src\CacheItemInterface.php	/^    public function getKey();$/;"	f
isHit	vendor\psr\cache\src\CacheItemInterface.php	/^    public function isHit();$/;"	f
set	vendor\psr\cache\src\CacheItemInterface.php	/^    public function set($value);$/;"	f
CacheItemPoolInterface	vendor\psr\cache\src\CacheItemPoolInterface.php	/^interface CacheItemPoolInterface$/;"	i
clear	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function clear();$/;"	f
commit	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function commit();$/;"	f
deleteItem	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function deleteItem($key);$/;"	f
deleteItems	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function deleteItems(array $keys);$/;"	f
getItem	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function getItem($key);$/;"	f
getItems	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function getItems(array $keys = array());$/;"	f
hasItem	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function hasItem($key);$/;"	f
keys	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function getItems(array $keys = array());$/;"	v
save	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function save(CacheItemInterface $item);$/;"	f
saveDeferred	vendor\psr\cache\src\CacheItemPoolInterface.php	/^    public function saveDeferred(CacheItemInterface $item);$/;"	f
InvalidArgumentException	vendor\psr\cache\src\InvalidArgumentException.php	/^interface InvalidArgumentException extends CacheException$/;"	i
for	vendor\psr\cache\src\InvalidArgumentException.php	/^ * Exception interface for invalid cache arguments.$/;"	i
which	vendor\psr\cache\src\InvalidArgumentException.php	/^ * exception class which implements Psr\\Cache\\InvalidArgumentException.$/;"	c
ContainerExceptionInterface	vendor\psr\container\src\ContainerExceptionInterface.php	/^interface ContainerExceptionInterface$/;"	i
representing	vendor\psr\container\src\ContainerExceptionInterface.php	/^ * Base interface representing a generic exception in a container.$/;"	i
ContainerInterface	vendor\psr\container\src\ContainerInterface.php	/^interface ContainerInterface$/;"	i
get	vendor\psr\container\src\ContainerInterface.php	/^    public function get($id);$/;"	f
has	vendor\psr\container\src\ContainerInterface.php	/^    public function has($id);$/;"	f
of	vendor\psr\container\src\ContainerInterface.php	/^ * Describes the interface of a container that exposes methods to read its entries.$/;"	i
NotFoundExceptionInterface	vendor\psr\container\src\NotFoundExceptionInterface.php	/^interface NotFoundExceptionInterface extends ContainerExceptionInterface$/;"	i
AbstractLogger	vendor\psr\log\Psr\Log\AbstractLogger.php	/^abstract class AbstractLogger implements LoggerInterface$/;"	c
alert	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function alert($message, array $context = array())$/;"	f
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function alert($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function critical($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function debug($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function emergency($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function error($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function info($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function notice($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function warning($message, array $context = array())$/;"	v
critical	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function critical($message, array $context = array())$/;"	f
debug	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function debug($message, array $context = array())$/;"	f
emergency	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function emergency($message, array $context = array())$/;"	f
error	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function error($message, array $context = array())$/;"	f
info	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function info($message, array $context = array())$/;"	f
notice	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function notice($message, array $context = array())$/;"	f
warning	vendor\psr\log\Psr\Log\AbstractLogger.php	/^    public function warning($message, array $context = array())$/;"	f
InvalidArgumentException	vendor\psr\log\Psr\Log\InvalidArgumentException.php	/^class InvalidArgumentException extends \\InvalidArgumentException$/;"	c
LogLevel	vendor\psr\log\Psr\Log\LogLevel.php	/^class LogLevel$/;"	c
LoggerAwareInterface	vendor\psr\log\Psr\Log\LoggerAwareInterface.php	/^interface LoggerAwareInterface$/;"	i
setLogger	vendor\psr\log\Psr\Log\LoggerAwareInterface.php	/^    public function setLogger(LoggerInterface $logger);$/;"	f
logger	vendor\psr\log\Psr\Log\LoggerAwareTrait.php	/^        $this->logger = $logger;$/;"	v
logger	vendor\psr\log\Psr\Log\LoggerAwareTrait.php	/^    protected $logger;$/;"	v
setLogger	vendor\psr\log\Psr\Log\LoggerAwareTrait.php	/^    public function setLogger(LoggerInterface $logger)$/;"	f
LoggerInterface	vendor\psr\log\Psr\Log\LoggerInterface.php	/^interface LoggerInterface$/;"	i
alert	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function alert($message, array $context = array());$/;"	f
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function alert($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function critical($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function debug($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function emergency($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function error($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function info($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function log($level, $message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function notice($message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function warning($message, array $context = array());$/;"	v
critical	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function critical($message, array $context = array());$/;"	f
debug	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function debug($message, array $context = array());$/;"	f
emergency	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function emergency($message, array $context = array());$/;"	f
error	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function error($message, array $context = array());$/;"	f
info	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function info($message, array $context = array());$/;"	f
log	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function log($level, $message, array $context = array());$/;"	f
notice	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function notice($message, array $context = array());$/;"	f
specification	vendor\psr\log\Psr\Log\LoggerInterface.php	/^ * for the full interface specification.$/;"	i
warning	vendor\psr\log\Psr\Log\LoggerInterface.php	/^    public function warning($message, array $context = array());$/;"	f
alert	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function alert($message, array $context = array())$/;"	f
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    abstract public function log($level, $message, array $context = array());$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function alert($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function critical($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function debug($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function emergency($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function error($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function info($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function notice($message, array $context = array())$/;"	v
context	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function warning($message, array $context = array())$/;"	v
critical	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function critical($message, array $context = array())$/;"	f
debug	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function debug($message, array $context = array())$/;"	f
emergency	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function emergency($message, array $context = array())$/;"	f
error	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function error($message, array $context = array())$/;"	f
info	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function info($message, array $context = array())$/;"	f
log	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    abstract public function log($level, $message, array $context = array());$/;"	f
notice	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function notice($message, array $context = array())$/;"	f
warning	vendor\psr\log\Psr\Log\LoggerTrait.php	/^    public function warning($message, array $context = array())$/;"	f
NullLogger	vendor\psr\log\Psr\Log\NullLogger.php	/^class NullLogger extends AbstractLogger$/;"	c
context	vendor\psr\log\Psr\Log\NullLogger.php	/^    public function log($level, $message, array $context = array())$/;"	v
log	vendor\psr\log\Psr\Log\NullLogger.php	/^    public function log($level, $message, array $context = array())$/;"	f
DummyTest	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^class DummyTest$/;"	c
LoggerInterfaceTest	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^abstract class LoggerInterfaceTest extends TestCase$/;"	c
__toString	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function __toString()$/;"	f
and	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^ * Implementors can extend the class and implement abstract methods to run this$/;"	c
closed	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $closed = fopen('php:\/\/memory', 'r');$/;"	v
context	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $context = array($/;"	v
dummy	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^            $dummy = $this->createPartialMock('Psr\\Log\\Test\\DummyTest', array('__toString'));$/;"	v
dummy	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^            $dummy = $this->getMock('Psr\\Log\\Test\\DummyTest', array('__toString'));$/;"	v
expected	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $expected = array($/;"	v
expected	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $expected = array('info {Message {nothing} Bob Bar a}');$/;"	v
expected	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $expected = array('warning Crazy context data');$/;"	v
expected	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $expected = array('warning DUMMY');$/;"	v
for	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^ * Provides a base test class for ensuring compliance with the LoggerInterface.$/;"	c
getLogger	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    abstract public function getLogger();$/;"	f
getLogs	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    abstract public function getLogs();$/;"	f
logger	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^        $logger = $this->getLogger();$/;"	v
provideLevelsAndMessages	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function provideLevelsAndMessages()$/;"	f
testContextCanContainAnything	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testContextCanContainAnything()$/;"	f
testContextExceptionKeyCanBeExceptionOrOtherValues	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testContextExceptionKeyCanBeExceptionOrOtherValues()$/;"	f
testContextReplacement	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testContextReplacement()$/;"	f
testImplements	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testImplements()$/;"	f
testLogsAtAllLevels	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testLogsAtAllLevels($level, $message)$/;"	f
testObjectCastToString	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testObjectCastToString()$/;"	f
testThrowsOnInvalidLevel	vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php	/^    public function testThrowsOnInvalidLevel()$/;"	f
TestLogger	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^class TestLogger extends AbstractLogger$/;"	c
__call	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function __call($method, $args)$/;"	f
context	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function log($level, $message, array $context = [])$/;"	v
genericMethod	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^            $genericMethod = $matches[1] . ('Records' !== $matches[3] ? 'Record' : '') . $matches[3];$/;"	v
hasRecord	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function hasRecord($record, $level)$/;"	f
hasRecordThatContains	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function hasRecordThatContains($message, $level)$/;"	f
hasRecordThatMatches	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function hasRecordThatMatches($regex, $level)$/;"	f
hasRecordThatPasses	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function hasRecordThatPasses(callable $predicate, $level)$/;"	f
hasRecords	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function hasRecords($level)$/;"	f
i	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^        foreach ($this->recordsByLevel[$level] as $i => $rec) {$/;"	v
level	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^            $level = strtolower($matches[2]);$/;"	v
log	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function log($level, $message, array $context = [])$/;"	f
record	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^            $record = ['message' => $record];$/;"	v
record	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^        $record = [$/;"	v
records	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^        $this->records = [];$/;"	v
records	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public $records = [];$/;"	v
recordsByLevel	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^        $this->recordsByLevel = [];$/;"	v
recordsByLevel	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public $recordsByLevel = [];$/;"	v
reset	vendor\psr\log\Psr\Log\Test\TestLogger.php	/^    public function reset()$/;"	f
CacheException	vendor\psr\simple-cache\src\CacheException.php	/^interface CacheException$/;"	i
CacheInterface	vendor\psr\simple-cache\src\CacheInterface.php	/^interface CacheInterface$/;"	i
clear	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function clear();$/;"	f
default	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function get($key, $default = null);$/;"	v
default	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function getMultiple($keys, $default = null);$/;"	v
delete	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function delete($key);$/;"	f
deleteMultiple	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function deleteMultiple($keys);$/;"	f
get	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function get($key, $default = null);$/;"	f
getMultiple	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function getMultiple($keys, $default = null);$/;"	f
has	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function has($key);$/;"	f
set	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function set($key, $value, $ttl = null);$/;"	f
setMultiple	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function setMultiple($values, $ttl = null);$/;"	f
ttl	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function set($key, $value, $ttl = null);$/;"	v
ttl	vendor\psr\simple-cache\src\CacheInterface.php	/^    public function setMultiple($values, $ttl = null);$/;"	v
InvalidArgumentException	vendor\psr\simple-cache\src\InvalidArgumentException.php	/^interface InvalidArgumentException extends CacheException$/;"	i
for	vendor\psr\simple-cache\src\InvalidArgumentException.php	/^ * Exception interface for invalid cache arguments.$/;"	i
Mbstring	vendor\symfony\polyfill-mbstring\Mbstring.php	/^final class Mbstring$/;"	c
c	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $c = (($m[$i++] - 0xC0) << 6) + $m[$i++] - 0x80;$/;"	v
c	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $c = (($m[$i++] - 0xE0) << 12) + (($m[$i++] - 0x80) << 6) + $m[$i++] - 0x80;$/;"	v
c	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $c = (($m[$i++] - 0xF0) << 18) + (($m[$i++] - 0x80) << 12) + (($m[$i++] - 0x80) << 6) + $m[$i++] - 0x80;$/;"	v
c	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $c = isset($m[2]) ? (int) hexdec($m[2]) : $m[1];$/;"	v
c	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $c = self::mb_ord($uchr);$/;"	v
cOffset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $cOffset = ($c + $convmap[$j + 2]) & $convmap[$j + 3];$/;"	v
caseFold	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static $caseFold = array($/;"	v
charset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_encode_mimeheader($s, $charset = null, $transferEncoding = null, $linefeed = null, $indent = null)$/;"	v
cnt	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $cnt = floor(\\count($convmap) \/ 4) * 4;$/;"	v
code	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $code = ($s = unpack('C*', substr($s, 0, 4))) ? $s[1] : 0;$/;"	v
converts	vendor\symfony\polyfill-mbstring\Mbstring.php	/^ * - mb_output_handler       - Callback function converts character encoding in output buffer$/;"	f
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $encoding = mb_internal_encoding();$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $encoding = null;$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $encoding = self::$internalEncoding;$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $encoding = self::getEncoding($encoding);$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $encoding = strtoupper($encoding);$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        if ('UTF-8' !== $encoding = self::getEncoding($encoding)) {$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        if ('UTF-8' === $encoding = self::getEncoding($encoding)) {$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_check_encoding($var = null, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_chr($code, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_convert_case($s, $mode, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_decode_numericentity($s, $convmap, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_encode_numericentity($s, $convmap, $encoding = null, $is_hex = false)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_ord($s, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strlen($s, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strtolower($s, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strtoupper($s, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strwidth($s, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_substr_count($haystack, $needle, $encoding = null)$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $encodingList = array_map('trim', explode(',', $encodingList));$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $encodingList = array_map('strtoupper', $encodingList);$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $encodingList = array_map('trim', explode(',', $encodingList));$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $encodingList = self::$encodingList;$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $encodingList = array_map('strtoupper', $encodingList);$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static $encodingList = array('ASCII', 'UTF-8');$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_detect_encoding($str, $encodingList = null, $strict = false)$/;"	v
entities	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $entities = '';$/;"	v
fromEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $fromEncoding = 'Windows-1252';$/;"	v
fromEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $fromEncoding = $toEncoding;$/;"	v
fromEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $fromEncoding = 'UTF-8';$/;"	v
fromEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $fromEncoding = self::getEncoding($fromEncoding);$/;"	v
fromEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $fromEncoding = self::mb_detect_encoding($s, $fromEncoding);$/;"	v
fromEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_convert_encoding($s, $toEncoding, $fromEncoding = null)$/;"	v
getData	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static function getData($file)$/;"	f
getEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static function getEncoding($encoding)$/;"	f
getSubpart	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static function getSubpart($pos, $part, $haystack, $encoding)$/;"	f
haystack	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $haystack = self::mb_substr($haystack, 0, $offset, $encoding);$/;"	v
haystack	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $haystack = self::mb_substr($haystack, $offset, 2147483647, $encoding);$/;"	v
haystack	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $haystack = self::mb_convert_case($haystack, self::MB_CASE_FOLD, $encoding);$/;"	v
html_encoding_callback	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static function html_encoding_callback(array $m)$/;"	f
i	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $i = 0;$/;"	v
i	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $i = 0;$/;"	v
i	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $i = 1;$/;"	v
info	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $info = array($/;"	v
internalEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static $internalEncoding = 'UTF-8';$/;"	v
language	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static $language = 'neutral';$/;"	v
len	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $len = \\strlen($s);$/;"	v
len	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $len = \\strlen($s);$/;"	v
length	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $length = 2147483647;$/;"	v
length	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $length = iconv_strlen($s, $encoding) + $length - $start;$/;"	v
length	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $length = mb_strlen($string, $encoding);$/;"	v
length	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_substr($s, $start, $length = null, $encoding = null)$/;"	v
lower	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $lower = self::getData('lowerCase');$/;"	v
lower	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                static $lower = null;$/;"	v
m	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $m = unpack('C*', htmlentities($m[0], ENT_COMPAT, 'UTF-8'));$/;"	v
map	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $map = $lower;$/;"	v
map	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $map = $upper;$/;"	v
mb_check_encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_check_encoding($var = null, $encoding = null)$/;"	f
mb_chr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_chr($code, $encoding = null)$/;"	f
mb_convert_case	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_convert_case($s, $mode, $encoding = null)$/;"	f
mb_convert_encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_convert_encoding($s, $toEncoding, $fromEncoding = null)$/;"	f
mb_convert_variables	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_convert_variables($toEncoding, $fromEncoding, &$a = null, &$b = null, &$c = null, &$d = null, &$e = null, &$f = null)$/;"	f
mb_decode_mimeheader	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_decode_mimeheader($s)$/;"	f
mb_decode_numericentity	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_decode_numericentity($s, $convmap, $encoding = null)$/;"	f
mb_detect_encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_detect_encoding($str, $encodingList = null, $strict = false)$/;"	f
mb_detect_order	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_detect_order($encodingList = null)$/;"	f
mb_encode_mimeheader	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_encode_mimeheader($s, $charset = null, $transferEncoding = null, $linefeed = null, $indent = null)$/;"	f
mb_encode_numericentity	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_encode_numericentity($s, $convmap, $encoding = null, $is_hex = false)$/;"	f
mb_encoding_aliases	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_encoding_aliases($encoding)$/;"	f
mb_get_info	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_get_info($type = 'all')$/;"	f
mb_http_input	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_http_input($type = '')$/;"	f
mb_http_output	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_http_output($encoding = null)$/;"	f
mb_internal_encoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_internal_encoding($encoding = null)$/;"	f
mb_language	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_language($lang = null)$/;"	f
mb_list_encodings	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_list_encodings()$/;"	f
mb_ord	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_ord($s, $encoding = null)$/;"	f
mb_output_handler	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_output_handler($contents, $status)$/;"	f
mb_str_split	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_str_split($string, $split_length = 1, $encoding = null)$/;"	f
mb_stripos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_stripos($haystack, $needle, $offset = 0, $encoding = null)$/;"	f
mb_stristr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_stristr($haystack, $needle, $part = false, $encoding = null)$/;"	f
mb_strlen	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strlen($s, $encoding = null)$/;"	f
mb_strpos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strpos($haystack, $needle, $offset = 0, $encoding = null)$/;"	f
mb_strrchr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strrchr($haystack, $needle, $part = false, $encoding = null)$/;"	f
mb_strrichr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strrichr($haystack, $needle, $part = false, $encoding = null)$/;"	f
mb_strripos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strripos($haystack, $needle, $offset = 0, $encoding = null)$/;"	f
mb_strrpos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null)$/;"	f
mb_strstr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strstr($haystack, $needle, $part = false, $encoding = null)$/;"	f
mb_strtolower	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strtolower($s, $encoding = null)$/;"	f
mb_strtoupper	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strtoupper($s, $encoding = null)$/;"	f
mb_strwidth	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strwidth($s, $encoding = null)$/;"	f
mb_substitute_character	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_substitute_character($c = null)$/;"	f
mb_substr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_substr($s, $start, $length = null, $encoding = null)$/;"	f
mb_substr_count	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_substr_count($haystack, $needle, $encoding = null)$/;"	f
needle	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $needle = (string) $needle;$/;"	v
needle	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $needle = self::mb_convert_case($needle, self::MB_CASE_FOLD, $encoding);$/;"	v
needle	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $needle = self::mb_substr($needle, 0, 1, $encoding);$/;"	v
nlen	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                        $nlen = $i;$/;"	v
nlen	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $nlen = \\strlen($uchr);$/;"	v
offset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $offset = 0;$/;"	v
offset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $offset = 0;$/;"	v
offset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_stripos($haystack, $needle, $offset = 0, $encoding = null)$/;"	v
offset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strpos($haystack, $needle, $offset = 0, $encoding = null)$/;"	v
offset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strripos($haystack, $needle, $offset = 0, $encoding = null)$/;"	v
offset	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null)$/;"	v
ok	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $ok = false;$/;"	v
ok	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $ok = true;$/;"	v
part	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_stristr($haystack, $needle, $part = false, $encoding = null)$/;"	v
part	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strrchr($haystack, $needle, $part = false, $encoding = null)$/;"	v
part	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strrichr($haystack, $needle, $part = false, $encoding = null)$/;"	v
part	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_strstr($haystack, $needle, $part = false, $encoding = null)$/;"	v
pos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $pos = iconv_strrpos($haystack, $needle, $encoding);$/;"	v
pos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $pos = self::mb_stripos($haystack, $needle, 0, $encoding);$/;"	v
pos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $pos = self::mb_strripos($haystack, $needle, $encoding);$/;"	v
pos	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $pos = strpos($haystack, $needle);$/;"	v
result	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $result = '';$/;"	v
result	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $result = array();$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                        $s = substr_replace($s, $uchr, $i - $ulen, $ulen);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $s = str_replace(self::$caseFold[0], self::$caseFold[1], $s);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $s = @iconv('UTF-8', 'UTF-8\/\/IGNORE', $s);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $s = iconv($fromEncoding, 'UTF-8\/\/IGNORE', $s);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = \\chr($code);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = \\chr(0xC0 | $code >> 6).\\chr(0x80 | $code & 0x3F);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = \\chr(0xE0 | $code >> 12).\\chr(0x80 | $code >> 6 & 0x3F).\\chr(0x80 | $code & 0x3F);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = \\chr(0xF0 | $code >> 18).\\chr(0x80 | $code >> 12 & 0x3F).\\chr(0x80 | $code >> 6 & 0x3F).\\chr(0x80 | $code & 0x3F);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = base64_decode($s);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = html_entity_decode($s, ENT_COMPAT, 'UTF-8');$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = iconv($encoding, 'UTF-8\/\/IGNORE', $s);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = mb_convert_encoding($s, $encoding, 'UTF-8');$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = mb_convert_encoding($s, 'UTF-8', $encoding);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $s = preg_replace_callback($titleRegexp, array(__CLASS__, 'title_case'), $s);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $s = (string) $s;$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $s = preg_replace('\/[\\x{1100}-\\x{115F}\\x{2329}\\x{232A}\\x{2E80}-\\x{303E}\\x{3040}-\\x{A4CF}\\x{AC00}-\\x{D7A3}\\x{F900}-\\x{FAFF}\\x{FE10}-\\x{FE19}\\x{FE30}-\\x{FE6F}\\x{FF00}-\\x{FF60}\\x{FFE0}-\\x{FFE6}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}]\/u', '', $s, -1, $wide);$/;"	v
s	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $s = preg_replace_callback('\/&#(?:0*([0-9]+)|x0*([0-9a-fA-F]+))(?!&);?\/', function (array $m) use ($cnt, $convmap) {$/;"	v
split_length	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        if (1 > $split_length = (int) $split_length) {$/;"	v
split_length	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    public static function mb_str_split($string, $split_length = 1, $encoding = null)$/;"	v
start	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $start = 0;$/;"	v
start	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $start = iconv_strlen($s, $encoding) + $start;$/;"	v
titleRegexp	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $titleRegexp = self::getData('titleCaseRegexp');$/;"	v
titleRegexp	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            static $titleRegexp = null;$/;"	v
title_case	vendor\symfony\polyfill-mbstring\Mbstring.php	/^    private static function title_case(array $s)$/;"	f
toEncoding	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $toEncoding = self::getEncoding($toEncoding);$/;"	v
uchr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $uchr = $map[$uchr];$/;"	v
uchr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $uchr = substr($s, $i, $ulen);$/;"	v
uchr	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $uchr = substr($s, $i, $ulen);$/;"	v
ulen	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                $ulen = $s[$i] < "\\x80" ? 1 : $ulenMask[$s[$i] & "\\xF0"];$/;"	v
ulen	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            $ulen = $s[$i] < "\\x80" ? 1 : $ulenMask[$s[$i] & "\\xF0"];$/;"	v
ulenMask	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            static $ulenMask = array("\\xC0" => 2, "\\xD0" => 2, "\\xE0" => 3, "\\xF0" => 4);$/;"	v
ulenMask	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        static $ulenMask = array("\\xC0" => 2, "\\xD0" => 2, "\\xE0" => 3, "\\xF0" => 4);$/;"	v
upper	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                    $upper = self::getData('upperCase');$/;"	v
upper	vendor\symfony\polyfill-mbstring\Mbstring.php	/^                static $upper = null;$/;"	v
v	vendor\symfony\polyfill-mbstring\Mbstring.php	/^            if (false === $v = Mbstring::mb_convert_encoding($v, $toEncoding, $fromEncoding)) {$/;"	v
vars	vendor\symfony\polyfill-mbstring\Mbstring.php	/^        $vars = array(&$a, &$b, &$c, &$d, &$e, &$f);$/;"	v
MB_CASE_LOWER	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    define('MB_CASE_LOWER', 1);$/;"	d
MB_CASE_TITLE	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    define('MB_CASE_TITLE', 2);$/;"	d
MB_CASE_UPPER	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    define('MB_CASE_UPPER', 0);$/;"	d
charset	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_encode_mimeheader($s, $charset = null, $transferEnc = null, $lf = null, $indent = null) { return p\\Mbstring::mb_encode_mimeheader($s, $charset, $transferEnc, $lf, $indent); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_chr($code, $enc = null) { return p\\Mbstring::mb_chr($code, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_convert_case($s, $mode, $enc = null) { return p\\Mbstring::mb_convert_case($s, $mode, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_decode_numericentity($s, $convmap, $enc = null) { return p\\Mbstring::mb_decode_numericentity($s, $convmap, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_encode_numericentity($s, $convmap, $enc = null, $is_hex = false) { return p\\Mbstring::mb_encode_numericentity($s, $convmap, $enc, $is_hex); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_ord($s, $enc = null) { return p\\Mbstring::mb_ord($s, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_scrub($s, $enc = null) { $enc = null === $enc ? mb_internal_encoding() : $enc; return mb_convert_encoding($s, $enc, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strlen($s, $enc = null) { return p\\Mbstring::mb_strlen($s, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strtolower($s, $enc = null) { return p\\Mbstring::mb_strtolower($s, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strtoupper($s, $enc = null) { return p\\Mbstring::mb_strtoupper($s, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strwidth($s, $enc = null) { return p\\Mbstring::mb_strwidth($s, $enc); }$/;"	v
enc	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_substr_count($haystack, $needle, $enc = null) { return p\\Mbstring::mb_substr_count($haystack, $needle, $enc); }$/;"	v
encoding	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_check_encoding($var = null, $encoding = null) { return p\\Mbstring::mb_check_encoding($var, $encoding); }$/;"	v
encodingList	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_detect_encoding($str, $encodingList = null, $strict = false) { return p\\Mbstring::mb_detect_encoding($str, $encodingList, $strict); }$/;"	v
from	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_convert_encoding($s, $to, $from = null) { return p\\Mbstring::mb_convert_encoding($s, $to, $from); }$/;"	v
length	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_substr($s, $start, $length = 2147483647, $enc = null) { return p\\Mbstring::mb_substr($s, $start, $length, $enc); }$/;"	v
mb_check_encoding	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_check_encoding($var = null, $encoding = null) { return p\\Mbstring::mb_check_encoding($var, $encoding); }$/;"	f
mb_chr	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_chr($code, $enc = null) { return p\\Mbstring::mb_chr($code, $enc); }$/;"	f
mb_convert_case	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_convert_case($s, $mode, $enc = null) { return p\\Mbstring::mb_convert_case($s, $mode, $enc); }$/;"	f
mb_convert_encoding	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_convert_encoding($s, $to, $from = null) { return p\\Mbstring::mb_convert_encoding($s, $to, $from); }$/;"	f
mb_convert_variables	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_convert_variables($toEncoding, $fromEncoding, &$a = null, &$b = null, &$c = null, &$d = null, &$e = null, &$f = null) { return p\\Mbstring::mb_convert_variables($toEncoding, $fromEncoding, $a, $b, $c, $d, $e, $f); }$/;"	f
mb_decode_mimeheader	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_decode_mimeheader($s) { return p\\Mbstring::mb_decode_mimeheader($s); }$/;"	f
mb_decode_numericentity	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_decode_numericentity($s, $convmap, $enc = null) { return p\\Mbstring::mb_decode_numericentity($s, $convmap, $enc); }$/;"	f
mb_detect_encoding	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_detect_encoding($str, $encodingList = null, $strict = false) { return p\\Mbstring::mb_detect_encoding($str, $encodingList, $strict); }$/;"	f
mb_detect_order	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_detect_order($encodingList = null) { return p\\Mbstring::mb_detect_order($encodingList); }$/;"	f
mb_encode_mimeheader	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_encode_mimeheader($s, $charset = null, $transferEnc = null, $lf = null, $indent = null) { return p\\Mbstring::mb_encode_mimeheader($s, $charset, $transferEnc, $lf, $indent); }$/;"	f
mb_encode_numericentity	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_encode_numericentity($s, $convmap, $enc = null, $is_hex = false) { return p\\Mbstring::mb_encode_numericentity($s, $convmap, $enc, $is_hex); }$/;"	f
mb_encoding_aliases	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_encoding_aliases($encoding) { return p\\Mbstring::mb_encoding_aliases($encoding); }$/;"	f
mb_get_info	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_get_info($type = 'all') { return p\\Mbstring::mb_get_info($type); }$/;"	f
mb_http_input	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_http_input($type = '') { return p\\Mbstring::mb_http_input($type); }$/;"	f
mb_http_output	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_http_output($enc = null) { return p\\Mbstring::mb_http_output($enc); }$/;"	f
mb_internal_encoding	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_internal_encoding($enc = null) { return p\\Mbstring::mb_internal_encoding($enc); }$/;"	f
mb_language	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_language($lang = null) { return p\\Mbstring::mb_language($lang); }$/;"	f
mb_list_encodings	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_list_encodings() { return p\\Mbstring::mb_list_encodings(); }$/;"	f
mb_ord	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_ord($s, $enc = null) { return p\\Mbstring::mb_ord($s, $enc); }$/;"	f
mb_output_handler	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_output_handler($contents, $status) { return p\\Mbstring::mb_output_handler($contents, $status); }$/;"	f
mb_parse_str	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_parse_str($s, &$result = array()) { parse_str($s, $result); }$/;"	f
mb_scrub	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_scrub($s, $enc = null) { $enc = null === $enc ? mb_internal_encoding() : $enc; return mb_convert_encoding($s, $enc, $enc); }$/;"	f
mb_str_split	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_str_split($string, $split_length = 1, $encoding = null) { return p\\Mbstring::mb_str_split($string, $split_length, $encoding); }$/;"	f
mb_stripos	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_stripos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_stripos($s, $needle, $offset, $enc); }$/;"	f
mb_stristr	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_stristr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_stristr($s, $needle, $part, $enc); }$/;"	f
mb_strlen	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strlen($s, $enc = null) { return p\\Mbstring::mb_strlen($s, $enc); }$/;"	f
mb_strpos	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strpos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_strpos($s, $needle, $offset, $enc); }$/;"	f
mb_strrchr	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strrchr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_strrchr($s, $needle, $part, $enc); }$/;"	f
mb_strrichr	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strrichr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_strrichr($s, $needle, $part, $enc); }$/;"	f
mb_strripos	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strripos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_strripos($s, $needle, $offset, $enc); }$/;"	f
mb_strrpos	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strrpos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_strrpos($s, $needle, $offset, $enc); }$/;"	f
mb_strstr	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strstr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_strstr($s, $needle, $part, $enc); }$/;"	f
mb_strtolower	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strtolower($s, $enc = null) { return p\\Mbstring::mb_strtolower($s, $enc); }$/;"	f
mb_strtoupper	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strtoupper($s, $enc = null) { return p\\Mbstring::mb_strtoupper($s, $enc); }$/;"	f
mb_strwidth	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strwidth($s, $enc = null) { return p\\Mbstring::mb_strwidth($s, $enc); }$/;"	f
mb_substitute_character	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_substitute_character($char = null) { return p\\Mbstring::mb_substitute_character($char); }$/;"	f
mb_substr	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_substr($s, $start, $length = 2147483647, $enc = null) { return p\\Mbstring::mb_substr($s, $start, $length, $enc); }$/;"	f
mb_substr_count	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_substr_count($haystack, $needle, $enc = null) { return p\\Mbstring::mb_substr_count($haystack, $needle, $enc); }$/;"	f
offset	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_stripos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_stripos($s, $needle, $offset, $enc); }$/;"	v
offset	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strpos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_strpos($s, $needle, $offset, $enc); }$/;"	v
offset	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strripos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_strripos($s, $needle, $offset, $enc); }$/;"	v
offset	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strrpos($s, $needle, $offset = 0, $enc = null) { return p\\Mbstring::mb_strrpos($s, $needle, $offset, $enc); }$/;"	v
part	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_stristr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_stristr($s, $needle, $part, $enc); }$/;"	v
part	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strrchr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_strrchr($s, $needle, $part, $enc); }$/;"	v
part	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strrichr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_strrichr($s, $needle, $part, $enc); }$/;"	v
part	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_strstr($s, $needle, $part = false, $enc = null) { return p\\Mbstring::mb_strstr($s, $needle, $part, $enc); }$/;"	v
split_length	vendor\symfony\polyfill-mbstring\bootstrap.php	/^    function mb_str_split($string, $split_length = 1, $encoding = null) { return p\\Mbstring::mb_str_split($string, $split_length, $encoding); }$/;"	v
Php72	vendor\symfony\polyfill-php72\Php72.php	/^final class Php72$/;"	c
c	vendor\symfony\polyfill-php72\Php72.php	/^                    $c = (\\ord($s[$i] & "\\x1F") << 6) | \\ord($s[++$i] & "\\x3F");$/;"	v
code	vendor\symfony\polyfill-php72\Php72.php	/^        $code = ($s = unpack('C*', substr($s, 0, 4))) ? $s[1] : 0;$/;"	v
does	vendor\symfony\polyfill-php72\Php72.php	/^        \/\/ The native function does not apply to stdin$/;"	f
enable	vendor\symfony\polyfill-php72\Php72.php	/^    public static function sapi_windows_vt100_support($stream, $enable = null)$/;"	v
encoding	vendor\symfony\polyfill-php72\Php72.php	/^    public static function mb_chr($code, $encoding = null)$/;"	v
encoding	vendor\symfony\polyfill-php72\Php72.php	/^    public static function mb_ord($s, $encoding = null)$/;"	v
hash	vendor\symfony\polyfill-php72\Php72.php	/^        if (null === $hash = spl_object_hash($object)) {$/;"	v
hashMask	vendor\symfony\polyfill-php72\Php72.php	/^    private static $hashMask;$/;"	v
initHashMask	vendor\symfony\polyfill-php72\Php72.php	/^    private static function initHashMask()$/;"	f
j	vendor\symfony\polyfill-php72\Php72.php	/^        for ($i = $len >> 1, $j = 0; $i < $len; ++$i, ++$j) {$/;"	v
j	vendor\symfony\polyfill-php72\Php72.php	/^        for ($i = 0, $j = 0; $i < $len; ++$i, ++$j) {$/;"	v
len	vendor\symfony\polyfill-php72\Php72.php	/^        $len = \\strlen($s);$/;"	v
map	vendor\symfony\polyfill-php72\Php72.php	/^        $map = array($/;"	v
mb_chr	vendor\symfony\polyfill-php72\Php72.php	/^    public static function mb_chr($code, $encoding = null)$/;"	f
mb_ord	vendor\symfony\polyfill-php72\Php72.php	/^    public static function mb_ord($s, $encoding = null)$/;"	f
meta	vendor\symfony\polyfill-php72\Php72.php	/^        $meta = array_map('strtolower', $meta);$/;"	v
meta	vendor\symfony\polyfill-php72\Php72.php	/^        $meta = stream_get_meta_data($stream);$/;"	v
obFuncs	vendor\symfony\polyfill-php72\Php72.php	/^        $obFuncs = array('ob_clean', 'ob_end_clean', 'ob_flush', 'ob_end_flush', 'ob_get_contents', 'ob_get_flush');$/;"	v
obj	vendor\symfony\polyfill-php72\Php72.php	/^        $obj = (object) array();$/;"	v
php_os_family	vendor\symfony\polyfill-php72\Php72.php	/^    public static function php_os_family()$/;"	f
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = \\chr($code);$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = \\chr(0xC0 | $code >> 6).\\chr(0x80 | $code & 0x3F);$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = \\chr(0xE0 | $code >> 12).\\chr(0x80 | $code >> 6 & 0x3F).\\chr(0x80 | $code & 0x3F);$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = \\chr(0xF0 | $code >> 18).\\chr(0x80 | $code >> 12 & 0x3F).\\chr(0x80 | $code >> 6 & 0x3F).\\chr(0x80 | $code & 0x3F);$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = mb_convert_encoding($s, $encoding, 'UTF-8');$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = mb_convert_encoding($s, 'UTF-8');$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^            $s = mb_convert_encoding($s, 'UTF-8', $encoding);$/;"	v
s	vendor\symfony\polyfill-php72\Php72.php	/^        $s = (string) $s;$/;"	v
sapi_windows_vt100_support	vendor\symfony\polyfill-php72\Php72.php	/^    public static function sapi_windows_vt100_support($stream, $enable = null)$/;"	f
spl_object_id	vendor\symfony\polyfill-php72\Php72.php	/^    public static function spl_object_id($object)$/;"	f
stat	vendor\symfony\polyfill-php72\Php72.php	/^            $stat = @fstat($stream);$/;"	v
stdin	vendor\symfony\polyfill-php72\Php72.php	/^        $stdin = 'php:\/\/stdin' === $meta['uri'] || 'php:\/\/fd\/0' === $meta['uri'];$/;"	v
stream_isatty	vendor\symfony\polyfill-php72\Php72.php	/^    public static function stream_isatty($stream)$/;"	f
utf8_decode	vendor\symfony\polyfill-php72\Php72.php	/^    public static function utf8_decode($s)$/;"	f
utf8_encode	vendor\symfony\polyfill-php72\Php72.php	/^    public static function utf8_encode($s)$/;"	f
PHP_OS_FAMILY	vendor\symfony\polyfill-php72\bootstrap.php	/^        define('PHP_OS_FAMILY', p\\Php72::php_os_family());$/;"	d
enable	vendor\symfony\polyfill-php72\bootstrap.php	/^        function sapi_windows_vt100_support($stream, $enable = null) { return p\\Php72::sapi_windows_vt100_support($stream, $enable); }$/;"	v
enc	vendor\symfony\polyfill-php72\bootstrap.php	/^        function mb_chr($code, $enc = null) { return p\\Php72::mb_chr($code, $enc); }$/;"	v
enc	vendor\symfony\polyfill-php72\bootstrap.php	/^        function mb_ord($s, $enc = null) { return p\\Php72::mb_ord($s, $enc); }$/;"	v
enc	vendor\symfony\polyfill-php72\bootstrap.php	/^        function mb_scrub($s, $enc = null) { $enc = null === $enc ? mb_internal_encoding() : $enc; return mb_convert_encoding($s, $enc, $enc); }$/;"	v
mb_chr	vendor\symfony\polyfill-php72\bootstrap.php	/^        function mb_chr($code, $enc = null) { return p\\Php72::mb_chr($code, $enc); }$/;"	f
mb_ord	vendor\symfony\polyfill-php72\bootstrap.php	/^        function mb_ord($s, $enc = null) { return p\\Php72::mb_ord($s, $enc); }$/;"	f
mb_scrub	vendor\symfony\polyfill-php72\bootstrap.php	/^        function mb_scrub($s, $enc = null) { $enc = null === $enc ? mb_internal_encoding() : $enc; return mb_convert_encoding($s, $enc, $enc); }$/;"	f
sapi_windows_vt100_support	vendor\symfony\polyfill-php72\bootstrap.php	/^        function sapi_windows_vt100_support($stream, $enable = null) { return p\\Php72::sapi_windows_vt100_support($stream, $enable); }$/;"	f
spl_object_id	vendor\symfony\polyfill-php72\bootstrap.php	/^        function spl_object_id($s) { return p\\Php72::spl_object_id($s); }$/;"	f
stream_isatty	vendor\symfony\polyfill-php72\bootstrap.php	/^        function stream_isatty($stream) { return p\\Php72::stream_isatty($stream); }$/;"	f
utf8_decode	vendor\symfony\polyfill-php72\bootstrap.php	/^        function utf8_decode($s) { return p\\Php72::utf8_decode($s); }$/;"	f
utf8_encode	vendor\symfony\polyfill-php72\bootstrap.php	/^        function utf8_encode($s) { return p\\Php72::utf8_encode($s); }$/;"	f
AmqpCaster	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^class AmqpCaster$/;"	c
castChannel	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    public static function castChannel(\\AMQPChannel $c, array $a, Stub $stub, $isNested)$/;"	f
castConnection	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    public static function castConnection(\\AMQPConnection $c, array $a, Stub $stub, $isNested)$/;"	f
castEnvelope	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    public static function castEnvelope(\\AMQPEnvelope $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castExchange	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    public static function castExchange(\\AMQPExchange $c, array $a, Stub $stub, $isNested)$/;"	f
castQueue	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    public static function castQueue(\\AMQPQueue $c, array $a, Stub $stub, $isNested)$/;"	f
deliveryMode	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^        $deliveryMode = new ConstStub($c->getDeliveryMode().(2 === $c->getDeliveryMode() ? ' (persistent)' : ' (non-persistent)'), $c->getDeliveryMode());$/;"	v
exchangeTypes	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    private static $exchangeTypes = [$/;"	v
extractFlags	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    private static function extractFlags(int $flags): ConstStub$/;"	f
filter	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    public static function castEnvelope(\\AMQPEnvelope $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
flags	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^    private static $flags = [$/;"	v
flagsArray	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^            $flagsArray = ['AMQP_NOPARAM'];$/;"	v
flagsArray	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^        $flagsArray = [];$/;"	v
prefix	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
timeout	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^            $timeout = $c->getReadTimeout();$/;"	v
timeout	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^            $timeout = $c->getTimeout();$/;"	v
type	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^        $type = isset(self::$exchangeTypes[$c->getType()]) ? new ConstStub(self::$exchangeTypes[$c->getType()], $c->getType()) : $c->getType();$/;"	v
value	vendor\symfony\var-dumper\Caster\AmqpCaster.php	/^        foreach (self::$flags as $value => $name) {$/;"	v
ArgsStub	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^class ArgsStub extends EnumStub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^    public function __construct(array $args, string $function, ?string $class)$/;"	f
arguments	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^ * Represents a list of function arguments.$/;"	f
dumpKeys	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^            $this->dumpKeys = false;$/;"	v
getParameters	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^    private static function getParameters(string $function, ?string $class): array$/;"	f
k	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^                $k = '&'.$k;$/;"	v
k	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^            $k = '$'.$v->name;$/;"	v
k	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^        foreach ($args as $k => $v) {$/;"	v
parameters	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^    private static $parameters = [];$/;"	v
params	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^            $params = \\array_slice($params, 0, \\count($values));$/;"	v
params	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^        $params = [];$/;"	v
r	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^            $r = null !== $class ? new \\ReflectionMethod($class, $function) : new \\ReflectionFunction($function);$/;"	v
value	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^            $this->value = $values[0]->value;$/;"	v
value	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^            $this->value = array_combine($params, $values);$/;"	v
values	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^        $values = [];$/;"	v
variadic	vendor\symfony\var-dumper\Caster\ArgsStub.php	/^        $variadic = '...';$/;"	v
Caster	vendor\symfony\var-dumper\Caster\Caster.php	/^class Caster$/;"	c
a	vendor\symfony\var-dumper\Caster\Caster.php	/^                $a = array_combine($keys, $a);$/;"	v
a	vendor\symfony\var-dumper\Caster\Caster.php	/^        $a = $obj instanceof \\Closure ? [] : (array) $obj;$/;"	v
castObject	vendor\symfony\var-dumper\Caster\Caster.php	/^    public static function castObject($obj, string $class, bool $hasDebugInfo = false): array$/;"	f
castPhpIncompleteClass	vendor\symfony\var-dumper\Caster\Caster.php	/^    public static function castPhpIncompleteClass(\\__PHP_Incomplete_Class $c, array $a, Stub $stub, bool $isNested): array$/;"	f
count	vendor\symfony\var-dumper\Caster\Caster.php	/^        $count = 0;$/;"	v
filter	vendor\symfony\var-dumper\Caster\Caster.php	/^    public static function filter(array $a, int $filter, array $listedProperties = [], ?int &$count = 0): array$/;"	f
hasDebugInfo	vendor\symfony\var-dumper\Caster\Caster.php	/^    public static function castObject($obj, string $class, bool $hasDebugInfo = false): array$/;"	v
i	vendor\symfony\var-dumper\Caster\Caster.php	/^                foreach ($prefixedKeys as $i => $k) {$/;"	v
i	vendor\symfony\var-dumper\Caster\Caster.php	/^            $i = 0;$/;"	v
k	vendor\symfony\var-dumper\Caster\Caster.php	/^                    $k = self::PREFIX_VIRTUAL.$k;$/;"	v
k	vendor\symfony\var-dumper\Caster\Caster.php	/^            foreach ($a as $k => $v) {$/;"	v
k	vendor\symfony\var-dumper\Caster\Caster.php	/^            foreach ($debugInfo as $k => $v) {$/;"	v
k	vendor\symfony\var-dumper\Caster\Caster.php	/^        foreach ($a as $k => $v) {$/;"	v
keys	vendor\symfony\var-dumper\Caster\Caster.php	/^                $keys = array_keys($a);$/;"	v
listedProperties	vendor\symfony\var-dumper\Caster\Caster.php	/^    public static function filter(array $a, int $filter, array $listedProperties = [], ?int &$count = 0): array$/;"	v
prefixedKeys	vendor\symfony\var-dumper\Caster\Caster.php	/^            $prefixedKeys = [];$/;"	v
publicProperties	vendor\symfony\var-dumper\Caster\Caster.php	/^            static $publicProperties = [];$/;"	v
type	vendor\symfony\var-dumper\Caster\Caster.php	/^            $type = self::EXCLUDE_STRICT & $filter;$/;"	v
type	vendor\symfony\var-dumper\Caster\Caster.php	/^            if ((self::EXCLUDE_STRICT & $filter) ? $type === $filter : $type) {$/;"	v
ClassStub	vendor\symfony\var-dumper\Caster\ClassStub.php	/^class ClassStub extends ConstStub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\ClassStub.php	/^    public function __construct(string $identifier, $callable = null)$/;"	f
callable	vendor\symfony\var-dumper\Caster\ClassStub.php	/^            $callable = new static($callable, $callable);$/;"	v
callable	vendor\symfony\var-dumper\Caster\ClassStub.php	/^    public function __construct(string $identifier, $callable = null)$/;"	v
i	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                } elseif (false !== $i = strpos($callable, '::')) {$/;"	v
i	vendor\symfony\var-dumper\Caster\ClassStub.php	/^            if (0 < $i = strrpos($this->value, '\\\\')) {$/;"	v
i	vendor\symfony\var-dumper\Caster\ClassStub.php	/^            } elseif (0 < $i = strpos($identifier, '::') ?: strpos($identifier, '->')) {$/;"	v
identifier	vendor\symfony\var-dumper\Caster\ClassStub.php	/^ * Represents a PHP class identifier.$/;"	c
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $r = $callable;$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $r = [$callable, '__invoke'];$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $r = [substr($callable, 0, $i), substr($callable, 2 + $i)];$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $r = new \\ReflectionClass($r[0]);$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $r = new \\ReflectionFunction($callable);$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $r = new \\ReflectionMethod($r[0], $r[1]);$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                $r = [substr($identifier, 0, $i), substr($identifier, 2 + $i)];$/;"	v
r	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                $r = new \\ReflectionClass($identifier);$/;"	v
s	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                $s = ReflectionCaster::castFunctionAbstract($r, [], new Stub(), true, Caster::EXCLUDE_VERBOSE);$/;"	v
s	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                $s = ReflectionCaster::getSignature($s);$/;"	v
value	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                    $this->value = substr_replace($identifier, $s, -2);$/;"	v
value	vendor\symfony\var-dumper\Caster\ClassStub.php	/^                $this->value = $identifier = preg_replace_callback('\/class@anonymous\\x00.*?\\.php0x?[0-9a-fA-F]++\/', function ($m) {$/;"	v
value	vendor\symfony\var-dumper\Caster\ClassStub.php	/^        $this->value = $identifier;$/;"	v
wrapCallable	vendor\symfony\var-dumper\Caster\ClassStub.php	/^    public static function wrapCallable($callable)$/;"	f
ConstStub	vendor\symfony\var-dumper\Caster\ConstStub.php	/^class ConstStub extends Stub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\ConstStub.php	/^    public function __construct(string $name, $value = null)$/;"	f
__toString	vendor\symfony\var-dumper\Caster\ConstStub.php	/^    public function __toString()$/;"	f
class	vendor\symfony\var-dumper\Caster\ConstStub.php	/^        $this->class = $name;$/;"	v
value	vendor\symfony\var-dumper\Caster\ConstStub.php	/^        $this->value = 1 < \\func_num_args() ? $value : $name;$/;"	v
value	vendor\symfony\var-dumper\Caster\ConstStub.php	/^    public function __construct(string $name, $value = null)$/;"	v
CutArrayStub	vendor\symfony\var-dumper\Caster\CutArrayStub.php	/^class CutArrayStub extends CutStub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\CutArrayStub.php	/^    public function __construct(array $value, array $preservedKeys)$/;"	f
preservedSubset	vendor\symfony\var-dumper\Caster\CutArrayStub.php	/^        $this->preservedSubset = array_intersect_key($value, array_flip($preservedKeys));$/;"	v
preservedSubset	vendor\symfony\var-dumper\Caster\CutArrayStub.php	/^    public $preservedSubset;$/;"	v
CutStub	vendor\symfony\var-dumper\Caster\CutStub.php	/^class CutStub extends Stub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\CutStub.php	/^    public function __construct($value)$/;"	f
class	vendor\symfony\var-dumper\Caster\CutStub.php	/^                    $this->class = 'Closed';$/;"	v
class	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->class = \\get_class($value);$/;"	v
class	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->class = preg_match('\/\/u', $value) ? self::STRING_UTF8 : self::STRING_BINARY;$/;"	v
class	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->class = self::ARRAY_ASSOC;$/;"	v
class	vendor\symfony\var-dumper\Caster\CutStub.php	/^                if ('Unknown' === $this->class = @get_resource_type($value)) {$/;"	v
cut	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->cut = $this->value = \\count($value);$/;"	v
cut	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->cut = -1;$/;"	v
cut	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->cut = self::STRING_BINARY === $this->class ? \\strlen($value) : mb_strlen($value, 'UTF-8');$/;"	v
handle	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->handle = (int) $value;$/;"	v
type	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->type = self::TYPE_ARRAY;$/;"	v
type	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->type = self::TYPE_OBJECT;$/;"	v
type	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->type = self::TYPE_RESOURCE;$/;"	v
type	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->type = self::TYPE_STRING;$/;"	v
value	vendor\symfony\var-dumper\Caster\CutStub.php	/^                $this->value = '';$/;"	v
value	vendor\symfony\var-dumper\Caster\CutStub.php	/^        $this->value = $value;$/;"	v
DOMCaster	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^class DOMCaster$/;"	c
castAttr	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castAttr(\\DOMAttr $dom, array $a, Stub $stub, $isNested)$/;"	f
castCharacterData	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castCharacterData(\\DOMCharacterData $dom, array $a, Stub $stub, $isNested)$/;"	f
castDocument	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castDocument(\\DOMDocument $dom, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castDocumentType	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castDocumentType(\\DOMDocumentType $dom, array $a, Stub $stub, $isNested)$/;"	f
castDomError	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castDomError(\\DOMDomError $dom, array $a, Stub $stub, $isNested)$/;"	f
castElement	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castElement(\\DOMElement $dom, array $a, Stub $stub, $isNested)$/;"	f
castEntity	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castEntity(\\DOMEntity $dom, array $a, Stub $stub, $isNested)$/;"	f
castException	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castException(\\DOMException $e, array $a, Stub $stub, $isNested)$/;"	f
castImplementation	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castImplementation($dom, array $a, Stub $stub, $isNested)$/;"	f
castLength	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castLength($dom, array $a, Stub $stub, $isNested)$/;"	f
castLocator	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castLocator(\\DOMLocator $dom, array $a, Stub $stub, $isNested)$/;"	f
castNameSpaceNode	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castNameSpaceNode(\\DOMNameSpaceNode $dom, array $a, Stub $stub, $isNested)$/;"	f
castNode	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castNode(\\DOMNode $dom, array $a, Stub $stub, $isNested)$/;"	f
castNotation	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castNotation(\\DOMNotation $dom, array $a, Stub $stub, $isNested)$/;"	f
castProcessingInstruction	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castProcessingInstruction(\\DOMProcessingInstruction $dom, array $a, Stub $stub, $isNested)$/;"	f
castText	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castText(\\DOMText $dom, array $a, Stub $stub, $isNested)$/;"	f
castTypeinfo	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castTypeinfo(\\DOMTypeinfo $dom, array $a, Stub $stub, $isNested)$/;"	f
castXPath	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castXPath(\\DOMXPath $dom, array $a, Stub $stub, $isNested)$/;"	f
errorCodes	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    private static $errorCodes = [$/;"	v
filter	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    public static function castDocument(\\DOMDocument $dom, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
formatOutput	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^            $formatOutput = $dom->formatOutput;$/;"	v
k	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^        $k = Caster::PREFIX_PROTECTED.'code';$/;"	v
nodeTypes	vendor\symfony\var-dumper\Caster\DOMCaster.php	/^    private static $nodeTypes = [$/;"	v
DateCaster	vendor\symfony\var-dumper\Caster\DateCaster.php	/^class DateCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $a = [];$/;"	v
castDateTime	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    public static function castDateTime(\\DateTimeInterface $d, array $a, Stub $stub, $isNested, $filter)$/;"	f
castInterval	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    public static function castInterval(\\DateInterval $interval, array $a, Stub $stub, $isNested, $filter)$/;"	f
castPeriod	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    public static function castPeriod(\\DatePeriod $p, array $a, Stub $stub, $isNested, $filter)$/;"	f
castTimeZone	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    public static function castTimeZone(\\DateTimeZone $timeZone, array $a, Stub $stub, $isNested, $filter)$/;"	f
dates	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $dates = [];$/;"	v
extra	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    private static function formatDateTime(\\DateTimeInterface $d, string $extra = ''): string$/;"	v
format	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $format = '%R ' === $format ? '0s' : $format;$/;"	v
format	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $format = '%R ';$/;"	v
formatDateTime	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    private static function formatDateTime(\\DateTimeInterface $d, string $extra = ''): string$/;"	f
formatInterval	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    private static function formatInterval(\\DateInterval $i): string$/;"	f
formatSeconds	vendor\symfony\var-dumper\Caster\DateCaster.php	/^    private static function formatSeconds(string $s, string $us): string$/;"	f
formatted	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $formatted = (new \\DateTime('now', $timeZone))->format($location ? 'e (P)' : 'P');$/;"	v
fromNow	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $fromNow = (new \\DateTime())->diff($d);$/;"	v
i	vendor\symfony\var-dumper\Caster\DateCaster.php	/^            $i = date_diff($d = new \\DateTime(), date_add(clone $d, $i)); \/\/ recalculate carry over points$/;"	v
i	vendor\symfony\var-dumper\Caster\DateCaster.php	/^            foreach (clone $p as $i => $d) {$/;"	v
i	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $i = [Caster::PREFIX_VIRTUAL.'interval' => new ConstStub(self::formatInterval($interval), $title)];$/;"	v
location	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $location = $d->getTimezone()->getLocation();$/;"	v
location	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $location = $timeZone->getLocation();$/;"	v
now	vendor\symfony\var-dumper\Caster\DateCaster.php	/^                    $now = new \\DateTimeImmutable();$/;"	v
now	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $now = new \\DateTimeImmutable();$/;"	v
numberOfSeconds	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $numberOfSeconds = $now->add($interval)->getTimestamp() - $now->getTimestamp();$/;"	v
p	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $p = [Caster::PREFIX_VIRTUAL.'period' => new ConstStub($period, implode("\\n", $dates))];$/;"	v
period	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $period = sprintf($/;"	v
prefix	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
title	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $title = $d->format('l, F j, Y')$/;"	v
title	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $title = $location && \\extension_loaded('intl') ? \\Locale::getDisplayRegion('-'.$location['country_code']) : '';$/;"	v
title	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $title = number_format($numberOfSeconds, 0, '.', ' ').'s';$/;"	v
z	vendor\symfony\var-dumper\Caster\DateCaster.php	/^        $z = [Caster::PREFIX_VIRTUAL.'timezone' => new ConstStub($formatted, $title)];$/;"	v
DoctrineCaster	vendor\symfony\var-dumper\Caster\DoctrineCaster.php	/^class DoctrineCaster$/;"	c
castCommonProxy	vendor\symfony\var-dumper\Caster\DoctrineCaster.php	/^    public static function castCommonProxy(CommonProxy $proxy, array $a, Stub $stub, $isNested)$/;"	f
castOrmProxy	vendor\symfony\var-dumper\Caster\DoctrineCaster.php	/^    public static function castOrmProxy(OrmProxy $proxy, array $a, Stub $stub, $isNested)$/;"	f
castPersistentCollection	vendor\symfony\var-dumper\Caster\DoctrineCaster.php	/^    public static function castPersistentCollection(PersistentCollection $coll, array $a, Stub $stub, $isNested)$/;"	f
DsCaster	vendor\symfony\var-dumper\Caster\DsCaster.php	/^class DsCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\DsCaster.php	/^            $a = $c->value;$/;"	v
castCollection	vendor\symfony\var-dumper\Caster\DsCaster.php	/^    public static function castCollection(Collection $c, array $a, Stub $stub, bool $isNested): array$/;"	f
castMap	vendor\symfony\var-dumper\Caster\DsCaster.php	/^    public static function castMap(Map $c, array $a, Stub $stub, bool $isNested): array$/;"	f
castPair	vendor\symfony\var-dumper\Caster\DsCaster.php	/^    public static function castPair(Pair $c, array $a, Stub $stub, bool $isNested): array$/;"	f
castPairStub	vendor\symfony\var-dumper\Caster\DsCaster.php	/^    public static function castPairStub(DsPairStub $c, array $a, Stub $stub, bool $isNested): array$/;"	f
k	vendor\symfony\var-dumper\Caster\DsCaster.php	/^        foreach ($c as $k => $v) {$/;"	v
k	vendor\symfony\var-dumper\Caster\DsCaster.php	/^        foreach ($c->toArray() as $k => $v) {$/;"	v
DsPairStub	vendor\symfony\var-dumper\Caster\DsPairStub.php	/^class DsPairStub extends Stub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\DsPairStub.php	/^    public function __construct($key, $value)$/;"	f
value	vendor\symfony\var-dumper\Caster\DsPairStub.php	/^        $this->value = [$/;"	v
EnumStub	vendor\symfony\var-dumper\Caster\EnumStub.php	/^class EnumStub extends Stub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\EnumStub.php	/^    public function __construct(array $values, bool $dumpKeys = true)$/;"	f
dumpKeys	vendor\symfony\var-dumper\Caster\EnumStub.php	/^        $this->dumpKeys = $dumpKeys;$/;"	v
dumpKeys	vendor\symfony\var-dumper\Caster\EnumStub.php	/^    public $dumpKeys = true;$/;"	v
dumpKeys	vendor\symfony\var-dumper\Caster\EnumStub.php	/^    public function __construct(array $values, bool $dumpKeys = true)$/;"	v
value	vendor\symfony\var-dumper\Caster\EnumStub.php	/^        $this->value = $values;$/;"	v
ExceptionCaster	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^class ExceptionCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $a = \\array_slice($a, 0, $trace->sliceLength, true);$/;"	v
a	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $a = [];$/;"	v
b	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $b = (array) $a[$xPrefix.'previous'];$/;"	v
c	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $c = isset($c[$ltrim]) && "\\r" !== $c[$ltrim] ? substr($c, $ltrim) : ltrim($c, " \\t");$/;"	v
c	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $c = new ConstStub($c, $stub ? 'in '.$stub->class : '');$/;"	v
c	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $c = new ConstStub('default', $c);$/;"	v
c	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $c = substr($c, 0, -1);$/;"	v
cacheKey	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $cacheKey = $f;$/;"	v
cacheKey	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $cacheKey = implode('-', $cacheKey);$/;"	v
call	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $call = isset($f['function']) ? (isset($f['class']) ? $f['class'].$f['type'] : '').$f['function'] : '???';$/;"	v
caller	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $caller = isset($frame['class']) ? new \\ReflectionMethod($frame['class'], $frame['function']) : new \\ReflectionFunction($frame['function']);$/;"	v
castError	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castError(\\Error $e, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castErrorException	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castErrorException(\\ErrorException $e, array $a, Stub $stub, $isNested)$/;"	f
castException	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castException(\\Exception $e, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castFrameStub	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castFrameStub(FrameStub $frame, array $a, Stub $stub, $isNested)$/;"	f
castSilencedErrorContext	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castSilencedErrorContext(SilencedErrorContext $e, array $a, Stub $stub, $isNested)$/;"	f
castThrowingCasterException	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castThrowingCasterException(ThrowingCasterException $e, array $a, Stub $stub, $isNested)$/;"	f
castTraceStub	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castTraceStub(TraceStub $trace, array $a, Stub $stub, $isNested)$/;"	f
class	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $class = 'c' === $class[0] && 0 === strpos($class, "class@anonymous\\0") ? get_parent_class($class).'@anonymous' : $class;$/;"	v
class	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $class = \\get_class($a[$xPrefix.'previous']);$/;"	v
collapse	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                            $collapse = true;$/;"	v
collapse	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $collapse = false;$/;"	v
ellipsis	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                        $ellipsis = 0;$/;"	v
ellipsis	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $ellipsis = isset($ellipsis->attr['ellipsis']) ? $ellipsis->attr['ellipsis'] : 0;$/;"	v
ellipsis	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $ellipsis = new LinkStub($srcKey, 0);$/;"	v
ellipsisTail	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $ellipsisTail = isset($ellipsis->attr['ellipsis-tail']) ? $ellipsis->attr['ellipsis-tail'] : 0;$/;"	v
errorTypes	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static $errorTypes = [$/;"	v
extractSource	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    private static function extractSource(string $srcLines, int $line, int $srcContext, string $lang, ?string $file, array $frame): EnumStub$/;"	f
f	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $f = $frames[$i - 1];$/;"	v
f	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $f = $frames[$i];$/;"	v
f	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $f = self::castFrameStub($frame, [], $frame, true);$/;"	v
f	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $f = $frame->value;$/;"	v
filter	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castError(\\Error $e, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
filter	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static function castException(\\Exception $e, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
filterExceptionArray	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    private static function filterExceptionArray(string $xClass, array $a, string $xPrefix, int $filter): array$/;"	f
frame	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $frame = new FrameStub($/;"	v
frames	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $frames = $trace->value;$/;"	v
framesCache	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    private static $framesCache = [];$/;"	v
i	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $i = max(0, $j + $i);$/;"	v
i	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        foreach ($src as $i => $c) {$/;"	v
i	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        if (0 > $i = $trace->sliceOffset) {$/;"	v
j	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $j = \\count($frames);$/;"	v
k	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        foreach ($a as $k => $v) {$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                            $label = substr_replace($label, '1', 11, 1);$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                    $label = substr_replace($label, "title=Stack level $j.&", 2, 0);$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                    $label = substr_replace($prefix, "ellipsis-type=class&ellipsis={$label->attr['ellipsis']}&ellipsis-tail=1&title=Stack level $j.", 2, 0).$label->value.'()';$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                    $label = substr_replace($prefix, "title=Stack level $j.", 2, 0).$label->value.'()';$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $label = new ClassStub($lastCall);$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $label = substr_replace($prefix, "title=Stack level $j.", 2, 0).$lastCall;$/;"	v
label	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                foreach ($f[$prefix.'src']->value as $label => $frame) {$/;"	v
lastCall	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $lastCall = $call;$/;"	v
lastCall	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $lastCall = isset($frames[$i]['function']) ? (isset($frames[$i]['class']) ? $frames[0]['class'].$frames[$i]['type'] : '').$frames[$i]['function'].'()' : '';$/;"	v
ltrim	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $ltrim = 0;$/;"	v
pad	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                        $pad = $c;$/;"	v
pad	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $pad = null;$/;"	v
prefix	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $prefix = Caster::PREFIX_PROTECTED;$/;"	v
prefix	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
sPrefix	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $sPrefix = "\\0".SilencedErrorContext::class."\\0";$/;"	v
src	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                                $src = self::extractSource($templateSrc, $templateInfo[$f['line']], self::$srcContext, 'twig', $templatePath, $f);$/;"	v
src	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                        $src = self::extractSource(file_get_contents($f['file']), $f['line'], self::$srcContext, 'php', $f['file'], $f);$/;"	v
src	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $src = $f['line'];$/;"	v
src	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $src = [];$/;"	v
srcAttr	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $srcAttr = 'collapse='.(int) $ellipsis->inVendor;$/;"	v
srcContext	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static $srcContext = 1;$/;"	v
srcKey	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                                $srcKey = ($templatePath ?: $template->getTemplateName()).':'.$templateInfo[$f['line']];$/;"	v
srcKey	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                $srcKey = $f['file'];$/;"	v
srcLines	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $srcLines = ["\\0~separator=\\0" => $stub];$/;"	v
srcLines	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $srcLines = [];$/;"	v
srcLines	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $srcLines = explode("\\n", $srcLines);$/;"	v
stub	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $stub = new CutStub(new \\stdClass());$/;"	v
stub	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $stub = null;$/;"	v
template	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                        $template = isset($f['object']) ? $f['object'] : unserialize(sprintf('O:%d:"%s":0:{}', \\strlen($f['class']), $f['class']));$/;"	v
templateInfo	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                        $templateInfo = $template->getDebugInfo();$/;"	v
templatePath	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                                $templatePath = null;$/;"	v
templateSrc	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^                        $templateSrc = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getCode() : (method_exists($template, 'getSource') ? $template->getSource() : '');$/;"	v
trace	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $trace = $a[$xPrefix.'trace'];$/;"	v
trace	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $trace = [];$/;"	v
trace	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^            $trace = array_merge($trace, $a[$sPrefix.'trace']);$/;"	v
trace	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $trace = Caster::PREFIX_VIRTUAL.'trace';$/;"	v
trace	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $trace = [[$/;"	v
traceArgs	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    public static $traceArgs = true;$/;"	v
traceUnshift	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^    private static function traceUnshift(array &$trace, ?string $class, string $file, int $line): void$/;"	f
xPrefix	vendor\symfony\var-dumper\Caster\ExceptionCaster.php	/^        $xPrefix = "\\0Exception\\0";$/;"	v
FrameStub	vendor\symfony\var-dumper\Caster\FrameStub.php	/^class FrameStub extends EnumStub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\FrameStub.php	/^    public function __construct(array $frame, bool $keepArgs = true, bool $inTraceStub = false)$/;"	f
inTraceStub	vendor\symfony\var-dumper\Caster\FrameStub.php	/^        $this->inTraceStub = $inTraceStub;$/;"	v
inTraceStub	vendor\symfony\var-dumper\Caster\FrameStub.php	/^    public $inTraceStub;$/;"	v
keepArgs	vendor\symfony\var-dumper\Caster\FrameStub.php	/^        $this->keepArgs = $keepArgs;$/;"	v
keepArgs	vendor\symfony\var-dumper\Caster\FrameStub.php	/^    public $keepArgs;$/;"	v
keepArgs	vendor\symfony\var-dumper\Caster\FrameStub.php	/^    public function __construct(array $frame, bool $keepArgs = true, bool $inTraceStub = false)$/;"	v
value	vendor\symfony\var-dumper\Caster\FrameStub.php	/^        $this->value = $frame;$/;"	v
GmpCaster	vendor\symfony\var-dumper\Caster\GmpCaster.php	/^class GmpCaster$/;"	c
castGmp	vendor\symfony\var-dumper\Caster\GmpCaster.php	/^    public static function castGmp(\\GMP $gmp, array $a, Stub $stub, $isNested, $filter): array$/;"	f
ImagineCaster	vendor\symfony\var-dumper\Caster\ImagineCaster.php	/^final class ImagineCaster$/;"	c
castImage	vendor\symfony\var-dumper\Caster\ImagineCaster.php	/^    public static function castImage(ImageInterface $c, array $a, Stub $stub, bool $isNested): array$/;"	f
imgData	vendor\symfony\var-dumper\Caster\ImagineCaster.php	/^        $imgData = $c->get('png');$/;"	v
ImgStub	vendor\symfony\var-dumper\Caster\ImgStub.php	/^class ImgStub extends ConstStub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\ImgStub.php	/^    public function __construct(string $data, string $contentType, string $size)$/;"	f
value	vendor\symfony\var-dumper\Caster\ImgStub.php	/^        $this->value = '';$/;"	v
IntlCaster	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^class IntlCaster$/;"	c
castError	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    private static function castError($c, array $a): array$/;"	f
castIntlCalendar	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castIntlCalendar(\\IntlCalendar $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castIntlDateFormatter	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castIntlDateFormatter(\\IntlDateFormatter $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castIntlTimeZone	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castIntlTimeZone(\\IntlTimeZone $c, array $a, Stub $stub, $isNested)$/;"	f
castMessageFormatter	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castMessageFormatter(\\MessageFormatter $c, array $a, Stub $stub, $isNested)$/;"	f
castNumberFormatter	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castNumberFormatter(\\NumberFormatter $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
filter	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castIntlCalendar(\\IntlCalendar $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
filter	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castIntlDateFormatter(\\IntlDateFormatter $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
filter	vendor\symfony\var-dumper\Caster\IntlCaster.php	/^    public static function castNumberFormatter(\\NumberFormatter $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
LinkStub	vendor\symfony\var-dumper\Caster\LinkStub.php	/^class LinkStub extends ConstStub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\LinkStub.php	/^    public function __construct($label, int $line = 0, $href = null)$/;"	f
composerRoots	vendor\symfony\var-dumper\Caster\LinkStub.php	/^    private static $composerRoots;$/;"	v
getComposerRoot	vendor\symfony\var-dumper\Caster\LinkStub.php	/^    private function getComposerRoot(string $file, bool &$inVendor)$/;"	f
href	vendor\symfony\var-dumper\Caster\LinkStub.php	/^            $href = $label;$/;"	v
href	vendor\symfony\var-dumper\Caster\LinkStub.php	/^            $href = substr($href, 7);$/;"	v
inVendor	vendor\symfony\var-dumper\Caster\LinkStub.php	/^        $inVendor = false;$/;"	v
inVendor	vendor\symfony\var-dumper\Caster\LinkStub.php	/^    public $inVendor = false;$/;"	v
label	vendor\symfony\var-dumper\Caster\LinkStub.php	/^                $label = substr($label, 7);$/;"	v
line	vendor\symfony\var-dumper\Caster\LinkStub.php	/^    public function __construct($label, int $line = 0, $href = null)$/;"	v
parent	vendor\symfony\var-dumper\Caster\LinkStub.php	/^            $parent = \\dirname($parent);$/;"	v
parent	vendor\symfony\var-dumper\Caster\LinkStub.php	/^        $parent = $dir;$/;"	v
r	vendor\symfony\var-dumper\Caster\LinkStub.php	/^                    $r = new \\ReflectionClass($class);$/;"	v
v	vendor\symfony\var-dumper\Caster\LinkStub.php	/^                    $v = \\dirname($r->getFileName(), 2);$/;"	v
value	vendor\symfony\var-dumper\Caster\LinkStub.php	/^        $this->value = $label;$/;"	v
vendorRoots	vendor\symfony\var-dumper\Caster\LinkStub.php	/^    private static $vendorRoots;$/;"	v
MemcachedCaster	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^class MemcachedCaster$/;"	c
castMemcached	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^    public static function castMemcached(\\Memcached $c, array $a, Stub $stub, $isNested)$/;"	f
constantKey	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        foreach ($reflectedMemcached->getConstants() as $constantKey => $value) {$/;"	v
constantKey	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        foreach (self::$optionConstants as $constantKey => $value) {$/;"	v
defaultMemcached	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        $defaultMemcached = new \\Memcached();$/;"	v
defaultOptions	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        $defaultOptions = [];$/;"	v
defaultOptions	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^    private static $defaultOptions;$/;"	v
discoverDefaultOptions	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^    private static function discoverDefaultOptions(): array$/;"	f
getNonDefaultOptions	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^    private static function getNonDefaultOptions(\\Memcached $c): array$/;"	f
getOptionConstants	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^    private static function getOptionConstants(): array$/;"	f
nonDefaultOptions	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        $nonDefaultOptions = [];$/;"	v
option	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^            if (self::$defaultOptions[$constantKey] !== $option = $c->getOption($value)) {$/;"	v
optionConstants	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        $optionConstants = [];$/;"	v
optionConstants	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^    private static $optionConstants;$/;"	v
reflectedMemcached	vendor\symfony\var-dumper\Caster\MemcachedCaster.php	/^        $reflectedMemcached = new \\ReflectionClass(\\Memcached::class);$/;"	v
PdoCaster	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^class PdoCaster$/;"	c
attr	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^        $attr = [];$/;"	v
castPdo	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^    public static function castPdo(\\PDO $c, array $a, Stub $stub, $isNested)$/;"	f
castPdoStatement	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^    public static function castPdoStatement(\\PDOStatement $c, array $a, Stub $stub, $isNested)$/;"	f
errmode	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^        $errmode = $c->getAttribute(\\PDO::ATTR_ERRMODE);$/;"	v
k	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^                $k = $v;$/;"	v
k	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^        foreach (self::$pdoAttributes as $k => $v) {$/;"	v
pdoAttributes	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^    private static $pdoAttributes = [$/;"	v
prefix	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
v	vendor\symfony\var-dumper\Caster\PdoCaster.php	/^                $v = [];$/;"	v
PgSqlCaster	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^class PgSqlCaster$/;"	c
castLargeObject	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    public static function castLargeObject($lo, array $a, Stub $stub, $isNested)$/;"	f
castLink	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    public static function castLink($link, array $a, Stub $stub, $isNested)$/;"	f
castResult	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    public static function castResult($result, array $a, Stub $stub, $isNested)$/;"	f
diagCodes	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    private static $diagCodes = [$/;"	v
field	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^            $field = [$/;"	v
fields	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^        $fields = pg_num_fields($result);$/;"	v
k	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^            foreach (self::$diagCodes as $k => $v) {$/;"	v
paramCodes	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    private static $paramCodes = [$/;"	v
resultStatus	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    private static $resultStatus = [$/;"	v
s	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^            if (false !== $s = pg_parameter_status($link, $v)) {$/;"	v
transactionStatus	vendor\symfony\var-dumper\Caster\PgSqlCaster.php	/^    private static $transactionStatus = [$/;"	v
ProxyManagerCaster	vendor\symfony\var-dumper\Caster\ProxyManagerCaster.php	/^class ProxyManagerCaster$/;"	c
castProxy	vendor\symfony\var-dumper\Caster\ProxyManagerCaster.php	/^    public static function castProxy(ProxyInterface $c, array $a, Stub $stub, $isNested)$/;"	f
RedisCaster	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^class RedisCaster$/;"	c
castRedis	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    public static function castRedis(\\Redis $c, array $a, Stub $stub, $isNested)$/;"	f
castRedisArray	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    public static function castRedisArray(\\RedisArray $c, array $a, Stub $stub, $isNested)$/;"	f
castRedisCluster	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    public static function castRedisCluster(\\RedisCluster $c, array $a, Stub $stub, $isNested)$/;"	f
compression	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^            $compression = new ConstStub(self::$compression[$compression], $compression);$/;"	v
compression	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^        $compression = \\defined('Redis::OPT_COMPRESSION') ? $redis->getOption(\\Redis::OPT_COMPRESSION) : 0;$/;"	v
compression	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    private static $compression = [$/;"	v
failover	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^        $failover = $c->getOption(\\RedisCluster::OPT_SLAVE_FAILOVER);$/;"	v
failover	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    private static $failover = [$/;"	v
from	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^ * Casts Redis class from ext-redis to array representation.$/;"	c
getRedisOptions	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    private static function getRedisOptions($redis, array $options = []): EnumStub$/;"	f
mode	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^        $mode = $c->getMode();$/;"	v
mode	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    private static $mode = [$/;"	v
options	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    private static function getRedisOptions($redis, array $options = []): EnumStub$/;"	v
prefix	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
retry	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^            $retry = new ConstStub($retry ? 'RETRY' : 'NORETRY', $retry);$/;"	v
retry	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^        $retry = \\defined('Redis::OPT_SCAN') ? $redis->getOption(\\Redis::OPT_SCAN) : 0;$/;"	v
serializer	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^            $serializer = new ConstStub(self::$serializer[$serializer], $serializer);$/;"	v
serializer	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^        $serializer = $redis->getOption(\\Redis::OPT_SERIALIZER);$/;"	v
serializer	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^    private static $serializer = [$/;"	v
v	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^                    $v = new ConstStub(self::$compression[$v], $v);$/;"	v
v	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^                    $v = new ConstStub(self::$serializer[$v], $v);$/;"	v
v	vendor\symfony\var-dumper\Caster\RedisCaster.php	/^                $v = new ConstStub($v ? 'RETRY' : 'NORETRY', $v);$/;"	v
ReflectionCaster	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^class ReflectionCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $a = static::castFunctionAbstract($c, $a, $stub, $isNested, $filter);$/;"	v
addExtra	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    private static function addExtra(array &$a, \\Reflector $c)$/;"	f
addMap	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    private static function addMap(array &$a, \\Reflector $c, array $map, string $prefix = Caster::PREFIX_VIRTUAL)$/;"	f
c	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $c = new \\ReflectionFunction($c);$/;"	v
castClass	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castClass(\\ReflectionClass $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castClosure	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castClosure(\\Closure $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castExtension	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castExtension(\\ReflectionExtension $c, array $a, Stub $stub, $isNested)$/;"	f
castFunctionAbstract	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castFunctionAbstract(\\ReflectionFunctionAbstract $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	f
castGenerator	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castGenerator(\\Generator $c, array $a, Stub $stub, $isNested)$/;"	f
castMethod	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castMethod(\\ReflectionMethod $c, array $a, Stub $stub, $isNested)$/;"	f
castParameter	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castParameter(\\ReflectionParameter $c, array $a, Stub $stub, $isNested)$/;"	f
castProperty	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castProperty(\\ReflectionProperty $c, array $a, Stub $stub, $isNested)$/;"	f
castReference	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castReference(\\ReflectionReference $c, array $a, Stub $stub, $isNested)$/;"	f
castReflectionGenerator	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castReflectionGenerator(\\ReflectionGenerator $c, array $a, Stub $stub, $isNested)$/;"	f
castType	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castType(\\ReflectionType $c, array $a, Stub $stub, $isNested)$/;"	f
castZendExtension	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castZendExtension(\\ReflectionZendExtension $c, array $a, Stub $stub, $isNested)$/;"	f
extraMap	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    private static $extraMap = [$/;"	v
filter	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castClass(\\ReflectionClass $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
filter	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castClosure(\\Closure $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
filter	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function castFunctionAbstract(\\ReflectionFunctionAbstract $c, array $a, Stub $stub, $isNested, $filter = 0)$/;"	v
frame	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $frame = [$/;"	v
function	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $function = ExceptionCaster::castFrameStub($function, [], $function, true);$/;"	v
function	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $function = new FrameStub($frame, false, true);$/;"	v
function	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $function = new \\ReflectionGenerator($c->getExecutingGenerator());$/;"	v
function	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $function = $c->getFunction();$/;"	v
getSignature	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function getSignature(array $a)$/;"	f
k	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^                $k = '&'.$k;$/;"	v
k	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^                $k = '...'.$k;$/;"	v
k	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $k = '$'.$v->name;$/;"	v
k	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            foreach ($a[$prefix.'parameters']->value as $k => $param) {$/;"	v
k	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            foreach ($v as $k => &$v) {$/;"	v
k	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        foreach ($map as $k => $m) {$/;"	v
m	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        if (method_exists($c, 'getFileName') && $m = $c->getFileName()) {$/;"	v
prefix	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
prefix	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    private static function addMap(array &$a, \\Reflector $c, array $map, string $prefix = Caster::PREFIX_VIRTUAL)$/;"	v
reflectionGenerator	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $reflectionGenerator = new \\ReflectionGenerator($c);$/;"	v
signature	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $signature = '';$/;"	v
signature	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $signature = (empty($a[$prefix.'returnsReference']) ? '' : '&').'('.substr($signature, 2).')';$/;"	v
unsetClosureFileInfo	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^    public static function unsetClosureFileInfo(\\Closure $c, array $a)$/;"	f
v	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^                $v = $param->getDefaultValue();$/;"	v
v	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $a[$prefix.'default'] = $v = $c->getDefaultValue();$/;"	v
v	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $v = $a[$prefix.'returnType'];$/;"	v
v	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $v = $a[$prefix.'typeHint'];$/;"	v
v	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^            $v = $v->getName();$/;"	v
v	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        if (!($filter & Caster::EXCLUDE_VERBOSE) && $v = $c->getStaticVariables()) {$/;"	v
x	vendor\symfony\var-dumper\Caster\ReflectionCaster.php	/^        $x = isset($a[Caster::PREFIX_VIRTUAL.'extra']) ? $a[Caster::PREFIX_VIRTUAL.'extra']->value : [];$/;"	v
ResourceCaster	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^class ResourceCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $a = stream_get_meta_data($stream) + static::castStreamContext($stream, $a, $stub, $isNested);$/;"	v
castCurl	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castCurl($h, array $a, Stub $stub, $isNested)$/;"	f
castDba	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castDba($dba, array $a, Stub $stub, $isNested)$/;"	f
castGd	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castGd($gd, array $a, Stub $stub, $isNested)$/;"	f
castMysqlLink	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castMysqlLink($h, array $a, Stub $stub, $isNested)$/;"	f
castOpensslX509	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castOpensslX509($h, array $a, Stub $stub, $isNested)$/;"	f
castProcess	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castProcess($process, array $a, Stub $stub, $isNested)$/;"	f
castStream	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castStream($stream, array $a, Stub $stub, $isNested)$/;"	f
castStreamContext	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^    public static function castStreamContext($stream, array $a, Stub $stub, $isNested)$/;"	f
info	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $info = openssl_x509_parse($h, false);$/;"	v
list	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $list = dba_list();$/;"	v
pin	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $pin = \\array_slice(explode("\\n", $pin), 1, -2);$/;"	v
pin	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $pin = base64_decode(implode('', $pin));$/;"	v
pin	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $pin = base64_encode(hash('sha256', $pin, true));$/;"	v
pin	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $pin = openssl_pkey_get_details($pin)['key'];$/;"	v
pin	vendor\symfony\var-dumper\Caster\ResourceCaster.php	/^        $pin = openssl_pkey_get_public($h);$/;"	v
SplCaster	vendor\symfony\var-dumper\Caster\SplCaster.php	/^class SplCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\SplCaster.php	/^            $a = Caster::castObject($c, $class);$/;"	v
castArrayIterator	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castArrayIterator(\\ArrayIterator $c, array $a, Stub $stub, $isNested)$/;"	f
castArrayObject	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castArrayObject(\\ArrayObject $c, array $a, Stub $stub, $isNested)$/;"	f
castDoublyLinkedList	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castDoublyLinkedList(\\SplDoublyLinkedList $c, array $a, Stub $stub, $isNested)$/;"	f
castFileInfo	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castFileInfo(\\SplFileInfo $c, array $a, Stub $stub, $isNested)$/;"	f
castFileObject	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castFileObject(\\SplFileObject $c, array $a, Stub $stub, $isNested)$/;"	f
castFixedArray	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castFixedArray(\\SplFixedArray $c, array $a, Stub $stub, $isNested)$/;"	f
castHeap	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castHeap(\\Iterator $c, array $a, Stub $stub, $isNested)$/;"	f
castObjectStorage	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castObjectStorage(\\SplObjectStorage $c, array $a, Stub $stub, $isNested)$/;"	f
castOuterIterator	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castOuterIterator(\\OuterIterator $c, array $a, Stub $stub, $isNested)$/;"	f
castSplArray	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    private static function castSplArray($c, array $a, Stub $stub, bool $isNested): array$/;"	f
castWeakReference	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    public static function castWeakReference(\\WeakReference $c, array $a, Stub $stub, $isNested)$/;"	f
class	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        $class = $stub->class;$/;"	v
clone	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        $clone = clone $c;$/;"	v
flags	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        $flags = $c->getFlags();$/;"	v
flagsArray	vendor\symfony\var-dumper\Caster\SplCaster.php	/^            $flagsArray = [];$/;"	v
key	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        foreach ($map as $key => $accessor) {$/;"	v
map	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        static $map = [$/;"	v
mapDate	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        static $mapDate = ['aTime', 'mTime', 'cTime'];$/;"	v
mode	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        $mode = $c->getIteratorMode();$/;"	v
prefix	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        $prefix = Caster::PREFIX_VIRTUAL;$/;"	v
splFileObjectFlags	vendor\symfony\var-dumper\Caster\SplCaster.php	/^    private static $splFileObjectFlags = [$/;"	v
storage	vendor\symfony\var-dumper\Caster\SplCaster.php	/^        $storage = [];$/;"	v
value	vendor\symfony\var-dumper\Caster\SplCaster.php	/^            foreach (self::$splFileObjectFlags as $value => $name) {$/;"	v
StubCaster	vendor\symfony\var-dumper\Caster\StubCaster.php	/^class StubCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\StubCaster.php	/^                $a = array_combine($keys, $c->value);$/;"	v
a	vendor\symfony\var-dumper\Caster\StubCaster.php	/^            $a = [];$/;"	v
castCutArray	vendor\symfony\var-dumper\Caster\StubCaster.php	/^    public static function castCutArray(CutArrayStub $c, array $a, Stub $stub, $isNested)$/;"	f
castEnum	vendor\symfony\var-dumper\Caster\StubCaster.php	/^    public static function castEnum(EnumStub $c, array $a, Stub $stub, $isNested)$/;"	f
castStub	vendor\symfony\var-dumper\Caster\StubCaster.php	/^    public static function castStub(Stub $c, array $a, Stub $stub, $isNested)$/;"	f
cutInternals	vendor\symfony\var-dumper\Caster\StubCaster.php	/^    public static function cutInternals($obj, array $a, Stub $stub, $isNested)$/;"	f
SymfonyCaster	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^class SymfonyCaster$/;"	c
a	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^        $a = [];$/;"	v
castHttpClient	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^    public static function castHttpClient($client, array $a, Stub $stub, $isNested)$/;"	f
castHttpClientResponse	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^    public static function castHttpClientResponse($response, array $a, Stub $stub, $isNested)$/;"	f
castRequest	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^    public static function castRequest(Request $request, array $a, Stub $stub, $isNested)$/;"	f
clone	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^                    $clone = clone $request;$/;"	v
clone	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^        $clone = null;$/;"	v
k	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^        foreach ($response->getInfo() as $k => $v) {$/;"	v
key	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^            $key = Caster::PREFIX_PROTECTED.$prop;$/;"	v
multiKey	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^        $multiKey = sprintf("\\0%s\\0multi", \\get_class($client));$/;"	v
prop	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^        foreach (self::$requestGetters as $prop => $getter) {$/;"	v
requestGetters	vendor\symfony\var-dumper\Caster\SymfonyCaster.php	/^    private static $requestGetters = [$/;"	v
TraceStub	vendor\symfony\var-dumper\Caster\TraceStub.php	/^class TraceStub extends Stub$/;"	c
__construct	vendor\symfony\var-dumper\Caster\TraceStub.php	/^    public function __construct(array $trace, bool $keepArgs = true, int $sliceOffset = 0, int $sliceLength = null, int $numberingOffset = 0)$/;"	f
keepArgs	vendor\symfony\var-dumper\Caster\TraceStub.php	/^        $this->keepArgs = $keepArgs;$/;"	v
keepArgs	vendor\symfony\var-dumper\Caster\TraceStub.php	/^    public $keepArgs;$/;"	v
keepArgs	vendor\symfony\var-dumper\Caster\TraceStub.php	/^    public function __construct(array $trace, bool $keepArgs = true, int $sliceOffset = 0, int $sliceLength = null, int $numberingOffset = 0)$/;"	v
numberingOffset	vendor\symfony\var-dumper\Caster\TraceStub.php	/^        $this->numberingOffset = $numberingOffset;$/;"	v
numberingOffset	vendor\symfony\var-dumper\Caster\TraceStub.php	/^    public $numberingOffset;$/;"	v
sliceLength	vendor\symfony\var-dumper\Caster\TraceStub.php	/^        $this->sliceLength = $sliceLength;$/;"	v
sliceLength	vendor\symfony\var-dumper\Caster\TraceStub.php	/^    public $sliceLength;$/;"	v
sliceOffset	vendor\symfony\var-dumper\Caster\TraceStub.php	/^        $this->sliceOffset = $sliceOffset;$/;"	v
sliceOffset	vendor\symfony\var-dumper\Caster\TraceStub.php	/^    public $sliceOffset;$/;"	v
value	vendor\symfony\var-dumper\Caster\TraceStub.php	/^        $this->value = $trace;$/;"	v
UuidCaster	vendor\symfony\var-dumper\Caster\UuidCaster.php	/^final class UuidCaster$/;"	c
castRamseyUuid	vendor\symfony\var-dumper\Caster\UuidCaster.php	/^    public static function castRamseyUuid(UuidInterface $c, array $a, Stub $stub, bool $isNested): array$/;"	f
XmlReaderCaster	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^class XmlReaderCaster$/;"	c
castXmlReader	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^    public static function castXmlReader(\\XMLReader $reader, array $a, Stub $stub, $isNested)$/;"	f
info	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^        $info = Caster::filter($info, Caster::EXCLUDE_EMPTY, [], $count);$/;"	v
info	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^        $info = [$/;"	v
nodeTypes	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^    private static $nodeTypes = [$/;"	v
props	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^            $props => [$/;"	v
props	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^        $props = Caster::PREFIX_VIRTUAL.'parserProperties';$/;"	v
to	vendor\symfony\var-dumper\Caster\XmlReaderCaster.php	/^ * Casts XmlReader class to array representation.$/;"	c
XmlResourceCaster	vendor\symfony\var-dumper\Caster\XmlResourceCaster.php	/^class XmlResourceCaster$/;"	c
castXml	vendor\symfony\var-dumper\Caster\XmlResourceCaster.php	/^    public static function castXml($h, array $a, Stub $stub, $isNested)$/;"	f
xmlErrors	vendor\symfony\var-dumper\Caster\XmlResourceCaster.php	/^    private static $xmlErrors = [$/;"	v
AbstractCloner	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^abstract class AbstractCloner implements ClonerInterface$/;"	c
__construct	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function __construct(array $casters = null)$/;"	f
a	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^                        $a = $callback($obj, $a, $stub, $isNested, $this->filter);$/;"	v
a	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^                    $a = $callback($res, $a, $stub, $isNested, $this->filter);$/;"	v
a	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $a = [(Stub::TYPE_OBJECT === $stub->type ? Caster::PREFIX_VIRTUAL : '').'⚠' => new ThrowingCasterException($e)] + $a;$/;"	v
a	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $a = Caster::castObject($obj, $class, $hasDebugInfo);$/;"	v
a	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $a = [];$/;"	v
addCasters	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function addCasters(array $casters)$/;"	f
castObject	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    protected function castObject(Stub $stub, $isNested)$/;"	f
castResource	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    protected function castResource(Stub $stub, $isNested)$/;"	f
casters	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $casters = static::$defaultCasters;$/;"	v
casters	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    private $casters = [];$/;"	v
casters	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function __construct(array $casters = null)$/;"	v
class	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $class = $stub->class;$/;"	v
classInfo	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    private $classInfo = [];$/;"	v
cloneVar	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function cloneVar($var, $filter = 0)$/;"	f
defaultCasters	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public static $defaultCasters = [$/;"	v
doClone	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    abstract protected function doClone($var);$/;"	f
fileInfo	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $fileInfo = $r->isInternal() || $r->isSubclassOf(Stub::class) ? [] : [$/;"	v
filter	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $this->filter = $filter;$/;"	v
filter	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    private $filter = 0;$/;"	v
filter	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function cloneVar($var, $filter = 0)$/;"	v
hasDebugInfo	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $hasDebugInfo = method_exists($class, '__debugInfo');$/;"	v
i	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $i = 2;$/;"	v
maxItems	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $this->maxItems = (int) $maxItems;$/;"	v
maxItems	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    protected $maxItems = 2500;$/;"	v
maxString	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $this->maxString = (int) $maxString;$/;"	v
maxString	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    protected $maxString = -1;$/;"	v
minDepth	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $this->minDepth = (int) $minDepth;$/;"	v
minDepth	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    protected $minDepth = 1;$/;"	v
obj	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $obj = $stub->value;$/;"	v
parents	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $parents = [$class];$/;"	v
prevErrorHandler	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $this->prevErrorHandler = null;$/;"	v
prevErrorHandler	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $this->prevErrorHandler = set_error_handler(function ($type, $msg, $file, $line, $context = []) {$/;"	v
prevErrorHandler	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    private $prevErrorHandler;$/;"	v
r	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^            $r = new \\ReflectionClass($class);$/;"	v
res	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $res = $stub->value;$/;"	v
setMaxItems	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function setMaxItems($maxItems)$/;"	f
setMaxString	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function setMaxString($maxString)$/;"	f
setMinDepth	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^    public function setMinDepth($minDepth)$/;"	f
type	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        $type = $stub->class;$/;"	v
type	vendor\symfony\var-dumper\Cloner\AbstractCloner.php	/^        foreach ($casters as $type => $callback) {$/;"	v
ClonerInterface	vendor\symfony\var-dumper\Cloner\ClonerInterface.php	/^interface ClonerInterface$/;"	i
cloneVar	vendor\symfony\var-dumper\Cloner\ClonerInterface.php	/^    public function cloneVar($var);$/;"	f
Cursor	vendor\symfony\var-dumper\Cloner\Cursor.php	/^class Cursor$/;"	c
attr	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $attr = [];$/;"	v
depth	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $depth = 0;$/;"	v
hardRefCount	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hardRefCount = 0;$/;"	v
hardRefHandle	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hardRefHandle = 0;$/;"	v
hardRefTo	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hardRefTo = 0;$/;"	v
hashCut	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hashCut = 0;$/;"	v
hashIndex	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hashIndex = 0;$/;"	v
hashKey	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hashKey;$/;"	v
hashKeyIsBinary	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hashKeyIsBinary;$/;"	v
hashLength	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hashLength = 0;$/;"	v
hashType	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $hashType;$/;"	v
refIndex	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $refIndex = 0;$/;"	v
skipChildren	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $skipChildren = false;$/;"	v
softRefCount	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $softRefCount = 0;$/;"	v
softRefHandle	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $softRefHandle = 0;$/;"	v
softRefTo	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $softRefTo = 0;$/;"	v
stop	vendor\symfony\var-dumper\Cloner\Cursor.php	/^    public $stop = false;$/;"	v
Data	vendor\symfony\var-dumper\Cloner\Data.php	/^class Data implements \\ArrayAccess, \\Countable, \\IteratorAggregate$/;"	c
__construct	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function __construct(array $data)$/;"	f
__get	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function __get($key)$/;"	f
__isset	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function __isset($key)$/;"	f
__toString	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function __toString()$/;"	f
children	vendor\symfony\var-dumper\Cloner\Data.php	/^                    $children = [];$/;"	v
children	vendor\symfony\var-dumper\Cloner\Data.php	/^                $children = $this->data[$item->position];$/;"	v
children	vendor\symfony\var-dumper\Cloner\Data.php	/^                $children = [];$/;"	v
children	vendor\symfony\var-dumper\Cloner\Data.php	/^        $children = $item->position ? $this->data[$item->position] : [];$/;"	v
children	vendor\symfony\var-dumper\Cloner\Data.php	/^        $children = $this->data[$item->position];$/;"	v
context	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $context = [];$/;"	v
count	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function count()$/;"	f
cursor	vendor\symfony\var-dumper\Cloner\Data.php	/^        $cursor = clone $parentCursor;$/;"	v
cursor	vendor\symfony\var-dumper\Cloner\Data.php	/^        $cursor = new Cursor();$/;"	v
cut	vendor\symfony\var-dumper\Cloner\Data.php	/^                            $cut = $this->dumpChildren($dumper, $cursor, $refs, $children, $cut, $item->type, null !== $item->class);$/;"	v
cut	vendor\symfony\var-dumper\Cloner\Data.php	/^                            $cut = -1;$/;"	v
cut	vendor\symfony\var-dumper\Cloner\Data.php	/^            $cut = $item->cut;$/;"	v
data	vendor\symfony\var-dumper\Cloner\Data.php	/^                $data = clone $this;$/;"	v
data	vendor\symfony\var-dumper\Cloner\Data.php	/^        $data = clone $this;$/;"	v
data	vendor\symfony\var-dumper\Cloner\Data.php	/^        $data = null;$/;"	v
data	vendor\symfony\var-dumper\Cloner\Data.php	/^        $this->data = $data;$/;"	v
data	vendor\symfony\var-dumper\Cloner\Data.php	/^        if (null !== $data = $this->seek($key)) {$/;"	v
data	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $data;$/;"	v
dump	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function dump(DumperInterface $dumper)$/;"	f
dumpChildren	vendor\symfony\var-dumper\Cloner\Data.php	/^    private function dumpChildren(DumperInterface $dumper, Cursor $parentCursor, array &$refs, array $children, int $hashCut, int $hashType, bool $dumpKeys): int$/;"	f
dumpItem	vendor\symfony\var-dumper\Cloner\Data.php	/^    private function dumpItem(DumperInterface $dumper, Cursor $cursor, array &$refs, $item)$/;"	f
firstSeen	vendor\symfony\var-dumper\Cloner\Data.php	/^                    $firstSeen = false;$/;"	v
firstSeen	vendor\symfony\var-dumper\Cloner\Data.php	/^        $firstSeen = true;$/;"	v
getIterator	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function getIterator()$/;"	f
getStub	vendor\symfony\var-dumper\Cloner\Data.php	/^    private function getStub($item)$/;"	f
getType	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function getType()$/;"	f
getValue	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function getValue($recursive = false)$/;"	f
item	vendor\symfony\var-dumper\Cloner\Data.php	/^                    $item = clone $item;$/;"	v
item	vendor\symfony\var-dumper\Cloner\Data.php	/^                $item = $this->getStub($item);$/;"	v
item	vendor\symfony\var-dumper\Cloner\Data.php	/^            $item = $item->value;$/;"	v
item	vendor\symfony\var-dumper\Cloner\Data.php	/^            $item = $this->getStub($data->data[$data->position][$data->key]);$/;"	v
item	vendor\symfony\var-dumper\Cloner\Data.php	/^            $item = $this->getStub($item->value);$/;"	v
item	vendor\symfony\var-dumper\Cloner\Data.php	/^        $item = $this->data[$this->position][$this->key];$/;"	v
k	vendor\symfony\var-dumper\Cloner\Data.php	/^        foreach ($children as $k => $v) {$/;"	v
key	vendor\symfony\var-dumper\Cloner\Data.php	/^        foreach ($children as $key => $child) {$/;"	v
key	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $key = 0;$/;"	v
keys	vendor\symfony\var-dumper\Cloner\Data.php	/^        $keys = [$key];$/;"	v
maxDepth	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $maxDepth = 20;$/;"	v
maxItemsPerDepth	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $maxItemsPerDepth = -1;$/;"	v
offsetExists	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function offsetExists($key)$/;"	f
offsetGet	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function offsetGet($key)$/;"	f
offsetSet	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function offsetSet($key, $value)$/;"	f
offsetUnset	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function offsetUnset($key)$/;"	f
position	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $position = 0;$/;"	v
recursive	vendor\symfony\var-dumper\Cloner\Data.php	/^                    $recursive = (array) $recursive;$/;"	v
refs	vendor\symfony\var-dumper\Cloner\Data.php	/^        $refs = [0];$/;"	v
seek	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function seek($key)$/;"	f
stub	vendor\symfony\var-dumper\Cloner\Data.php	/^        $stub = new Stub();$/;"	v
type	vendor\symfony\var-dumper\Cloner\Data.php	/^            $type = $item->class ?: \\gettype($item->value);$/;"	v
type	vendor\symfony\var-dumper\Cloner\Data.php	/^            $type = \\gettype($item);$/;"	v
useRefHandles	vendor\symfony\var-dumper\Cloner\Data.php	/^    private $useRefHandles = -1;$/;"	v
value	vendor\symfony\var-dumper\Cloner\Data.php	/^        $value = $this->getValue();$/;"	v
withChildren	vendor\symfony\var-dumper\Cloner\Data.php	/^                            $withChildren = false;$/;"	v
withChildren	vendor\symfony\var-dumper\Cloner\Data.php	/^                    $withChildren = $children && $cursor->depth !== $this->maxDepth && $this->maxItemsPerDepth;$/;"	v
withContext	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function withContext(array $context)$/;"	f
withMaxDepth	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function withMaxDepth($maxDepth)$/;"	f
withMaxItemsPerDepth	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function withMaxItemsPerDepth($maxItemsPerDepth)$/;"	f
withRefHandles	vendor\symfony\var-dumper\Cloner\Data.php	/^    public function withRefHandles($useRefHandles)$/;"	f
DumperInterface	vendor\symfony\var-dumper\Cloner\DumperInterface.php	/^interface DumperInterface$/;"	i
dumpScalar	vendor\symfony\var-dumper\Cloner\DumperInterface.php	/^    public function dumpScalar(Cursor $cursor, $type, $value);$/;"	f
dumpString	vendor\symfony\var-dumper\Cloner\DumperInterface.php	/^    public function dumpString(Cursor $cursor, $str, $bin, $cut);$/;"	f
enterHash	vendor\symfony\var-dumper\Cloner\DumperInterface.php	/^    public function enterHash(Cursor $cursor, $type, $class, $hasChild);$/;"	f
leaveHash	vendor\symfony\var-dumper\Cloner\DumperInterface.php	/^    public function leaveHash(Cursor $cursor, $type, $class, $hasChild, $cut);$/;"	f
Stub	vendor\symfony\var-dumper\Cloner\Stub.php	/^class Stub$/;"	c
__sleep	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public function __sleep(): array$/;"	f
attr	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $attr = [];$/;"	v
class	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $class = '';$/;"	v
cut	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $cut = 0;$/;"	v
defaultProperties	vendor\symfony\var-dumper\Cloner\Stub.php	/^    private static $defaultProperties = [];$/;"	v
handle	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $handle = 0;$/;"	v
k	vendor\symfony\var-dumper\Cloner\Stub.php	/^            foreach ((new \\ReflectionClass($c))->getStaticProperties() as $k => $v) {$/;"	v
k	vendor\symfony\var-dumper\Cloner\Stub.php	/^        foreach (self::$defaultProperties[$c] as $k => $v) {$/;"	v
position	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $position = 0;$/;"	v
properties	vendor\symfony\var-dumper\Cloner\Stub.php	/^        $properties = [];$/;"	v
refCount	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $refCount = 0;$/;"	v
type	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $type = self::TYPE_REF;$/;"	v
value	vendor\symfony\var-dumper\Cloner\Stub.php	/^    public $value;$/;"	v
VarCloner	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^class VarCloner extends AbstractCloner$/;"	c
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                                $a = $v;$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                                $a = [];$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                                $a = null;$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $a = $this->castObject($stub, 0 < $i);$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $a = $this->castResource($stub, 0 < $i);$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $a = \\array_slice($a, 0, $maxItems - $pos);$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $a = null;$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $a = $v;$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $a = null;$/;"	v
a	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $a = null;                      \/\/ Array cast for nested structures$/;"	v
arrayCache	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^    private static $arrayCache = [];$/;"	v
arrayStub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $arrayStub = new Stub();$/;"	v
cookie	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $cookie = (object) [];          \/\/ Unique object used to detect hard references$/;"	v
currentDepth	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $currentDepth = 0;              \/\/ Current tree depth$/;"	v
currentDepthFinalIndex	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                $currentDepthFinalIndex = $len - 1;$/;"	v
currentDepthFinalIndex	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $currentDepthFinalIndex = 0;    \/\/ Final $queue index for current tree depth$/;"	v
cut	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            if (0 <= $maxString && 0 < $cut = \\strlen($v) - $maxString) {$/;"	v
cut	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        } elseif (0 <= $maxString && isset($v[1 + ($maxString >> 2)]) && 0 < $cut = mb_strlen($v, 'UTF-8') - $maxString) {$/;"	v
doClone	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^    protected function doClone($var)$/;"	f
fromObjCast	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $fromObjCast = true;$/;"	v
fromObjCast	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                $fromObjCast = false;$/;"	v
fromObjCast	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $fromObjCast = false;$/;"	v
gid	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^            $gid = self::$gid = uniqid(mt_rand(), true); \/\/ Unique string used to detect the special $GLOBALS variable$/;"	v
gid	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^    private static $gid;$/;"	v
gk	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                                foreach ($v as $gk => &$gv) {$/;"	v
gk	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        foreach ($v as $gk => $gv) {$/;"	v
gk	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                    foreach ([$k => true] as $gk => $gv) {$/;"	v
h	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                                $stub->handle = $h = spl_object_id($stub->value);$/;"	v
h	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                    $h = spl_object_id($refs[$k]);$/;"	v
h	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        foreach ($values as $h => $v) {$/;"	v
hardRefs	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $hardRefs = [];            \/\/ Map of original zval ids to stub objects$/;"	v
indexedArrays	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $indexedArrays = [];       \/\/ Map of queue indexes that hold numerically indexed arrays$/;"	v
j	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $j = -1;$/;"	v
j	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                $j = -1;$/;"	v
k	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                foreach ($queue[$i] as $k => $v) {$/;"	v
k	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                foreach ($vals as $k => $v) {$/;"	v
k	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^            foreach ($vals as $k => $v) {$/;"	v
len	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $len = 1;                       \/\/ Length of $queue$/;"	v
maxItems	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $maxItems = $this->maxItems;$/;"	v
maxString	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $maxString = $this->maxString;$/;"	v
minDepth	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $minDepth = $this->minDepth;$/;"	v
minimumDepthReached	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                    $minimumDepthReached = true;$/;"	v
minimumDepthReached	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $minimumDepthReached = 0 === $minDepth; \/\/ Becomes true when minimum tree depth has been reached$/;"	v
objRefs	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $objRefs = [];             \/\/ Map of original object handles to their stub object counterpart$/;"	v
objects	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $objects = [];             \/\/ Keep a ref to objects to ensure their handle cannot be reused while cloning$/;"	v
pos	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $pos = 0;                       \/\/ Number of cloned items past the minimum depth$/;"	v
queue	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $queue = [[$var]];    \/\/ This breadth-first queue is the return value$/;"	v
refs	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $refs = $vals = array_values($queue[$i]);$/;"	v
refs	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                $refs = $vals;$/;"	v
refs	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^            $refs = $vals = $queue[$i];$/;"	v
refsCounter	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $refsCounter = 0;               \/\/ Hard references counter$/;"	v
resRefs	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $resRefs = [];             \/\/ Map of original resource handles to their stub object counterpart$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $stub = $objRefs[$h];$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $stub = $resRefs[$h];$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                            $stub = new Stub();$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $stub = $arrayStub;$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $stub = [$arrayStub->cut, $arrayStub->class => $arrayStub->position];$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $stub = self::$arrayCache[$arrayStub->class][$arrayStub->position];$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        self::$arrayCache[$arrayStub->class][$arrayStub->position] = $stub = [$arrayStub->class => $arrayStub->position];$/;"	v
stub	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $stub = null;                   \/\/ Stub capturing the main properties of an original item value$/;"	v
vals	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $vals = (array) $vals;$/;"	v
vals	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                        $vals = (object) $vals;$/;"	v
vals	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                $vals = [];$/;"	v
values	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^        $values = [];              \/\/ Map of stub objects' ids to original values$/;"	v
zvalIsRef	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                    $zvalIsRef = $vals[$k] === $cookie;$/;"	v
zvalIsRef	vendor\symfony\var-dumper\Cloner\VarCloner.php	/^                    $zvalIsRef = null !== \\ReflectionReference::fromArrayElement($vals, $k);$/;"	v
CliDescriptor	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^class CliDescriptor implements DumpDescriptorInterface$/;"	c
__construct	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^    public function __construct(CliDumper $dumper)$/;"	f
describe	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^    public function describe(OutputInterface $output, Data $data, array $context, int $clientId): void$/;"	f
dumper	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $this->dumper = $dumper;$/;"	v
dumper	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^    private $dumper;$/;"	v
file	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $file = $source['file_relative'] ?? $source['file'];$/;"	v
fileLink	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $fileLink = $source['file_link'] ?? null;$/;"	v
io	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $io = $output instanceof SymfonyStyle ? $output : new SymfonyStyle(new ArrayInput([]), $output);$/;"	v
lastIdentifier	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $this->lastIdentifier = $context['cli']['identifier'];$/;"	v
lastIdentifier	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $this->lastIdentifier = $request['identifier'];$/;"	v
lastIdentifier	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $lastIdentifier = $this->lastIdentifier;$/;"	v
lastIdentifier	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $this->lastIdentifier = $clientId;$/;"	v
lastIdentifier	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^    private $lastIdentifier;$/;"	v
request	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $request = $context['request'];$/;"	v
rows	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $rows = [['date', date('r', $context['timestamp'])]];$/;"	v
section	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $section = '$ '.$context['cli']['command_line'];$/;"	v
section	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $section = sprintf('%s %s', $request['method'], $request['uri']);$/;"	v
section	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $section = "Received from client #$clientId";$/;"	v
source	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $source = $context['source'];$/;"	v
sourceInfo	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^                $sourceInfo = sprintf('<href=%s>%s<\/>', $fileLink, $sourceInfo);$/;"	v
sourceInfo	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^            $sourceInfo = sprintf('%s on line %d', $source['name'], $source['line']);$/;"	v
supportsHref	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^        $this->supportsHref = method_exists(OutputFormatterStyle::class, 'setHref');$/;"	v
supportsHref	vendor\symfony\var-dumper\Command\Descriptor\CliDescriptor.php	/^    private $supportsHref;$/;"	v
DumpDescriptorInterface	vendor\symfony\var-dumper\Command\Descriptor\DumpDescriptorInterface.php	/^interface DumpDescriptorInterface$/;"	i
describe	vendor\symfony\var-dumper\Command\Descriptor\DumpDescriptorInterface.php	/^    public function describe(OutputInterface $output, Data $data, array $context, int $clientId): void;$/;"	f
HtmlDescriptor	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^class HtmlDescriptor implements DumpDescriptorInterface$/;"	c
__construct	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    public function __construct(HtmlDumper $dumper)$/;"	f
controller	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $controller = "<span class='dumped-tag'>{$this->dumper->dump($request['controller'], true, ['maxDepth' => 0])}<\/span>";$/;"	v
dedupIdentifier	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $dedupIdentifier = $context['cli']['identifier'];$/;"	v
dedupIdentifier	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $dedupIdentifier = $request['identifier'];$/;"	v
dedupIdentifier	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $dedupIdentifier = uniqid('', true);$/;"	v
describe	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    public function describe(OutputInterface $output, Data $data, array $context, int $clientId): void$/;"	f
dumper	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        $this->dumper = $dumper;$/;"	v
dumper	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    private $dumper;$/;"	v
extractDate	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    private function extractDate(array $context, string $format = 'r'): string$/;"	f
format	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    private function extractDate(array $context, string $format = 'r'): string$/;"	v
initialized	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $this->initialized = true;$/;"	v
initialized	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    private $initialized = false;$/;"	v
isoDate	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        $isoDate = $this->extractDate($context, 'c');$/;"	v
key	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        foreach ($tags as $key => $value) {$/;"	v
projectDir	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $projectDir = $source['project_dir'] ?? null;$/;"	v
renderTags	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^    private function renderTags(array $tags): string$/;"	f
renderedTags	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        $renderedTags = '';$/;"	v
request	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $request = $context['request'];$/;"	v
scripts	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $scripts = file_get_contents(__DIR__.'\/..\/..\/Resources\/js\/htmlDescriptor.js');$/;"	v
source	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $source = $context['source'];$/;"	v
sourceDescription	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^                $sourceDescription = sprintf('<a href="%s">%s<\/a>', $source['file_link'], $sourceDescription);$/;"	v
sourceDescription	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $sourceDescription = sprintf('%s on line %d', $source['name'], $source['line']);$/;"	v
sourceDescription	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        $sourceDescription = '';$/;"	v
styles	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $styles = file_get_contents(__DIR__.'\/..\/..\/Resources\/css\/htmlDescriptor.css');$/;"	v
tags	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        $tags = array_filter([$/;"	v
title	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $title = '<code>$ <\/code>'.$context['cli']['command_line'];$/;"	v
title	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^            $title = sprintf('<code>%s<\/code> <a href="%s">%s<\/a>', $request['method'], $uri = $request['uri'], $uri);$/;"	v
title	vendor\symfony\var-dumper\Command\Descriptor\HtmlDescriptor.php	/^        $title = '-';$/;"	v
ServerDumpCommand	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^class ServerDumpCommand extends Command$/;"	c
__construct	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    public function __construct(DumpServer $server, array $descriptors = [])$/;"	f
availableFormats	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^        $availableFormats = implode(', ', array_keys($this->descriptors));$/;"	v
configure	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    protected function configure()$/;"	f
defaultName	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    protected static $defaultName = 'server:dump';$/;"	v
descriptors	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^        $this->descriptors = $descriptors + [$/;"	v
descriptors	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    private $descriptors;$/;"	v
descriptors	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    public function __construct(DumpServer $server, array $descriptors = [])$/;"	v
errorIo	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^        $errorIo = $io->getErrorStyle();$/;"	v
execute	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    protected function execute(InputInterface $input, OutputInterface $output): int$/;"	f
format	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^        $format = $input->getOption('format');$/;"	v
io	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^        $io = new SymfonyStyle($input, $output);$/;"	v
server	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^        $this->server = $server;$/;"	v
server	vendor\symfony\var-dumper\Command\ServerDumpCommand.php	/^    private $server;$/;"	v
AbstractDumper	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^abstract class AbstractDumper implements DataDumperInterface, DumperInterface$/;"	c
__construct	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function __construct($output = null, string $charset = null, int $flags = 0)$/;"	f
c	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        if ('CP1252' !== $this->charset && false !== $c = @iconv('CP1252', 'UTF-8', $s)) {$/;"	v
c	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        if (false !== $c = @iconv($this->charset, 'UTF-8', $s)) {$/;"	v
charset	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $charset = null === $charset || 'UTF-8' === $charset || 'UTF8' === $charset ? 'CP1252' : $charset;$/;"	v
charset	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $charset = strtoupper($charset);$/;"	v
charset	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $this->charset = $charset;$/;"	v
charset	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    private $charset = '';$/;"	v
charset	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function __construct($output = null, string $charset = null, int $flags = 0)$/;"	v
decimalPoint	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $this->decimalPoint = $this->decimalPoint['decimal_point'];$/;"	v
decimalPoint	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $this->decimalPoint = localeconv();$/;"	v
decimalPoint	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected $decimalPoint; \/\/ This is locale dependent$/;"	v
defaultOutput	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public static $defaultOutput = 'php:\/\/output';$/;"	v
dump	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function dump(Data $data, $output = null)$/;"	f
dumpLine	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected function dumpLine($depth)$/;"	f
echoLine	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected function echoLine($line, $depth, $indentPad)$/;"	f
flags	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $this->flags = $flags;$/;"	v
flags	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected $flags;$/;"	v
iconv	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            throw new \\RuntimeException('Unable to convert a non-UTF-8 string to UTF-8: required function iconv() does not exist. You should install ext-iconv or symfony\/polyfill-iconv.');$/;"	f
indentPad	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $this->indentPad = $pad;$/;"	v
indentPad	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected $indentPad = '  ';$/;"	v
line	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $this->line = '';$/;"	v
line	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected $line = '';$/;"	v
lineDumper	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            $this->lineDumper = $output;$/;"	v
lineDumper	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            $this->lineDumper = [$this, 'echoLine'];$/;"	v
lineDumper	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected $lineDumper;$/;"	v
output	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^                $output = fopen($output, 'wb');$/;"	v
output	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            $output = fopen('php:\/\/memory', 'r+b');$/;"	v
output	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function dump(Data $data, $output = null)$/;"	v
outputStream	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            $this->outputStream = $output;$/;"	v
outputStream	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            $this->outputStream = null;$/;"	v
outputStream	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected $outputStream;$/;"	v
prev	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $prev = $this->charset;$/;"	v
prev	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $prev = $this->indentPad;$/;"	v
prev	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^        $prev = null !== $this->outputStream ? $this->outputStream : $this->lineDumper;$/;"	v
prevOutput	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^            $prevOutput = $this->setOutput($output);$/;"	v
result	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^                $result = stream_get_contents($output, -1, 0);$/;"	v
setCharset	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function setCharset($charset)$/;"	f
setIndentPad	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function setIndentPad($pad)$/;"	f
setOutput	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    public function setOutput($output)$/;"	f
utf8Encode	vendor\symfony\var-dumper\Dumper\AbstractDumper.php	/^    protected function utf8Encode($s)$/;"	f
CliDumper	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^class CliDumper extends AbstractDumper$/;"	c
__construct	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function __construct($output = null, string $charset = null, int $flags = 0)$/;"	f
attr	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $attr = ['binary' => $cursor->hashKeyIsBinary];$/;"	v
attr	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $attr = $cursor->attr;$/;"	v
attr	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function style($style, $value, $attr = [])$/;"	v
bin	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $bin = '#'.$bin;$/;"	v
bin	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $bin = '-'.$bin;$/;"	v
bin	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $bin = $cursor->hashKeyIsBinary ? 'b' : '';$/;"	v
c	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $c = $c[$i = 0];$/;"	v
charset	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function __construct($output = null, string $charset = null, int $flags = 0)$/;"	v
class	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $class = $this->utf8Encode($class);$/;"	v
collapseNextHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $this->collapseNextHash = true;$/;"	v
collapseNextHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $this->collapseNextHash = $hasChild = false;$/;"	v
collapseNextHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected $collapseNextHash = false;$/;"	v
colors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $colors = $_SERVER['argv'];$/;"	v
colors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $this->colors = $this->supportsColors();$/;"	v
colors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $this->colors = (bool) $colors;$/;"	v
colors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected $colors;$/;"	v
controlCharsMap	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected static $controlCharsMap = [$/;"	v
controlCharsRx	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected static $controlCharsRx = '\/[\\x00-\\x1F\\x7F]+\/';$/;"	v
defaultColors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public static $defaultColors;$/;"	v
defaultOutput	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public static $defaultOutput = 'php:\/\/stdout';$/;"	v
displayOptions	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $this->displayOptions = $displayOptions + $this->displayOptions;$/;"	v
displayOptions	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    private $displayOptions = [$/;"	v
dumpEllipsis	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function dumpEllipsis(Cursor $cursor, $hasChild, $cut)$/;"	f
dumpKey	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function dumpKey(Cursor $cursor)$/;"	f
dumpLine	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function dumpLine($depth, $endOfValue = false)$/;"	f
dumpScalar	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function dumpScalar(Cursor $cursor, $type, $value)$/;"	f
dumpString	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function dumpString(Cursor $cursor, $str, $bin, $cut)$/;"	f
endCchr	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            if ($cchrCount && $endCchr === substr($value, -\\strlen($endCchr))) {$/;"	v
endCchr	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $endCchr = $this->colors ? "\\033[m\\033[{$this->styles[$style]}m" : '';$/;"	v
endOfValue	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function dumpLine($depth, $endOfValue = false)$/;"	v
endValue	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function endValue(Cursor $cursor)$/;"	f
enterHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function enterHash(Cursor $cursor, $type, $class, $hasChild)$/;"	f
expandNextHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $this->expandNextHash = true;$/;"	v
expandNextHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected $expandNextHash = false;$/;"	v
getSourceLink	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    private function getSourceLink(string $file, int $line)$/;"	f
h	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $h = 'Output' === $h['stream_type'] && 'PHP' === $h['wrapper_type'] ? fopen('php:\/\/stdout', 'wb') : $this->outputStream;$/;"	v
h	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $h = stream_get_meta_data($this->outputStream) + ['wrapper_type' => null];$/;"	v
handlesHrefGracefully	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $this->handlesHrefGracefully = 'JetBrains-JediTerm' !== getenv('TERMINAL_EMULATOR') && !getenv('KONSOLE_VERSION');$/;"	v
handlesHrefGracefully	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    private $handlesHrefGracefully;$/;"	v
hasColorSupport	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    private function hasColorSupport($stream): bool$/;"	f
href	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            if (isset($attr['file']) && $href = $this->getSourceLink($attr['file'], isset($attr['line']) ? $attr['line'] : 0)) {$/;"	v
i	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $i = $lineCut = 0;$/;"	v
i	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $i = \\count($colors);$/;"	v
isWindowsTrueColor	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    private function isWindowsTrueColor(): bool$/;"	f
key	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                        $key = explode("\\0", substr($key, 1), 2);$/;"	v
key	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    $key = "\\0~\\0".$key;$/;"	v
key	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $key = $this->utf8Encode($key);$/;"	v
key	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        if (null !== $key = $cursor->hashKey) {$/;"	v
leaveHash	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function leaveHash(Cursor $cursor, $type, $class, $hasChild, $cut)$/;"	f
len	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                if (0 < $this->maxStringWidth && $this->maxStringWidth < $len = mb_strlen($str, 'UTF-8')) {$/;"	v
line	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $this->line = sprintf("\\033[%sm%s\\033[m", $this->styles['default'], $this->line);$/;"	v
lineCut	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                        $lineCut = 0;$/;"	v
lineCut	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    $lineCut = $len - $this->maxStringWidth;$/;"	v
lineCut	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    $lineCut = 0;$/;"	v
m	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $m = \\count($str) - 1;$/;"	v
map	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $map = static::$controlCharsMap;$/;"	v
maxStringWidth	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $this->maxStringWidth = (int) $maxStringWidth;$/;"	v
maxStringWidth	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected $maxStringWidth = 0;$/;"	v
prefix	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $prefix = '.'.substr($prefix, \\strlen($_SERVER[$pwd]));$/;"	v
prefix	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $prefix = $class && !(self::DUMP_LIGHT_ARRAY & $this->flags) ? $this->style('note', 'array:'.$class, $attr).' [' : '[';$/;"	v
prefix	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $prefix = $class && 'stdClass' !== $class ? $this->style('note', $class, $attr).(empty($attr['cut_hash']) ? ' {' : '') : '{';$/;"	v
prefix	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $prefix = $this->style('note', $class.' resource', $attr).($hasChild ? ' {' : ' ');$/;"	v
prefix	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $prefix = substr($prefix, 0, -1);$/;"	v
prefix	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $prefix = substr($value, 0, -$attr['ellipsis']);$/;"	v
result	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $result = $version >= '10.0.15063';$/;"	v
result	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $result = 183 <= getenv('ANSICON_VER')$/;"	v
s	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $s = $startCchr;$/;"	v
setColors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function setColors($colors)$/;"	f
setDisplayOptions	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function setDisplayOptions(array $displayOptions)$/;"	f
setMaxStringWidth	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function setMaxStringWidth($maxStringWidth)$/;"	f
setStyles	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    public function setStyles(array $styles)$/;"	f
startCchr	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $startCchr = $this->colors ? "\\033[m\\033[{$this->styles['default']}m" : '';$/;"	v
stat	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $stat = @fstat($stream);$/;"	v
str	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    $str = mb_substr($str, 0, $this->maxStringWidth, 'UTF-8');$/;"	v
str	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $str = $this->utf8Encode($str);$/;"	v
str	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $str = explode("\\n", $str);$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $style = 'meta';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $style = 'private';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                                $style = 'protected';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    $style = 'index';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $style = 'default';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $style = 'num';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $style = 'key';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $style = 'const';$/;"	v
style	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function style($style, $value, $attr = [])$/;"	f
styles	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $this->styles = $styles + $this->styles;$/;"	v
styles	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected $styles = [$/;"	v
supportsColors	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^    protected function supportsColors()$/;"	f
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                        $value = (string) $value;$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    case -INF === $value: $value = '-INF'; break;$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    case INF === $value:  $value = 'INF'; break;$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                    case is_nan($value):  $value = 'NAN'; break;$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = "\\033[{$this->styles[$style]}m".$value;$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = "\\033]8;;{$attr['href']}\\033\\\\{$value}\\033]8;;\\033\\\\";$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = $this->utf8Encode($type);$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = $value ? 'true' : 'false';$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = 'null';$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = substr($value, -$attr['ellipsis'] + $attr['ellipsis-tail']);$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = substr($value, -$attr['ellipsis']);$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = substr($value, 0, -\\strlen($endCchr));$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^                $value = substr($value, \\strlen($startCchr));$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $value = $this->style('default', $prefix).$this->style($style, $value);$/;"	v
value	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^        $value = preg_replace_callback(static::$controlCharsRx, function ($c) use ($map, $startCchr, $endCchr) {$/;"	v
version	vendor\symfony\var-dumper\Dumper\CliDumper.php	/^            $version = sprintf($/;"	v
CliContextProvider	vendor\symfony\var-dumper\Dumper\ContextProvider\CliContextProvider.php	/^final class CliContextProvider implements ContextProviderInterface$/;"	c
commandLine	vendor\symfony\var-dumper\Dumper\ContextProvider\CliContextProvider.php	/^            'command_line' => $commandLine = implode(' ', $_SERVER['argv']),$/;"	v
getContext	vendor\symfony\var-dumper\Dumper\ContextProvider\CliContextProvider.php	/^    public function getContext(): ?array$/;"	f
ContextProviderInterface	vendor\symfony\var-dumper\Dumper\ContextProvider\ContextProviderInterface.php	/^interface ContextProviderInterface$/;"	i
getContext	vendor\symfony\var-dumper\Dumper\ContextProvider\ContextProviderInterface.php	/^    public function getContext(): ?array;$/;"	f
RequestContextProvider	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^final class RequestContextProvider implements ContextProviderInterface$/;"	c
__construct	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^    public function __construct(RequestStack $requestStack)$/;"	f
cloner	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^        $this->cloner = new VarCloner();$/;"	v
cloner	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^    private $cloner;$/;"	v
controller	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^        $controller = $request->attributes->get('_controller');$/;"	v
getContext	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^    public function getContext(): ?array$/;"	f
request	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^        if (null === $request = $this->requestStack->getCurrentRequest()) {$/;"	v
requestStack	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^        $this->requestStack = $requestStack;$/;"	v
requestStack	vendor\symfony\var-dumper\Dumper\ContextProvider\RequestContextProvider.php	/^    private $requestStack;$/;"	v
SourceContextProvider	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^final class SourceContextProvider implements ContextProviderInterface$/;"	c
__construct	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    public function __construct(string $charset = null, string $projectDir = null, FileLinkFormatter $fileLinkFormatter = null, int $limit = 9)$/;"	f
charset	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $this->charset = $charset;$/;"	v
charset	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    private $charset;$/;"	v
charset	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    public function __construct(string $charset = null, string $projectDir = null, FileLinkFormatter $fileLinkFormatter = null, int $limit = 9)$/;"	v
cloner	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $cloner = new VarCloner();$/;"	v
context	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $context = ['name' => $name, 'file' => $file, 'line' => $line];$/;"	v
dumper	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $dumper = new HtmlDumper(function ($line) use (&$html) { $html .= $line; }, $this->charset);$/;"	v
file	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                            $file = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getPath() : null;$/;"	v
file	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                        $file = $trace[$i]['file'];$/;"	v
file	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                $file = $trace[$i]['file'] ?? $file;$/;"	v
file	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $file = $trace[1]['file'];$/;"	v
fileExcerpt	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                                $fileExcerpt = '<ol start="'.max($line - 3, 1).'">'.implode("\\n", $fileExcerpt).'<\/ol>';$/;"	v
fileExcerpt	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                                $fileExcerpt = [];$/;"	v
fileExcerpt	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $fileExcerpt = false;$/;"	v
fileLink	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        if ($this->fileLinkFormatter && $fileLink = $this->fileLinkFormatter->format($context['file'], $context['line'])) {$/;"	v
fileLinkFormatter	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $this->fileLinkFormatter = $fileLinkFormatter;$/;"	v
fileLinkFormatter	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    private $fileLinkFormatter;$/;"	v
getContext	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    public function getContext(): ?array$/;"	f
html	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $html = '';$/;"	v
htmlEncode	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    private function htmlEncode(string $s): string$/;"	f
info	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                        $info = $template->getDebugInfo();$/;"	v
limit	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $this->limit = $limit;$/;"	v
limit	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    private $limit;$/;"	v
line	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                            $line = $info[$trace[$i - 1]['line']];$/;"	v
line	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                        $line = $trace[$i]['line'];$/;"	v
line	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                $line = $trace[$i]['line'] ?? $line;$/;"	v
line	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $line = $trace[1]['line'];$/;"	v
max	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                                for ($i = max($line - 3, 1), $max = min($line + 3, \\count($src)); $i <= $max; ++$i) {$/;"	v
name	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                        $name = $template->getTemplateName();$/;"	v
name	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^            $name = str_replace('\\\\', '\/', $file);$/;"	v
name	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^            $name = substr($name, strrpos($name, '\/') + 1);$/;"	v
name	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $name = false;$/;"	v
projectDir	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $this->projectDir = $projectDir;$/;"	v
projectDir	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^    private $projectDir;$/;"	v
src	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                                $src = explode("\\n", $src);$/;"	v
src	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                        $src = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getCode() : (method_exists($template, 'getSource') ? $template->getSource() : false);$/;"	v
template	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^                        $template = $trace[$i]['object'];$/;"	v
trace	vendor\symfony\var-dumper\Dumper\ContextProvider\SourceContextProvider.php	/^        $trace = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT | DEBUG_BACKTRACE_IGNORE_ARGS, $this->limit);$/;"	v
ContextualizedDumper	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^class ContextualizedDumper implements DataDumperInterface$/;"	c
__construct	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^    public function __construct(DataDumperInterface $wrappedDumper, array $contextProviders)$/;"	f
context	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^        $context = [];$/;"	v
contextProviders	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^        $this->contextProviders = $contextProviders;$/;"	v
contextProviders	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^    private $contextProviders;$/;"	v
dump	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^    public function dump(Data $data)$/;"	f
wrappedDumper	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^        $this->wrappedDumper = $wrappedDumper;$/;"	v
wrappedDumper	vendor\symfony\var-dumper\Dumper\ContextualizedDumper.php	/^    private $wrappedDumper;$/;"	v
DataDumperInterface	vendor\symfony\var-dumper\Dumper\DataDumperInterface.php	/^interface DataDumperInterface$/;"	i
dump	vendor\symfony\var-dumper\Dumper\DataDumperInterface.php	/^    public function dump(Data $data);$/;"	f
HtmlDumper	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^class HtmlDumper extends CliDumper$/;"	c
SearchState	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        SearchState = function () {$/;"	j
__construct	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function __construct($output = null, string $charset = null, int $flags = 0)$/;"	f
a	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    function a(e, f) {$/;"	f
addEventListener	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    addEventListener = function (e, n, cb) {$/;"	j
addEventListener	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    addEventListener = function (element, eventName, callback) {$/;"	j
args	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $args = ['"'.$this->dumpId.'"'];$/;"	v
attr	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected function style($style, $value, $attr = [])$/;"	v
c	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $c = $c[$i = 0];$/;"	v
c	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        } elseif ('note' === $style && 0 < ($attr['depth'] ?? 0) && false !== $c = strrpos($value, '\\\\')) {$/;"	v
charset	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function __construct($output = null, string $charset = null, int $flags = 0)$/;"	v
class	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^                $class = sprintf('"%s sf-dump-ellipsis-%s"', $class, $attr['ellipsis-type']);$/;"	v
class	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $class = 'sf-dump-ellipsis';$/;"	v
class	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        foreach ($this->styles as $class => $style) {$/;"	v
collapse	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function collapse(a, recursive) {$/;"	f
collapseAll	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function collapseAll(root) {$/;"	f
colors	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $colors = true;$/;"	v
count	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            count: function () {$/;"	j
current	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            current: function () {$/;"	j
defaultOutput	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public static $defaultOutput = 'php:\/\/output';$/;"	v
displayOptions	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->displayOptions = $displayOptions + $this->displayOptions;$/;"	v
displayOptions	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    private $displayOptions = [$/;"	v
dump	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function dump(Data $data, $output = null, array $extraDisplayOptions = [])$/;"	f
dumpHeader	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->dumpHeader = $header;$/;"	v
dumpHeader	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        return $this->dumpHeader = preg_replace('\/\\s+\/', ' ', $line).'<\/style>'.$this->dumpHeader;$/;"	v
dumpHeader	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $dumpHeader;$/;"	v
dumpId	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->dumpId = 'sf-dump-'.mt_rand();$/;"	v
dumpId	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $dumpId = 'sf-dump';$/;"	v
dumpLine	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected function dumpLine($depth, $endOfValue = false)$/;"	f
dumpPrefix	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->dumpPrefix = $prefix;$/;"	v
dumpPrefix	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $dumpPrefix = '<pre class=sf-dump id=%s data-indent-pad="%s">';$/;"	v
dumpString	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function dumpString(Cursor $cursor, $str, $bin, $cut)$/;"	f
dumpSuffix	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->dumpSuffix = $suffix;$/;"	v
dumpSuffix	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $dumpSuffix = '<\/pre><script>Sfdump(%s)<\/script>';$/;"	v
e.preventDefault	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            e.preventDefault = function () {e.returnValue = false;};$/;"	j
endOfValue	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected function dumpLine($depth, $endOfValue = false)$/;"	v
enterHash	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function enterHash(Cursor $cursor, $type, $class, $hasChild)$/;"	f
eol	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $eol = ' class=sf-dump-compact>';$/;"	v
eol	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $eol = ' class=sf-dump-expanded>';$/;"	v
eol	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $eol = '>';$/;"	v
esc	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function esc($str)$/;"	f
expand	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function expand(a, recursive) {$/;"	f
expandNextHash	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $this->expandNextHash = false;$/;"	v
extraDisplayOptions	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->extraDisplayOptions = $extraDisplayOptions;$/;"	v
extraDisplayOptions	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    private $extraDisplayOptions = [];$/;"	v
getDumpHeader	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected function getDumpHeader()$/;"	f
getSourceLink	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    private function getSourceLink(string $file, int $line)$/;"	f
headerIsDumped	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->headerIsDumped = false;$/;"	v
headerIsDumped	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->headerIsDumped = null !== $this->outputStream ? $this->outputStream : $this->lineDumper;$/;"	v
headerIsDumped	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $headerIsDumped = false;$/;"	v
highlight	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function highlight(root, activeNode, nodes) {$/;"	f
href	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        if (isset($attr['file']) && $href = $this->getSourceLink($attr['file'], isset($attr['line']) ? $attr['line'] : 0)) {$/;"	v
isCtrlKey	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    function isCtrlKey(e) {$/;"	f
isEmpty	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            isEmpty: function () {$/;"	j
label	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $label = esc(substr($value, -$attr['ellipsis']));$/;"	v
lastDepth	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->lastDepth = $depth;$/;"	v
lastDepth	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $lastDepth = -1;$/;"	v
leaveHash	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function leaveHash(Cursor $cursor, $type, $class, $hasChild, $cut)$/;"	f
line	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $this->line = $this->getDumpHeader().$this->line;$/;"	v
line	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $this->line = sprintf($this->dumpPrefix, $this->dumpId, $this->indentPad).$this->line;$/;"	v
line	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $line = str_replace('{$options}', json_encode($this->displayOptions, JSON_FORCE_OBJECT), <<<'EOHTML'$/;"	v
line	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->line = mb_convert_encoding($this->line, 'HTML-ENTITIES', 'UTF-8');$/;"	v
map	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $map = static::$controlCharsMap;$/;"	v
next	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            next: function () {$/;"	j
options	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $options = $this->extraDisplayOptions + $this->displayOptions;$/;"	v
output	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function dump(Data $data, $output = null, array $extraDisplayOptions = [])$/;"	v
preventDefault	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            e.preventDefault = function () {e.returnValue = false;};$/;"	j
previous	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            previous: function () {$/;"	j
r	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^                $r = Cursor::HASH_OBJECT !== $type ? 1 - (Cursor::HASH_RESOURCE !== $type) : 2;$/;"	v
r	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $r = ('#' !== $v[0] ? 1 - ('@' !== $v[0]) : 2).substr($value, 1);$/;"	v
reset	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            reset: function () {$/;"	j
resetHighlightedNodes	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function resetHighlightedNodes(root) {$/;"	f
result	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $result = parent::dump($data, $output);$/;"	v
reveal	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function reveal(node) {$/;"	f
s	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $s = $b = '<span class="sf-dump-default';$/;"	v
setDisplayOptions	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function setDisplayOptions(array $displayOptions)$/;"	f
setDumpBoundaries	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function setDumpBoundaries($prefix, $suffix)$/;"	f
setDumpHeader	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function setDumpHeader($header)$/;"	f
setStyles	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function setStyles(array $styles)$/;"	f
setTheme	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    public function setTheme(string $themeName)$/;"	f
showCurrent	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        function showCurrent(state)$/;"	f
style	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $style = str_replace(' title="', " title=\\"$v\\n", $style);$/;"	v
style	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected function style($style, $value, $attr = [])$/;"	f
styles	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->styles = $styles + $this->styles;$/;"	v
styles	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $this->styles = static::$themes['dark'] ?? self::$themes['dark'];$/;"	v
styles	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected $styles;$/;"	v
tail	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^                $tail = \\strlen(esc(substr($value, -$attr['ellipsis'], $attr['ellipsis-tail'])));$/;"	v
target	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $target = isset($attr['file']) ? '' : ' target="_blank"';$/;"	v
themes	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    protected static $themes = [$/;"	v
toggle	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^function toggle(a, recursive) {$/;"	f
v	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $v = sprintf('<a href="%s"%s rel="noopener noreferrer">%s<\/a>', esc($this->utf8Encode($attr['href'])), $target, $v);$/;"	v
v	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $v = sprintf('<code class="%s">%s<\/code>', esc($attr['lang']), $v);$/;"	v
v	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^            $v = sprintf('<span class=%s>%s<\/span>', $class, substr($v, 0, -\\strlen($label)));$/;"	v
v	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $v = "<span class=sf-dump-{$style}>".preg_replace_callback(static::$controlCharsRx, function ($c) use ($map) {$/;"	v
v	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^        $v = esc($value);$/;"	v
xpathHasClass	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    function xpathHasClass(className) {$/;"	f
xpathString	vendor\symfony\var-dumper\Dumper\HtmlDumper.php	/^    function xpathString(str) {$/;"	f
ServerDumper	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^class ServerDumper implements DataDumperInterface$/;"	c
__construct	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^    public function __construct(string $host, DataDumperInterface $wrappedDumper = null, array $contextProviders = [])$/;"	f
connection	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^        $this->connection = new Connection($host, $contextProviders);$/;"	v
connection	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^    private $connection;$/;"	v
dump	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^    public function dump(Data $data)$/;"	f
getContextProviders	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^    public function getContextProviders(): array$/;"	f
wrappedDumper	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^        $this->wrappedDumper = $wrappedDumper;$/;"	v
wrappedDumper	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^    private $wrappedDumper;$/;"	v
wrappedDumper	vendor\symfony\var-dumper\Dumper\ServerDumper.php	/^    public function __construct(string $host, DataDumperInterface $wrappedDumper = null, array $contextProviders = [])$/;"	v
ThrowingCasterException	vendor\symfony\var-dumper\Exception\ThrowingCasterException.php	/^class ThrowingCasterException extends \\Exception$/;"	c
__construct	vendor\symfony\var-dumper\Exception\ThrowingCasterException.php	/^    public function __construct(\\Throwable $prev)$/;"	f
dd	vendor\symfony\var-dumper\Resources\functions\dump.php	/^    function dd(...$vars)$/;"	f
dump	vendor\symfony\var-dumper\Resources\functions\dump.php	/^    function dump($var, ...$moreVars)$/;"	f
Connection	vendor\symfony\var-dumper\Server\Connection.php	/^class Connection$/;"	c
__construct	vendor\symfony\var-dumper\Server\Connection.php	/^    public function __construct(string $host, array $contextProviders = [])$/;"	f
context	vendor\symfony\var-dumper\Server\Connection.php	/^        $context = ['timestamp' => microtime(true)];$/;"	v
context	vendor\symfony\var-dumper\Server\Connection.php	/^        $context = array_filter($context);$/;"	v
contextProviders	vendor\symfony\var-dumper\Server\Connection.php	/^        $this->contextProviders = $contextProviders;$/;"	v
contextProviders	vendor\symfony\var-dumper\Server\Connection.php	/^    private $contextProviders;$/;"	v
contextProviders	vendor\symfony\var-dumper\Server\Connection.php	/^    public function __construct(string $host, array $contextProviders = [])$/;"	v
createSocket	vendor\symfony\var-dumper\Server\Connection.php	/^    private function createSocket()$/;"	f
encodedPayload	vendor\symfony\var-dumper\Server\Connection.php	/^        $encodedPayload = base64_encode(serialize([$data, $context]))."\\n";$/;"	v
getContextProviders	vendor\symfony\var-dumper\Server\Connection.php	/^    public function getContextProviders(): array$/;"	f
host	vendor\symfony\var-dumper\Server\Connection.php	/^            $host = 'tcp:\/\/'.$host;$/;"	v
host	vendor\symfony\var-dumper\Server\Connection.php	/^        $this->host = $host;$/;"	v
host	vendor\symfony\var-dumper\Server\Connection.php	/^    private $host;$/;"	v
name	vendor\symfony\var-dumper\Server\Connection.php	/^        foreach ($this->contextProviders as $name => $provider) {$/;"	v
nullErrorHandler	vendor\symfony\var-dumper\Server\Connection.php	/^    private static function nullErrorHandler($t, $m)$/;"	f
socket	vendor\symfony\var-dumper\Server\Connection.php	/^                $this->socket = $this->createSocket();$/;"	v
socket	vendor\symfony\var-dumper\Server\Connection.php	/^    private $socket;$/;"	v
socketIsFresh	vendor\symfony\var-dumper\Server\Connection.php	/^        $socketIsFresh = !$this->socket;$/;"	v
write	vendor\symfony\var-dumper\Server\Connection.php	/^    public function write(Data $data): bool$/;"	f
DumpServer	vendor\symfony\var-dumper\Server\DumpServer.php	/^class DumpServer$/;"	c
__construct	vendor\symfony\var-dumper\Server\DumpServer.php	/^    public function __construct(string $host, LoggerInterface $logger = null)$/;"	f
clientId	vendor\symfony\var-dumper\Server\DumpServer.php	/^        foreach ($this->getMessages() as $clientId => $message) {$/;"	v
getHost	vendor\symfony\var-dumper\Server\DumpServer.php	/^    public function getHost(): string$/;"	f
getMessages	vendor\symfony\var-dumper\Server\DumpServer.php	/^    private function getMessages(): iterable$/;"	f
host	vendor\symfony\var-dumper\Server\DumpServer.php	/^            $host = 'tcp:\/\/'.$host;$/;"	v
host	vendor\symfony\var-dumper\Server\DumpServer.php	/^        $this->host = $host;$/;"	v
host	vendor\symfony\var-dumper\Server\DumpServer.php	/^    private $host;$/;"	v
listen	vendor\symfony\var-dumper\Server\DumpServer.php	/^    public function listen(callable $callback): void$/;"	f
logger	vendor\symfony\var-dumper\Server\DumpServer.php	/^        $this->logger = $logger;$/;"	v
logger	vendor\symfony\var-dumper\Server\DumpServer.php	/^    private $logger;$/;"	v
logger	vendor\symfony\var-dumper\Server\DumpServer.php	/^    public function __construct(string $host, LoggerInterface $logger = null)$/;"	v
payload	vendor\symfony\var-dumper\Server\DumpServer.php	/^            $payload = @unserialize(base64_decode($message), ['allowed_classes' => [Data::class, Stub::class]]);$/;"	v
read	vendor\symfony\var-dumper\Server\DumpServer.php	/^            $read = $sockets;$/;"	v
socket	vendor\symfony\var-dumper\Server\DumpServer.php	/^    private $socket;$/;"	v
sockets	vendor\symfony\var-dumper\Server\DumpServer.php	/^        $sockets = [(int) $this->socket => $this->socket];$/;"	v
start	vendor\symfony\var-dumper\Server\DumpServer.php	/^    public function start(): void$/;"	f
stream	vendor\symfony\var-dumper\Server\DumpServer.php	/^                    $stream = stream_socket_accept($this->socket);$/;"	v
stream	vendor\symfony\var-dumper\Server\DumpServer.php	/^                    yield (int) $stream => fgets($stream);$/;"	v
write	vendor\symfony\var-dumper\Server\DumpServer.php	/^        $write = [];$/;"	v
assertDumpEquals	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    public function assertDumpEquals($expected, $data, $filter = 0, $message = '')$/;"	f
assertDumpMatchesFormat	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    public function assertDumpMatchesFormat($expected, $data, $filter = 0, $message = '')$/;"	f
cloner	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^        $cloner = new VarCloner();$/;"	v
data	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^        $data = $cloner->cloneVar($data, $filter)->withRefHandles(false);$/;"	v
data	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^        if (null !== $key && null === $data = $data->seek($key)) {$/;"	v
dumper	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^        $dumper = new CliDumper(null, null, $flags);$/;"	v
expected	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^            $expected = $this->getDump($expected, null, $filter);$/;"	v
filter	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    public function assertDumpEquals($expected, $data, $filter = 0, $message = '')$/;"	v
filter	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    public function assertDumpMatchesFormat($expected, $data, $filter = 0, $message = '')$/;"	v
flags	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^            $flags = getenv('DUMP_LIGHT_ARRAY') ? CliDumper::DUMP_LIGHT_ARRAY : 0;$/;"	v
flags	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^        if (null === $flags = $this->varDumperConfig['flags']) {$/;"	v
flags	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    protected function setUpVarDumper(array $casters, int $flags = null): void$/;"	v
getDump	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    protected function getDump($data, $key = null, $filter = 0)$/;"	f
key	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    protected function getDump($data, $key = null, $filter = 0)$/;"	v
prepareExpectation	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    private function prepareExpectation($expected, int $filter): string$/;"	f
setUpVarDumper	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    protected function setUpVarDumper(array $casters, int $flags = null): void$/;"	f
tearDownVarDumper	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    protected function tearDownVarDumper(): void$/;"	f
varDumperConfig	vendor\symfony\var-dumper\Test\VarDumperTestTrait.php	/^    private $varDumperConfig = [$/;"	v
VarDumper	vendor\symfony\var-dumper\VarDumper.php	/^class VarDumper$/;"	c
callable	vendor\symfony\var-dumper\VarDumper.php	/^    public static function setHandler(callable $callable = null)$/;"	v
cloner	vendor\symfony\var-dumper\VarDumper.php	/^            $cloner = new VarCloner();$/;"	v
dump	vendor\symfony\var-dumper\VarDumper.php	/^    public static function dump($var)$/;"	f
dumper	vendor\symfony\var-dumper\VarDumper.php	/^                $dumper = 'html' === $_SERVER['VAR_DUMPER_FORMAT'] ? new HtmlDumper() : new CliDumper();$/;"	v
dumper	vendor\symfony\var-dumper\VarDumper.php	/^                $dumper = \\in_array(\\PHP_SAPI, ['cli', 'phpdbg']) ? new CliDumper() : new HtmlDumper();$/;"	v
dumper	vendor\symfony\var-dumper\VarDumper.php	/^            $dumper = new ContextualizedDumper($dumper, [new SourceContextProvider()]);$/;"	v
handler	vendor\symfony\var-dumper\VarDumper.php	/^    private static $handler;$/;"	v
prevHandler	vendor\symfony\var-dumper\VarDumper.php	/^        $prevHandler = self::$handler;$/;"	v
setHandler	vendor\symfony\var-dumper\VarDumper.php	/^    public static function setHandler(callable $callable = null)$/;"	f
abort	vendor\topthink\framework\src\helper.php	/^    function abort($code, string $message = '', array $header = [])$/;"	f
app	vendor\topthink\framework\src\helper.php	/^    function app(string $name = '', array $args = [], bool $newInstance = false)$/;"	f
app_path	vendor\topthink\framework\src\helper.php	/^    function app_path($path = '')$/;"	f
args	vendor\topthink\framework\src\helper.php	/^    function event($event, $args = null)$/;"	v
args	vendor\topthink\framework\src\helper.php	/^    function invoke($call, array $args = [])$/;"	v
base_path	vendor\topthink\framework\src\helper.php	/^    function base_path($path = '')$/;"	f
bind	vendor\topthink\framework\src\helper.php	/^    function bind($abstract, $concrete = null)$/;"	f
cache	vendor\topthink\framework\src\helper.php	/^    function cache(string $name = null, $value = '', $options = null, $tag = null)$/;"	f
class	vendor\topthink\framework\src\helper.php	/^            $class = false !== strpos($validate, '\\\\') ? $validate : app()->parseClass('validate', $validate);$/;"	v
code	vendor\topthink\framework\src\helper.php	/^    function json($data = [], $code = 200, $header = [], $options = []): Json$/;"	v
code	vendor\topthink\framework\src\helper.php	/^    function jsonp($data = [], $code = 200, $header = [], $options = []): Jsonp$/;"	v
code	vendor\topthink\framework\src\helper.php	/^    function redirect(string $url, int $code = 302): Redirect$/;"	v
code	vendor\topthink\framework\src\helper.php	/^    function response($data = '', $code = 200, $header = [], $type = 'html'): Response$/;"	v
code	vendor\topthink\framework\src\helper.php	/^    function xml($data = [], $code = 200, $header = [], $options = []): Xml$/;"	v
concrete	vendor\topthink\framework\src\helper.php	/^    function bind($abstract, $concrete = null)$/;"	v
config	vendor\topthink\framework\src\helper.php	/^    function config($name = '', $value = null)$/;"	f
config_path	vendor\topthink\framework\src\helper.php	/^    function config_path($path = '')$/;"	f
cookie	vendor\topthink\framework\src\helper.php	/^    function cookie(string $name, $value = '', $option = null)$/;"	f
default	vendor\topthink\framework\src\helper.php	/^                    $default = '';$/;"	v
display	vendor\topthink\framework\src\helper.php	/^    function display(string $content, $vars = [], $code = 200, $filter = null): View$/;"	f
download	vendor\topthink\framework\src\helper.php	/^    function download(string $filename, string $name = '', bool $content = false, int $expire = 180): File$/;"	f
dump	vendor\topthink\framework\src\helper.php	/^    function dump(...$vars)$/;"	f
env	vendor\topthink\framework\src\helper.php	/^    function env(string $name = null, $default = null)$/;"	f
event	vendor\topthink\framework\src\helper.php	/^    function event($event, $args = null)$/;"	f
expire	vendor\topthink\framework\src\helper.php	/^            $expire = $options;$/;"	v
expire	vendor\topthink\framework\src\helper.php	/^            $expire = $options['expire'] ?? null; \/\/修复查询缓存无法设置过期时间$/;"	v
halt	vendor\topthink\framework\src\helper.php	/^    function halt(...$vars)$/;"	f
has	vendor\topthink\framework\src\helper.php	/^            $has = true;$/;"	v
input	vendor\topthink\framework\src\helper.php	/^    function input(string $key = '', $default = null, $filter = '')$/;"	f
invoke	vendor\topthink\framework\src\helper.php	/^    function invoke($call, array $args = [])$/;"	f
json	vendor\topthink\framework\src\helper.php	/^    function json($data = [], $code = 200, $header = [], $options = []): Json$/;"	f
jsonp	vendor\topthink\framework\src\helper.php	/^    function jsonp($data = [], $code = 200, $header = [], $options = []): Jsonp$/;"	f
key	vendor\topthink\framework\src\helper.php	/^                $key = substr($key, $pos + 1);$/;"	v
key	vendor\topthink\framework\src\helper.php	/^            $key = substr($key, 1);$/;"	v
key	vendor\topthink\framework\src\helper.php	/^    function input(string $key = '', $default = null, $filter = '')$/;"	v
lang	vendor\topthink\framework\src\helper.php	/^    function lang(string $name, array $vars = [], string $lang = '')$/;"	f
level	vendor\topthink\framework\src\helper.php	/^    function trace($log = '[think]', string $level = 'log')$/;"	v
message	vendor\topthink\framework\src\helper.php	/^    function abort($code, string $message = '', array $header = [])$/;"	v
message	vendor\topthink\framework\src\helper.php	/^    function validate($validate = '', array $message = [], bool $batch = false, bool $failException = true): Validate$/;"	v
method	vendor\topthink\framework\src\helper.php	/^                $method = 'param';$/;"	v
method	vendor\topthink\framework\src\helper.php	/^            $method = 'param';$/;"	v
method	vendor\topthink\framework\src\helper.php	/^            $method = substr($key, 0, $pos);$/;"	v
name	vendor\topthink\framework\src\helper.php	/^            $name = preg_replace_callback('\/_([a-zA-Z])\/', function ($match) {$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function app(string $name = '', array $args = [], bool $newInstance = false)$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function cache(string $name = null, $value = '', $options = null, $tag = null)$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function download(string $filename, string $name = '', bool $content = false, int $expire = 180): File$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function env(string $name = null, $default = null)$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function token(string $name = '__token__', string $type = 'md5'): string$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function token_field(string $name = '__token__', string $type = 'md5'): string$/;"	v
name	vendor\topthink\framework\src\helper.php	/^    function token_meta(string $name = '__token__', string $type = 'md5'): string$/;"	v
output	vendor\topthink\framework\src\helper.php	/^                $output = htmlspecialchars($output, ENT_SUBSTITUTE);$/;"	v
output	vendor\topthink\framework\src\helper.php	/^            $output = '<pre>' . $output . '<\/pre>';$/;"	v
output	vendor\topthink\framework\src\helper.php	/^            $output = PHP_EOL . $output . PHP_EOL;$/;"	v
output	vendor\topthink\framework\src\helper.php	/^        $output = ob_get_clean();$/;"	v
output	vendor\topthink\framework\src\helper.php	/^        $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output);$/;"	v
parse_name	vendor\topthink\framework\src\helper.php	/^    function parse_name(string $name, int $type = 0, bool $ucfirst = true): string$/;"	f
public_path	vendor\topthink\framework\src\helper.php	/^    function public_path($path = '')$/;"	f
redirect	vendor\topthink\framework\src\helper.php	/^    function redirect(string $url, int $code = 302): Redirect$/;"	f
request	vendor\topthink\framework\src\helper.php	/^    function request(): \\think\\Request$/;"	f
response	vendor\topthink\framework\src\helper.php	/^    function response($data = '', $code = 200, $header = [], $type = 'html'): Response$/;"	f
root_path	vendor\topthink\framework\src\helper.php	/^    function root_path($path = '')$/;"	f
runtime_path	vendor\topthink\framework\src\helper.php	/^    function runtime_path($path = '')$/;"	f
session	vendor\topthink\framework\src\helper.php	/^    function session($name = '', $value = '')$/;"	f
template	vendor\topthink\framework\src\helper.php	/^    function view(string $template = '', $vars = [], $code = 200, $filter = null): View$/;"	v
token	vendor\topthink\framework\src\helper.php	/^        $token = Request::buildToken($name, $type);$/;"	v
token	vendor\topthink\framework\src\helper.php	/^    function token(string $name = '__token__', string $type = 'md5'): string$/;"	f
token_field	vendor\topthink\framework\src\helper.php	/^    function token_field(string $name = '__token__', string $type = 'md5'): string$/;"	f
token_meta	vendor\topthink\framework\src\helper.php	/^    function token_meta(string $name = '__token__', string $type = 'md5'): string$/;"	f
trace	vendor\topthink\framework\src\helper.php	/^    function trace($log = '[think]', string $level = 'log')$/;"	f
type	vendor\topthink\framework\src\helper.php	/^    function parse_name(string $name, int $type = 0, bool $ucfirst = true): string$/;"	v
url	vendor\topthink\framework\src\helper.php	/^    function url(string $url = '', array $vars = [], $suffix = true, $domain = false): UrlBuild$/;"	f
url	vendor\topthink\framework\src\helper.php	/^    function url(string $url = '', array $vars = [], $suffix = true, $domain = false): UrlBuild$/;"	v
v	vendor\topthink\framework\src\helper.php	/^            $v = new $class();$/;"	v
v	vendor\topthink\framework\src\helper.php	/^            $v = new Validate();$/;"	v
validate	vendor\topthink\framework\src\helper.php	/^    function validate($validate = '', array $message = [], bool $batch = false, bool $failException = true): Validate$/;"	f
value	vendor\topthink\framework\src\helper.php	/^    function config($name = '', $value = null)$/;"	v
value	vendor\topthink\framework\src\helper.php	/^    function cookie(string $name, $value = '', $option = null)$/;"	v
value	vendor\topthink\framework\src\helper.php	/^    function session($name = '', $value = '')$/;"	v
vars	vendor\topthink\framework\src\helper.php	/^    function display(string $content, $vars = [], $code = 200, $filter = null): View$/;"	v
vars	vendor\topthink\framework\src\helper.php	/^    function lang(string $name, array $vars = [], string $lang = '')$/;"	v
view	vendor\topthink\framework\src\helper.php	/^    function view(string $template = '', $vars = [], $code = 200, $filter = null): View$/;"	f
xml	vendor\topthink\framework\src\helper.php	/^    function xml($data = [], $code = 200, $header = [], $options = []): Xml$/;"	f
App	vendor\topthink\framework\src\think\App.php	/^class App extends Container$/;"	c
__construct	vendor\topthink\framework\src\think\App.php	/^    public function __construct(string $rootPath = '')$/;"	f
appDebug	vendor\topthink\framework\src\think\App.php	/^            $this->appDebug = $this->env->get('app_debug') ? true : false;$/;"	v
appDebug	vendor\topthink\framework\src\think\App.php	/^        $this->appDebug = $debug;$/;"	v
appDebug	vendor\topthink\framework\src\think\App.php	/^    protected $appDebug = false;$/;"	v
appPath	vendor\topthink\framework\src\think\App.php	/^        $appPath = $this->getAppPath();$/;"	v
appPath	vendor\topthink\framework\src\think\App.php	/^        $this->appPath     = $this->rootPath . 'app' . DIRECTORY_SEPARATOR;$/;"	v
appPath	vendor\topthink\framework\src\think\App.php	/^        $this->appPath = $path;$/;"	v
appPath	vendor\topthink\framework\src\think\App.php	/^    protected $appPath = '';$/;"	v
array	vendor\topthink\framework\src\think\App.php	/^        $array = explode('\\\\', $name);$/;"	v
beginMem	vendor\topthink\framework\src\think\App.php	/^        $this->beginMem  = memory_get_usage();$/;"	v
beginMem	vendor\topthink\framework\src\think\App.php	/^    protected $beginMem;$/;"	v
beginTime	vendor\topthink\framework\src\think\App.php	/^        $this->beginTime = microtime(true);$/;"	v
beginTime	vendor\topthink\framework\src\think\App.php	/^    protected $beginTime;$/;"	v
bind	vendor\topthink\framework\src\think\App.php	/^    protected $bind = [$/;"	v
boot	vendor\topthink\framework\src\think\App.php	/^    public function boot(): void$/;"	f
bootService	vendor\topthink\framework\src\think\App.php	/^    public function bootService($service)$/;"	f
class	vendor\topthink\framework\src\think\App.php	/^        $class = Str::studly(array_pop($array));$/;"	v
configExt	vendor\topthink\framework\src\think\App.php	/^        $this->configExt = $this->env->get('config_ext', '.php');$/;"	v
configExt	vendor\topthink\framework\src\think\App.php	/^    protected $configExt = '.php';$/;"	v
configPath	vendor\topthink\framework\src\think\App.php	/^        $configPath = $this->getConfigPath();$/;"	v
debug	vendor\topthink\framework\src\think\App.php	/^    public function debug(bool $debug = true)$/;"	f
debug	vendor\topthink\framework\src\think\App.php	/^    public function debug(bool $debug = true)$/;"	v
debugModeInit	vendor\topthink\framework\src\think\App.php	/^    protected function debugModeInit(): void$/;"	f
files	vendor\topthink\framework\src\think\App.php	/^            $files = glob($configPath . '*' . $this->configExt);$/;"	v
files	vendor\topthink\framework\src\think\App.php	/^        $files = [];$/;"	v
files	vendor\topthink\framework\src\think\App.php	/^        $files = glob($this->appPath . 'lang' . DIRECTORY_SEPARATOR . $langset . '.*');$/;"	v
force	vendor\topthink\framework\src\think\App.php	/^    public function register($service, bool $force = false)$/;"	v
getAppPath	vendor\topthink\framework\src\think\App.php	/^    public function getAppPath(): string$/;"	f
getBasePath	vendor\topthink\framework\src\think\App.php	/^    public function getBasePath(): string$/;"	f
getBeginMem	vendor\topthink\framework\src\think\App.php	/^    public function getBeginMem(): int$/;"	f
getBeginTime	vendor\topthink\framework\src\think\App.php	/^    public function getBeginTime(): float$/;"	f
getConfigExt	vendor\topthink\framework\src\think\App.php	/^    public function getConfigExt(): string$/;"	f
getConfigPath	vendor\topthink\framework\src\think\App.php	/^    public function getConfigPath(): string$/;"	f
getDefaultRootPath	vendor\topthink\framework\src\think\App.php	/^    protected function getDefaultRootPath(): string$/;"	f
getNamespace	vendor\topthink\framework\src\think\App.php	/^    public function getNamespace(): string$/;"	f
getRootPath	vendor\topthink\framework\src\think\App.php	/^    public function getRootPath(): string$/;"	f
getRuntimePath	vendor\topthink\framework\src\think\App.php	/^    public function getRuntimePath(): string$/;"	f
getService	vendor\topthink\framework\src\think\App.php	/^    public function getService($service)$/;"	f
getThinkPath	vendor\topthink\framework\src\think\App.php	/^    public function getThinkPath(): string$/;"	f
initialize	vendor\topthink\framework\src\think\App.php	/^    public function initialize()$/;"	f
initialized	vendor\topthink\framework\src\think\App.php	/^        $this->initialized = true;$/;"	v
initialized	vendor\topthink\framework\src\think\App.php	/^    protected $initialized = false;$/;"	v
initialized	vendor\topthink\framework\src\think\App.php	/^    public function initialized()$/;"	f
initializers	vendor\topthink\framework\src\think\App.php	/^    protected $initializers = [$/;"	v
isDebug	vendor\topthink\framework\src\think\App.php	/^    public function isDebug(): bool$/;"	f
langSet	vendor\topthink\framework\src\think\App.php	/^        $langSet = $this->lang->defaultLangSet();$/;"	v
list	vendor\topthink\framework\src\think\App.php	/^        $list = $this->config->get('lang.extend_list', []);$/;"	v
load	vendor\topthink\framework\src\think\App.php	/^    protected function load(): void$/;"	f
loadEvent	vendor\topthink\framework\src\think\App.php	/^    public function loadEvent(array $event): void$/;"	f
loadLangPack	vendor\topthink\framework\src\think\App.php	/^    public function loadLangPack($langset)$/;"	f
name	vendor\topthink\framework\src\think\App.php	/^        $name  = str_replace(['\/', '.'], '\\\\', $name);$/;"	v
name	vendor\topthink\framework\src\think\App.php	/^        $name = is_string($service) ? $service : get_class($service);$/;"	v
namespace	vendor\topthink\framework\src\think\App.php	/^        $this->namespace = $namespace;$/;"	v
namespace	vendor\topthink\framework\src\think\App.php	/^    protected $namespace = 'app';$/;"	v
output	vendor\topthink\framework\src\think\App.php	/^                $output = ob_get_clean();$/;"	v
parseClass	vendor\topthink\framework\src\think\App.php	/^    public function parseClass(string $layer, string $name): string$/;"	f
path	vendor\topthink\framework\src\think\App.php	/^        $path  = $array ? implode('\\\\', $array) . '\\\\' : '';$/;"	v
path	vendor\topthink\framework\src\think\App.php	/^        $path = dirname(dirname(dirname(dirname($this->thinkPath))));$/;"	v
register	vendor\topthink\framework\src\think\App.php	/^    public function register($service, bool $force = false)$/;"	f
registered	vendor\topthink\framework\src\think\App.php	/^        $registered = $this->getService($service);$/;"	v
rootPath	vendor\topthink\framework\src\think\App.php	/^        $this->rootPath    = $rootPath ? rtrim($rootPath, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR : $this->getDefaultRootPath();$/;"	v
rootPath	vendor\topthink\framework\src\think\App.php	/^    protected $rootPath = '';$/;"	v
rootPath	vendor\topthink\framework\src\think\App.php	/^    public function __construct(string $rootPath = '')$/;"	v
routePath	vendor\topthink\framework\src\think\App.php	/^    protected $routePath = '';$/;"	v
runningInConsole	vendor\topthink\framework\src\think\App.php	/^    public function runningInConsole()$/;"	f
runtimePath	vendor\topthink\framework\src\think\App.php	/^        $this->runtimePath = $path;$/;"	v
runtimePath	vendor\topthink\framework\src\think\App.php	/^        $this->runtimePath = $this->rootPath . 'runtime' . DIRECTORY_SEPARATOR;$/;"	v
runtimePath	vendor\topthink\framework\src\think\App.php	/^    protected $runtimePath = '';$/;"	v
service	vendor\topthink\framework\src\think\App.php	/^            $service = new $service($this);$/;"	v
services	vendor\topthink\framework\src\think\App.php	/^            $services = include $appPath . 'service.php';$/;"	v
services	vendor\topthink\framework\src\think\App.php	/^    protected $services = [];$/;"	v
setAppPath	vendor\topthink\framework\src\think\App.php	/^    public function setAppPath(string $path)$/;"	f
setNamespace	vendor\topthink\framework\src\think\App.php	/^    public function setNamespace(string $namespace)$/;"	f
setRuntimePath	vendor\topthink\framework\src\think\App.php	/^    public function setRuntimePath(string $path): void$/;"	f
thinkPath	vendor\topthink\framework\src\think\App.php	/^        $this->thinkPath   = dirname(__DIR__) . DIRECTORY_SEPARATOR;$/;"	v
thinkPath	vendor\topthink\framework\src\think\App.php	/^    protected $thinkPath = '';$/;"	v
version	vendor\topthink\framework\src\think\App.php	/^    public function version(): string$/;"	f
Cache	vendor\topthink\framework\src\think\Cache.php	/^class Cache extends Manager implements CacheInterface$/;"	c
clear	vendor\topthink\framework\src\think\Cache.php	/^    public function clear(): bool$/;"	f
default	vendor\topthink\framework\src\think\Cache.php	/^    public function get($key, $default = null)$/;"	v
default	vendor\topthink\framework\src\think\Cache.php	/^    public function getMultiple($keys, $default = null): iterable$/;"	v
delete	vendor\topthink\framework\src\think\Cache.php	/^    public function delete($key): bool$/;"	f
deleteMultiple	vendor\topthink\framework\src\think\Cache.php	/^    public function deleteMultiple($keys): bool$/;"	f
get	vendor\topthink\framework\src\think\Cache.php	/^    public function get($key, $default = null)$/;"	f
getConfig	vendor\topthink\framework\src\think\Cache.php	/^    public function getConfig(string $name = null, $default = null)$/;"	f
getDefaultDriver	vendor\topthink\framework\src\think\Cache.php	/^    public function getDefaultDriver()$/;"	f
getMultiple	vendor\topthink\framework\src\think\Cache.php	/^    public function getMultiple($keys, $default = null): iterable$/;"	f
getStoreConfig	vendor\topthink\framework\src\think\Cache.php	/^    public function getStoreConfig(string $store, string $name = null, $default = null)$/;"	f
has	vendor\topthink\framework\src\think\Cache.php	/^    public function has($key): bool$/;"	f
name	vendor\topthink\framework\src\think\Cache.php	/^    public function getConfig(string $name = null, $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Cache.php	/^    public function getStoreConfig(string $store, string $name = null, $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Cache.php	/^    public function store(string $name = null)$/;"	v
namespace	vendor\topthink\framework\src\think\Cache.php	/^    protected $namespace = '\\\\think\\\\cache\\\\driver\\\\';$/;"	v
resolveConfig	vendor\topthink\framework\src\think\Cache.php	/^    protected function resolveConfig(string $name)$/;"	f
resolveType	vendor\topthink\framework\src\think\Cache.php	/^    protected function resolveType(string $name)$/;"	f
set	vendor\topthink\framework\src\think\Cache.php	/^    public function set($key, $value, $ttl = null): bool$/;"	f
setMultiple	vendor\topthink\framework\src\think\Cache.php	/^    public function setMultiple($values, $ttl = null): bool$/;"	f
store	vendor\topthink\framework\src\think\Cache.php	/^    public function store(string $name = null)$/;"	f
tag	vendor\topthink\framework\src\think\Cache.php	/^    public function tag($name): TagSet$/;"	f
ttl	vendor\topthink\framework\src\think\Cache.php	/^    public function set($key, $value, $ttl = null): bool$/;"	v
ttl	vendor\topthink\framework\src\think\Cache.php	/^    public function setMultiple($values, $ttl = null): bool$/;"	v
Config	vendor\topthink\framework\src\think\Config.php	/^class Config$/;"	c
__construct	vendor\topthink\framework\src\think\Config.php	/^    public function __construct(string $path = null, string $ext = '.php')$/;"	f
__make	vendor\topthink\framework\src\think\Config.php	/^    public static function __make(App $app)$/;"	f
config	vendor\topthink\framework\src\think\Config.php	/^                    $config = yaml_parse_file($file);$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^                $config = $config[$val];$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^                $config = include $file;$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^                $config = json_decode(file_get_contents($file), true);$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^                $config = parse_ini_file($file, true, INI_SCANNER_TYPED) ?: [];$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^        $config  = $this->config;$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^        $config = [];$/;"	v
config	vendor\topthink\framework\src\think\Config.php	/^    protected $config = [];$/;"	v
ext	vendor\topthink\framework\src\think\Config.php	/^        $ext  = $app->getConfigExt();$/;"	v
ext	vendor\topthink\framework\src\think\Config.php	/^        $this->ext  = $ext;$/;"	v
ext	vendor\topthink\framework\src\think\Config.php	/^    protected $ext;$/;"	v
filename	vendor\topthink\framework\src\think\Config.php	/^            $filename = $file;$/;"	v
filename	vendor\topthink\framework\src\think\Config.php	/^            $filename = $this->path . $file . $this->ext;$/;"	v
get	vendor\topthink\framework\src\think\Config.php	/^    public function get(string $name = null, $default = null)$/;"	f
has	vendor\topthink\framework\src\think\Config.php	/^    public function has(string $name): bool$/;"	f
load	vendor\topthink\framework\src\think\Config.php	/^    public function load(string $file, string $name = ''): array$/;"	f
name	vendor\topthink\framework\src\think\Config.php	/^        $name    = explode('.', $name);$/;"	v
name	vendor\topthink\framework\src\think\Config.php	/^        $name = strtolower($name);$/;"	v
name	vendor\topthink\framework\src\think\Config.php	/^    public function get(string $name = null, $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Config.php	/^    public function load(string $file, string $name = ''): array$/;"	v
name	vendor\topthink\framework\src\think\Config.php	/^    public function set(array $config, string $name = null): array$/;"	v
parse	vendor\topthink\framework\src\think\Config.php	/^    protected function parse(string $file, string $name): array$/;"	f
path	vendor\topthink\framework\src\think\Config.php	/^        $path = $app->getConfigPath();$/;"	v
path	vendor\topthink\framework\src\think\Config.php	/^        $this->path = $path ?: '';$/;"	v
path	vendor\topthink\framework\src\think\Config.php	/^    protected $path;$/;"	v
path	vendor\topthink\framework\src\think\Config.php	/^    public function __construct(string $path = null, string $ext = '.php')$/;"	v
pull	vendor\topthink\framework\src\think\Config.php	/^    protected function pull(string $name): array$/;"	f
result	vendor\topthink\framework\src\think\Config.php	/^                $result = $config;$/;"	v
result	vendor\topthink\framework\src\think\Config.php	/^                $result = array_merge($this->config[$name], $config);$/;"	v
result	vendor\topthink\framework\src\think\Config.php	/^            $result = $this->config = array_merge($this->config, array_change_key_case($config));$/;"	v
set	vendor\topthink\framework\src\think\Config.php	/^    public function set(array $config, string $name = null): array$/;"	f
type	vendor\topthink\framework\src\think\Config.php	/^        $type   = pathinfo($file, PATHINFO_EXTENSION);$/;"	v
Console	vendor\topthink\framework\src\think\Console.php	/^class Console$/;"	c
__construct	vendor\topthink\framework\src\think\Console.php	/^    public function __construct(App $app)$/;"	f
addCommand	vendor\topthink\framework\src\think\Console.php	/^    public function addCommand($command, string $name = '')$/;"	f
addCommands	vendor\topthink\framework\src\think\Console.php	/^    public function addCommands(array $commands): void$/;"	f
all	vendor\topthink\framework\src\think\Console.php	/^    public function all(string $namespace = null): array$/;"	f
allCommands	vendor\topthink\framework\src\think\Console.php	/^        $allCommands = array_keys($this->commands);$/;"	v
allNamespaces	vendor\topthink\framework\src\think\Console.php	/^        $allNamespaces = $this->getNamespaces();$/;"	v
alternatives	vendor\topthink\framework\src\think\Console.php	/^        $alternatives = [];$/;"	v
alternatives	vendor\topthink\framework\src\think\Console.php	/^        $alternatives = array_filter($alternatives, function ($lev) use ($threshold) {$/;"	v
app	vendor\topthink\framework\src\think\Console.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\Console.php	/^    protected $app;$/;"	v
autoExit	vendor\topthink\framework\src\think\Console.php	/^        $this->autoExit = $boolean;$/;"	v
autoExit	vendor\topthink\framework\src\think\Console.php	/^    protected $autoExit        = true;$/;"	v
call	vendor\topthink\framework\src\think\Console.php	/^    public function call(string $command, array $parameters = [], string $driver = 'buffer')$/;"	f
catchExceptions	vendor\topthink\framework\src\think\Console.php	/^        $this->catchExceptions = $boolean;$/;"	v
catchExceptions	vendor\topthink\framework\src\think\Console.php	/^    protected $catchExceptions = true;$/;"	v
collectionName	vendor\topthink\framework\src\think\Console.php	/^            foreach ($collectionParts as $collectionName => $parts) {$/;"	v
collectionParts	vendor\topthink\framework\src\think\Console.php	/^        $collectionParts = [];$/;"	v
command	vendor\topthink\framework\src\think\Console.php	/^            $command = $this->app->invokeClass($command);$/;"	v
command	vendor\topthink\framework\src\think\Console.php	/^        $command = $this->commands[$name];$/;"	v
command	vendor\topthink\framework\src\think\Console.php	/^        $command = $this->find($name);$/;"	v
commands	vendor\topthink\framework\src\think\Console.php	/^        $commands = $this->app->config->get('console.commands', []);$/;"	v
commands	vendor\topthink\framework\src\think\Console.php	/^        $commands = [];$/;"	v
commands	vendor\topthink\framework\src\think\Console.php	/^        $commands = array_merge($this->defaultCommands, $commands);$/;"	v
commands	vendor\topthink\framework\src\think\Console.php	/^        $commands = preg_grep('{^' . $expr . '}', $allCommands);$/;"	v
commands	vendor\topthink\framework\src\think\Console.php	/^    protected $commands = [];$/;"	v
configureIO	vendor\topthink\framework\src\think\Console.php	/^    protected function configureIO(Input $input, Output $output): void$/;"	f
defaultCommand	vendor\topthink\framework\src\think\Console.php	/^    protected $defaultCommand = 'list';$/;"	v
defaultCommands	vendor\topthink\framework\src\think\Console.php	/^    protected $defaultCommands = [$/;"	v
definition	vendor\topthink\framework\src\think\Console.php	/^        $this->definition = $definition;$/;"	v
definition	vendor\topthink\framework\src\think\Console.php	/^        $this->definition = $this->getDefaultInputDefinition();$/;"	v
definition	vendor\topthink\framework\src\think\Console.php	/^    protected $definition;$/;"	v
doRun	vendor\topthink\framework\src\think\Console.php	/^    public function doRun(Input $input, Output $output)$/;"	f
doRunCommand	vendor\topthink\framework\src\think\Console.php	/^    protected function doRunCommand(Command $command, Input $input, Output $output)$/;"	f
exact	vendor\topthink\framework\src\think\Console.php	/^        $exact = in_array($name, $commands, true);$/;"	v
exact	vendor\topthink\framework\src\think\Console.php	/^        $exact = in_array($namespace, $namespaces, true);$/;"	v
exists	vendor\topthink\framework\src\think\Console.php	/^                $exists = isset($alternatives[$collectionName]);$/;"	v
exitCode	vendor\topthink\framework\src\think\Console.php	/^                    $exitCode = 1;$/;"	v
exitCode	vendor\topthink\framework\src\think\Console.php	/^                $exitCode = (int) $exitCode;$/;"	v
exitCode	vendor\topthink\framework\src\think\Console.php	/^                $exitCode = 1;$/;"	v
exitCode	vendor\topthink\framework\src\think\Console.php	/^                $exitCode = 255;$/;"	v
exitCode	vendor\topthink\framework\src\think\Console.php	/^            $exitCode = $e->getCode();$/;"	v
exitCode	vendor\topthink\framework\src\think\Console.php	/^            $exitCode = $this->doRun($input, $output);$/;"	v
expr	vendor\topthink\framework\src\think\Console.php	/^        $expr          = preg_replace_callback('{([^:]+|)}', function ($matches) {$/;"	v
expr	vendor\topthink\framework\src\think\Console.php	/^        $expr = preg_replace_callback('{([^:]+|)}', function ($matches) {$/;"	v
extractAllNamespaces	vendor\topthink\framework\src\think\Console.php	/^    private function extractAllNamespaces(string $name): array$/;"	f
extractNamespace	vendor\topthink\framework\src\think\Console.php	/^    public function extractNamespace(string $name, int $limit = 0): string$/;"	f
find	vendor\topthink\framework\src\think\Console.php	/^    public function find(string $name): Command$/;"	f
findAlternatives	vendor\topthink\framework\src\think\Console.php	/^    private function findAlternatives(string $name, $collection): array$/;"	f
findNamespace	vendor\topthink\framework\src\think\Console.php	/^    public function findNamespace(string $namespace): string$/;"	f
flushStartCallbacks	vendor\topthink\framework\src\think\Console.php	/^    public static function flushStartCallbacks(): void$/;"	f
getAbbreviationSuggestions	vendor\topthink\framework\src\think\Console.php	/^    private function getAbbreviationSuggestions(array $abbrevs): string$/;"	f
getCommand	vendor\topthink\framework\src\think\Console.php	/^    public function getCommand(string $name): Command$/;"	f
getCommandName	vendor\topthink\framework\src\think\Console.php	/^    protected function getCommandName(Input $input): string$/;"	f
getDefaultInputDefinition	vendor\topthink\framework\src\think\Console.php	/^    protected function getDefaultInputDefinition(): InputDefinition$/;"	f
getDefinition	vendor\topthink\framework\src\think\Console.php	/^    public function getDefinition(): InputDefinition$/;"	f
getHelp	vendor\topthink\framework\src\think\Console.php	/^    public function getHelp(): string$/;"	f
getLongVersion	vendor\topthink\framework\src\think\Console.php	/^    public function getLongVersion(): string$/;"	f
getNamespaces	vendor\topthink\framework\src\think\Console.php	/^    public function getNamespaces(): array$/;"	f
hasCommand	vendor\topthink\framework\src\think\Console.php	/^    public function hasCommand(string $name): bool$/;"	f
helpCommand	vendor\topthink\framework\src\think\Console.php	/^            $helpCommand = $this->getCommand('help');$/;"	v
i	vendor\topthink\framework\src\think\Console.php	/^        foreach (explode(':', $name) as $i => $subname) {$/;"	v
input	vendor\topthink\framework\src\think\Console.php	/^                $input = new Input(['help']);$/;"	v
input	vendor\topthink\framework\src\think\Console.php	/^            $input = new Input([$this->defaultCommand]);$/;"	v
input	vendor\topthink\framework\src\think\Console.php	/^        $input  = new Input($parameters);$/;"	v
input	vendor\topthink\framework\src\think\Console.php	/^        $input  = new Input();$/;"	v
key	vendor\topthink\framework\src\think\Console.php	/^        foreach ($commands as $key => $command) {$/;"	v
key	vendor\topthink\framework\src\think\Console.php	/^        foreach ($this->commands as $key => $command) {$/;"	v
lev	vendor\topthink\framework\src\think\Console.php	/^                $lev = levenshtein($subname, $parts[$i]);$/;"	v
lev	vendor\topthink\framework\src\think\Console.php	/^            $lev = levenshtein($name, $item);$/;"	v
limit	vendor\topthink\framework\src\think\Console.php	/^    public function extractNamespace(string $name, int $limit = 0): string$/;"	v
loadCommands	vendor\topthink\framework\src\think\Console.php	/^    protected function loadCommands(): void$/;"	f
message	vendor\topthink\framework\src\think\Console.php	/^            $message = sprintf('Command "%s" is not defined.', $name);$/;"	v
message	vendor\topthink\framework\src\think\Console.php	/^            $message = sprintf('There are no commands defined in the "%s" namespace.', $namespace);$/;"	v
name	vendor\topthink\framework\src\think\Console.php	/^                $name  = 'help';$/;"	v
name	vendor\topthink\framework\src\think\Console.php	/^            $name  = $this->defaultCommand;$/;"	v
name	vendor\topthink\framework\src\think\Console.php	/^        $name = $this->getCommandName($input);$/;"	v
name	vendor\topthink\framework\src\think\Console.php	/^        foreach ($this->commands as $name => $command) {$/;"	v
name	vendor\topthink\framework\src\think\Console.php	/^    public function addCommand($command, string $name = '')$/;"	v
namespace	vendor\topthink\framework\src\think\Console.php	/^    public function all(string $namespace = null): array$/;"	v
namespaces	vendor\topthink\framework\src\think\Console.php	/^                    $namespaces = array_merge($namespaces, $this->extractAllNamespaces($alias));$/;"	v
namespaces	vendor\topthink\framework\src\think\Console.php	/^                $namespaces = array_merge($namespaces, $this->extractAllNamespaces($command->getName()));$/;"	v
namespaces	vendor\topthink\framework\src\think\Console.php	/^                $namespaces = array_merge($namespaces, $this->extractAllNamespaces($key));$/;"	v
namespaces	vendor\topthink\framework\src\think\Console.php	/^        $namespaces = [];$/;"	v
namespaces	vendor\topthink\framework\src\think\Console.php	/^        $namespaces = preg_grep('{^' . $expr . '}', $allNamespaces);$/;"	v
output	vendor\topthink\framework\src\think\Console.php	/^        $output = new Output($driver);$/;"	v
output	vendor\topthink\framework\src\think\Console.php	/^        $output = new Output();$/;"	v
parameters	vendor\topthink\framework\src\think\Console.php	/^    public function call(string $command, array $parameters = [], string $driver = 'buffer')$/;"	v
parts	vendor\topthink\framework\src\think\Console.php	/^        $parts      = explode(':', $name, -1);$/;"	v
parts	vendor\topthink\framework\src\think\Console.php	/^        $parts = explode(':', $name);$/;"	v
pos	vendor\topthink\framework\src\think\Console.php	/^            if (false !== $pos = strrpos($name, ':')) {$/;"	v
run	vendor\topthink\framework\src\think\Console.php	/^    public function run()$/;"	f
setAutoExit	vendor\topthink\framework\src\think\Console.php	/^    public function setAutoExit(bool $boolean): void$/;"	f
setCatchExceptions	vendor\topthink\framework\src\think\Console.php	/^    public function setCatchExceptions(bool $boolean): void$/;"	f
setDefinition	vendor\topthink\framework\src\think\Console.php	/^    public function setDefinition(InputDefinition $definition): void$/;"	f
setUser	vendor\topthink\framework\src\think\Console.php	/^    public static function setUser(string $user): void$/;"	f
start	vendor\topthink\framework\src\think\Console.php	/^    protected function start(): void$/;"	f
startCallbacks	vendor\topthink\framework\src\think\Console.php	/^    protected static $startCallbacks = [];$/;"	v
starting	vendor\topthink\framework\src\think\Console.php	/^    public static function starting(Closure $callback): void$/;"	f
suggestions	vendor\topthink\framework\src\think\Console.php	/^            $suggestions = $this->getAbbreviationSuggestions(array_values($commands));$/;"	v
threshold	vendor\topthink\framework\src\think\Console.php	/^        $threshold    = 1e3;$/;"	v
user	vendor\topthink\framework\src\think\Console.php	/^            $user = posix_getpwnam($user);$/;"	v
wantHelps	vendor\topthink\framework\src\think\Console.php	/^                $this->wantHelps = true;$/;"	v
wantHelps	vendor\topthink\framework\src\think\Console.php	/^            $this->wantHelps = false;$/;"	v
wantHelps	vendor\topthink\framework\src\think\Console.php	/^    protected $wantHelps = false;$/;"	v
Container	vendor\topthink\framework\src\think\Container.php	/^class Container implements ContainerInterface, ArrayAccess, IteratorAggregate, Countable$/;"	c
__get	vendor\topthink\framework\src\think\Container.php	/^    public function __get($name)$/;"	f
__isset	vendor\topthink\framework\src\think\Container.php	/^    public function __isset($name): bool$/;"	f
__set	vendor\topthink\framework\src\think\Container.php	/^    public function __set($name, $value)$/;"	f
__unset	vendor\topthink\framework\src\think\Container.php	/^    public function __unset($name)$/;"	f
abstract	vendor\topthink\framework\src\think\Container.php	/^            $abstract = $this->getAlias($abstract);$/;"	v
abstract	vendor\topthink\framework\src\think\Container.php	/^        $abstract = $this->getAlias($abstract);$/;"	v
args	vendor\topthink\framework\src\think\Container.php	/^                $args = $this->bindParams($method, $vars);$/;"	v
args	vendor\topthink\framework\src\think\Container.php	/^        $args   = [];$/;"	v
args	vendor\topthink\framework\src\think\Container.php	/^        $args = $constructor ? $this->bindParams($constructor, $vars) : [];$/;"	v
args	vendor\topthink\framework\src\think\Container.php	/^        $args = $this->bindParams($reflect, $vars);$/;"	v
array	vendor\topthink\framework\src\think\Container.php	/^        $array = $vars;$/;"	v
bind	vendor\topthink\framework\src\think\Container.php	/^            $bind = $this->bind[$abstract];$/;"	v
bind	vendor\topthink\framework\src\think\Container.php	/^    protected $bind = [];$/;"	v
bind	vendor\topthink\framework\src\think\Container.php	/^    public function bind($abstract, $concrete = null)$/;"	f
bindParams	vendor\topthink\framework\src\think\Container.php	/^    protected function bindParams(ReflectionFunctionAbstract $reflect, array $vars = []): array$/;"	f
bound	vendor\topthink\framework\src\think\Container.php	/^    public function bound(string $abstract): bool$/;"	f
callback	vendor\topthink\framework\src\think\Container.php	/^    public function resolving($abstract, Closure $callback = null): void$/;"	v
class	vendor\topthink\framework\src\think\Container.php	/^            $class     = $param->getClass();$/;"	v
class	vendor\topthink\framework\src\think\Container.php	/^            $class   = is_object($class) ? $class : $this->invokeClass($class);$/;"	v
class	vendor\topthink\framework\src\think\Container.php	/^            $class = is_object($class) ? get_class($class) : $class;$/;"	v
class	vendor\topthink\framework\src\think\Container.php	/^        $class = false !== strpos($name, '\\\\') ? $name : $namespace . ucwords($name);$/;"	v
concrete	vendor\topthink\framework\src\think\Container.php	/^    public function bind($abstract, $concrete = null)$/;"	v
constructor	vendor\topthink\framework\src\think\Container.php	/^        $constructor = $reflect->getConstructor();$/;"	v
count	vendor\topthink\framework\src\think\Container.php	/^    public function count()$/;"	f
delete	vendor\topthink\framework\src\think\Container.php	/^    public function delete($name)$/;"	f
exists	vendor\topthink\framework\src\think\Container.php	/^    public function exists(string $abstract): bool$/;"	f
factory	vendor\topthink\framework\src\think\Container.php	/^    public static function factory(string $name, string $namespace = '', ...$args)$/;"	f
get	vendor\topthink\framework\src\think\Container.php	/^    public function get($abstract)$/;"	f
getAlias	vendor\topthink\framework\src\think\Container.php	/^    public function getAlias(string $abstract): string$/;"	f
getInstance	vendor\topthink\framework\src\think\Container.php	/^    public static function getInstance()$/;"	f
getIterator	vendor\topthink\framework\src\think\Container.php	/^    public function getIterator()$/;"	f
getObjectParam	vendor\topthink\framework\src\think\Container.php	/^    protected function getObjectParam(string $className, array &$vars)$/;"	f
has	vendor\topthink\framework\src\think\Container.php	/^    public function has($name): bool$/;"	f
instance	vendor\topthink\framework\src\think\Container.php	/^    protected static $instance;$/;"	v
instance	vendor\topthink\framework\src\think\Container.php	/^    public function instance(string $abstract, $instance)$/;"	f
instances	vendor\topthink\framework\src\think\Container.php	/^    protected $instances = [];$/;"	v
invoke	vendor\topthink\framework\src\think\Container.php	/^    public function invoke($callable, array $vars = [], bool $accessible = false)$/;"	f
invokeAfter	vendor\topthink\framework\src\think\Container.php	/^    protected function invokeAfter(string $class, $object): void$/;"	f
invokeCallback	vendor\topthink\framework\src\think\Container.php	/^    protected $invokeCallback = [];$/;"	v
invokeClass	vendor\topthink\framework\src\think\Container.php	/^    public function invokeClass(string $class, array $vars = [])$/;"	f
invokeFunction	vendor\topthink\framework\src\think\Container.php	/^    public function invokeFunction($function, array $vars = [])$/;"	f
invokeMethod	vendor\topthink\framework\src\think\Container.php	/^    public function invokeMethod($method, array $vars = [], bool $accessible = false)$/;"	f
invokeReflectMethod	vendor\topthink\framework\src\think\Container.php	/^    public function invokeReflectMethod($instance, $reflect, array $vars = [])$/;"	f
key	vendor\topthink\framework\src\think\Container.php	/^            foreach ($abstract as $key => $val) {$/;"	v
lowerName	vendor\topthink\framework\src\think\Container.php	/^            $lowerName = Str::snake($name);$/;"	v
make	vendor\topthink\framework\src\think\Container.php	/^    public function make(string $abstract, array $vars = [], bool $newInstance = false)$/;"	f
message	vendor\topthink\framework\src\think\Container.php	/^            $message = sprintf('method not exists: %d::%d()', $class, $method);$/;"	v
method	vendor\topthink\framework\src\think\Container.php	/^            $method = $reflect->getMethod('__make');$/;"	v
name	vendor\topthink\framework\src\think\Container.php	/^            $name      = $param->getName();$/;"	v
name	vendor\topthink\framework\src\think\Container.php	/^        $name = $this->getAlias($name);$/;"	v
namespace	vendor\topthink\framework\src\think\Container.php	/^    public static function factory(string $name, string $namespace = '', ...$args)$/;"	v
object	vendor\topthink\framework\src\think\Container.php	/^            $object = $this->invokeClass($abstract, $vars);$/;"	v
object	vendor\topthink\framework\src\think\Container.php	/^            $object = $this->invokeFunction($this->bind[$abstract], $vars);$/;"	v
object	vendor\topthink\framework\src\think\Container.php	/^        $object = $reflect->newInstanceArgs($args);$/;"	v
offsetExists	vendor\topthink\framework\src\think\Container.php	/^    public function offsetExists($key)$/;"	f
offsetGet	vendor\topthink\framework\src\think\Container.php	/^    public function offsetGet($key)$/;"	f
offsetSet	vendor\topthink\framework\src\think\Container.php	/^    public function offsetSet($key, $value)$/;"	f
offsetUnset	vendor\topthink\framework\src\think\Container.php	/^    public function offsetUnset($key)$/;"	f
params	vendor\topthink\framework\src\think\Container.php	/^        $params = $reflect->getParameters();$/;"	v
pull	vendor\topthink\framework\src\think\Container.php	/^    public static function pull(string $abstract, array $vars = [], bool $newInstance = false)$/;"	f
reflect	vendor\topthink\framework\src\think\Container.php	/^            $reflect = new ReflectionClass($class);$/;"	v
reflect	vendor\topthink\framework\src\think\Container.php	/^            $reflect = new ReflectionFunction($function);$/;"	v
reflect	vendor\topthink\framework\src\think\Container.php	/^            $reflect = new ReflectionMethod($class, $method);$/;"	v
resolving	vendor\topthink\framework\src\think\Container.php	/^    public function resolving($abstract, Closure $callback = null): void$/;"	f
result	vendor\topthink\framework\src\think\Container.php	/^            $result = $this->make($className);$/;"	v
result	vendor\topthink\framework\src\think\Container.php	/^            $result = $value;$/;"	v
setInstance	vendor\topthink\framework\src\think\Container.php	/^    public static function setInstance($instance): void$/;"	f
type	vendor\topthink\framework\src\think\Container.php	/^        $type   = key($vars) === 0 ? 1 : 0;$/;"	v
value	vendor\topthink\framework\src\think\Container.php	/^        $value = array_shift($array);$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    protected function bindParams(ReflectionFunctionAbstract $reflect, array $vars = []): array$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public function invoke($callable, array $vars = [], bool $accessible = false)$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public function invokeClass(string $class, array $vars = [])$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public function invokeFunction($function, array $vars = [])$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public function invokeMethod($method, array $vars = [], bool $accessible = false)$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public function invokeReflectMethod($instance, $reflect, array $vars = [])$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public function make(string $abstract, array $vars = [], bool $newInstance = false)$/;"	v
vars	vendor\topthink\framework\src\think\Container.php	/^    public static function pull(string $abstract, array $vars = [], bool $newInstance = false)$/;"	v
Cookie	vendor\topthink\framework\src\think\Cookie.php	/^class Cookie$/;"	c
__construct	vendor\topthink\framework\src\think\Cookie.php	/^    public function __construct(Request $request, array $config = [])$/;"	f
__make	vendor\topthink\framework\src\think\Cookie.php	/^    public static function __make(Request $request, Config $config)$/;"	f
config	vendor\topthink\framework\src\think\Cookie.php	/^            $config = $this->config;$/;"	v
config	vendor\topthink\framework\src\think\Cookie.php	/^            $config = array_merge($this->config, array_change_key_case($option));$/;"	v
config	vendor\topthink\framework\src\think\Cookie.php	/^        $this->config  = array_merge($this->config, array_change_key_case($config));$/;"	v
config	vendor\topthink\framework\src\think\Cookie.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\Cookie.php	/^    public function __construct(Request $request, array $config = [])$/;"	v
cookie	vendor\topthink\framework\src\think\Cookie.php	/^    protected $cookie = [];$/;"	v
delete	vendor\topthink\framework\src\think\Cookie.php	/^    public function delete(string $name): void$/;"	f
expire	vendor\topthink\framework\src\think\Cookie.php	/^            $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0;$/;"	v
expire	vendor\topthink\framework\src\think\Cookie.php	/^            $expire = $config['expire']->getTimestamp();$/;"	v
forever	vendor\topthink\framework\src\think\Cookie.php	/^    public function forever(string $name, string $value = '', $option = null): void$/;"	f
get	vendor\topthink\framework\src\think\Cookie.php	/^    public function get(string $name = '', $default = null)$/;"	f
getCookie	vendor\topthink\framework\src\think\Cookie.php	/^    public function getCookie(): array$/;"	f
has	vendor\topthink\framework\src\think\Cookie.php	/^    public function has(string $name): bool$/;"	f
name	vendor\topthink\framework\src\think\Cookie.php	/^        foreach ($this->cookie as $name => $val) {$/;"	v
name	vendor\topthink\framework\src\think\Cookie.php	/^    public function get(string $name = '', $default = null)$/;"	v
option	vendor\topthink\framework\src\think\Cookie.php	/^                $option = ['expire' => $option];$/;"	v
option	vendor\topthink\framework\src\think\Cookie.php	/^            $option = [];$/;"	v
option	vendor\topthink\framework\src\think\Cookie.php	/^    protected function setCookie(string $name, string $value, int $expire, array $option = []): void$/;"	v
option	vendor\topthink\framework\src\think\Cookie.php	/^    public function set(string $name, string $value, $option = null): void$/;"	v
request	vendor\topthink\framework\src\think\Cookie.php	/^        $this->request = $request;$/;"	v
request	vendor\topthink\framework\src\think\Cookie.php	/^    protected $request;$/;"	v
save	vendor\topthink\framework\src\think\Cookie.php	/^    public function save(): void$/;"	f
saveCookie	vendor\topthink\framework\src\think\Cookie.php	/^    protected function saveCookie(string $name, string $value, int $expire, string $path, string $domain, bool $secure, bool $httponly): void$/;"	f
set	vendor\topthink\framework\src\think\Cookie.php	/^    public function set(string $name, string $value, $option = null): void$/;"	f
setCookie	vendor\topthink\framework\src\think\Cookie.php	/^    protected function setCookie(string $name, string $value, int $expire, array $option = []): void$/;"	f
value	vendor\topthink\framework\src\think\Cookie.php	/^    public function forever(string $name, string $value = '', $option = null): void$/;"	v
Db	vendor\topthink\framework\src\think\Db.php	/^class Db extends DbManager$/;"	c
__make	vendor\topthink\framework\src\think\Db.php	/^    public static function __make(Event $event, Config $config, Log $log, Cache $cache)$/;"	f
config	vendor\topthink\framework\src\think\Db.php	/^        $this->config = $config;$/;"	v
db	vendor\topthink\framework\src\think\Db.php	/^        $db = new static();$/;"	v
event	vendor\topthink\framework\src\think\Db.php	/^        $this->event = $event;$/;"	v
event	vendor\topthink\framework\src\think\Db.php	/^    public function event(string $event, callable $callback): void$/;"	f
getConfig	vendor\topthink\framework\src\think\Db.php	/^    public function getConfig(string $name = '', $default = null)$/;"	f
modelMaker	vendor\topthink\framework\src\think\Db.php	/^    protected function modelMaker()$/;"	f
name	vendor\topthink\framework\src\think\Db.php	/^    public function getConfig(string $name = '', $default = null)$/;"	v
params	vendor\topthink\framework\src\think\Db.php	/^    public function trigger(string $event, $params = null, bool $once = false)$/;"	v
setConfig	vendor\topthink\framework\src\think\Db.php	/^    public function setConfig($config): void$/;"	f
setEvent	vendor\topthink\framework\src\think\Db.php	/^    public function setEvent(Event $event): void$/;"	f
trigger	vendor\topthink\framework\src\think\Db.php	/^    public function trigger(string $event, $params = null, bool $once = false)$/;"	f
Env	vendor\topthink\framework\src\think\Env.php	/^class Env implements ArrayAccess$/;"	c
__construct	vendor\topthink\framework\src\think\Env.php	/^    public function __construct()$/;"	f
__get	vendor\topthink\framework\src\think\Env.php	/^    public function __get(string $name)$/;"	f
__isset	vendor\topthink\framework\src\think\Env.php	/^    public function __isset(string $name): bool$/;"	f
__set	vendor\topthink\framework\src\think\Env.php	/^    public function __set(string $name, $value): void$/;"	f
data	vendor\topthink\framework\src\think\Env.php	/^        $this->data = $_ENV;$/;"	v
data	vendor\topthink\framework\src\think\Env.php	/^    protected $data = [];$/;"	v
default	vendor\topthink\framework\src\think\Env.php	/^    protected function getEnv(string $name, $default = null)$/;"	v
env	vendor\topthink\framework\src\think\Env.php	/^            $env = array_change_key_case($env, CASE_UPPER);$/;"	v
env	vendor\topthink\framework\src\think\Env.php	/^        $env = parse_ini_file($file, true) ?: [];$/;"	v
get	vendor\topthink\framework\src\think\Env.php	/^    public function get(string $name = null, $default = null)$/;"	f
getEnv	vendor\topthink\framework\src\think\Env.php	/^    protected function getEnv(string $name, $default = null)$/;"	f
has	vendor\topthink\framework\src\think\Env.php	/^    public function has(string $name): bool$/;"	f
k	vendor\topthink\framework\src\think\Env.php	/^                    foreach ($val as $k => $v) {$/;"	v
key	vendor\topthink\framework\src\think\Env.php	/^            foreach ($env as $key => $val) {$/;"	v
load	vendor\topthink\framework\src\think\Env.php	/^    public function load(string $file): void$/;"	f
name	vendor\topthink\framework\src\think\Env.php	/^            $name = strtoupper(str_replace('.', '_', $env));$/;"	v
name	vendor\topthink\framework\src\think\Env.php	/^        $name = strtoupper(str_replace('.', '_', $name));$/;"	v
name	vendor\topthink\framework\src\think\Env.php	/^    public function get(string $name = null, $default = null)$/;"	v
offsetExists	vendor\topthink\framework\src\think\Env.php	/^    public function offsetExists($name): bool$/;"	f
offsetGet	vendor\topthink\framework\src\think\Env.php	/^    public function offsetGet($name)$/;"	f
offsetSet	vendor\topthink\framework\src\think\Env.php	/^    public function offsetSet($name, $value): void$/;"	f
offsetUnset	vendor\topthink\framework\src\think\Env.php	/^    public function offsetUnset($name)$/;"	f
result	vendor\topthink\framework\src\think\Env.php	/^            $result = false;$/;"	v
result	vendor\topthink\framework\src\think\Env.php	/^            $result = true;$/;"	v
result	vendor\topthink\framework\src\think\Env.php	/^        $result = getenv('PHP_' . $name);$/;"	v
set	vendor\topthink\framework\src\think\Env.php	/^    public function set($env, $value = null): void$/;"	f
value	vendor\topthink\framework\src\think\Env.php	/^    public function set($env, $value = null): void$/;"	v
Event	vendor\topthink\framework\src\think\Event.php	/^class Event$/;"	c
__construct	vendor\topthink\framework\src\think\Event.php	/^    public function __construct(App $app)$/;"	f
app	vendor\topthink\framework\src\think\Event.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\Event.php	/^    protected $app;$/;"	v
bind	vendor\topthink\framework\src\think\Event.php	/^        $this->bind = array_merge($this->bind, $events);$/;"	v
bind	vendor\topthink\framework\src\think\Event.php	/^    protected $bind = [$/;"	v
bind	vendor\topthink\framework\src\think\Event.php	/^    public function bind(array $events)$/;"	f
call	vendor\topthink\framework\src\think\Event.php	/^            $call = $event;$/;"	v
call	vendor\topthink\framework\src\think\Event.php	/^            $call = [$obj, 'handle'];$/;"	v
dispatch	vendor\topthink\framework\src\think\Event.php	/^    protected function dispatch($event, $params = null)$/;"	f
event	vendor\topthink\framework\src\think\Event.php	/^                $event = $this->bind[$event];$/;"	v
event	vendor\topthink\framework\src\think\Event.php	/^            $event  = get_class($event);$/;"	v
event	vendor\topthink\framework\src\think\Event.php	/^            $event = $this->bind[$event];$/;"	v
event	vendor\topthink\framework\src\think\Event.php	/^        foreach ($events as $event => $listeners) {$/;"	v
first	vendor\topthink\framework\src\think\Event.php	/^    public function listen(string $event, $listener, bool $first = false)$/;"	v
hasListener	vendor\topthink\framework\src\think\Event.php	/^    public function hasListener(string $event): bool$/;"	f
key	vendor\topthink\framework\src\think\Event.php	/^        foreach ($listeners as $key => $listener) {$/;"	v
listen	vendor\topthink\framework\src\think\Event.php	/^    public function listen(string $event, $listener, bool $first = false)$/;"	f
listenEvents	vendor\topthink\framework\src\think\Event.php	/^    public function listenEvents(array $events)$/;"	f
listener	vendor\topthink\framework\src\think\Event.php	/^    protected $listener = [];$/;"	v
listeners	vendor\topthink\framework\src\think\Event.php	/^        $listeners = $this->listener[$event] ?? [];$/;"	v
methods	vendor\topthink\framework\src\think\Event.php	/^        $methods = $reflect->getMethods(ReflectionMethod::IS_PUBLIC);$/;"	v
name	vendor\topthink\framework\src\think\Event.php	/^            $name = $method->getName();$/;"	v
obj	vendor\topthink\framework\src\think\Event.php	/^            $obj  = $this->app->make($event);$/;"	v
observe	vendor\topthink\framework\src\think\Event.php	/^    public function observe($observer, string $prefix = '')$/;"	f
observer	vendor\topthink\framework\src\think\Event.php	/^            $observer = $this->app->make($observer);$/;"	v
params	vendor\topthink\framework\src\think\Event.php	/^            $params = $event;$/;"	v
params	vendor\topthink\framework\src\think\Event.php	/^    protected function dispatch($event, $params = null)$/;"	v
params	vendor\topthink\framework\src\think\Event.php	/^    public function trigger($event, $params = null, bool $once = false)$/;"	v
params	vendor\topthink\framework\src\think\Event.php	/^    public function until($event, $params = null)$/;"	v
prefix	vendor\topthink\framework\src\think\Event.php	/^            $prefix = $reflectProperty->getValue($observer);$/;"	v
prefix	vendor\topthink\framework\src\think\Event.php	/^    public function observe($observer, string $prefix = '')$/;"	v
reflect	vendor\topthink\framework\src\think\Event.php	/^        $reflect = new ReflectionClass($observer);$/;"	v
reflectProperty	vendor\topthink\framework\src\think\Event.php	/^            $reflectProperty = $reflect->getProperty('eventPrefix');$/;"	v
remove	vendor\topthink\framework\src\think\Event.php	/^    public function remove(string $event): void$/;"	f
result	vendor\topthink\framework\src\think\Event.php	/^        $result    = [];$/;"	v
subscribe	vendor\topthink\framework\src\think\Event.php	/^    public function subscribe($subscriber)$/;"	f
subscriber	vendor\topthink\framework\src\think\Event.php	/^                $subscriber = $this->app->make($subscriber);$/;"	v
subscribers	vendor\topthink\framework\src\think\Event.php	/^        $subscribers = (array) $subscriber;$/;"	v
trigger	vendor\topthink\framework\src\think\Event.php	/^    public function trigger($event, $params = null, bool $once = false)$/;"	f
until	vendor\topthink\framework\src\think\Event.php	/^    public function until($event, $params = null)$/;"	f
withEvent	vendor\topthink\framework\src\think\Event.php	/^        $this->withEvent = $event;$/;"	v
withEvent	vendor\topthink\framework\src\think\Event.php	/^    protected $withEvent = true;$/;"	v
withEvent	vendor\topthink\framework\src\think\Event.php	/^    public function withEvent(bool $event)$/;"	f
Exception	vendor\topthink\framework\src\think\Exception.php	/^class Exception extends \\Exception$/;"	c
data	vendor\topthink\framework\src\think\Exception.php	/^    protected $data = [];$/;"	v
getData	vendor\topthink\framework\src\think\Exception.php	/^    final public function getData()$/;"	f
setData	vendor\topthink\framework\src\think\Exception.php	/^    final protected function setData(string $label, array $data)$/;"	f
Facade	vendor\topthink\framework\src\think\Facade.php	/^class Facade$/;"	c
__callStatic	vendor\topthink\framework\src\think\Facade.php	/^    public static function __callStatic($method, $params)$/;"	f
alwaysNewInstance	vendor\topthink\framework\src\think\Facade.php	/^    protected static $alwaysNewInstance;$/;"	v
args	vendor\topthink\framework\src\think\Facade.php	/^            $args        = [];$/;"	v
args	vendor\topthink\framework\src\think\Facade.php	/^    public static function make(string $class, $args = [], $newInstance = false)$/;"	v
class	vendor\topthink\framework\src\think\Facade.php	/^            $class = $facadeClass;$/;"	v
class	vendor\topthink\framework\src\think\Facade.php	/^        $class = $class ?: static::class;$/;"	v
class	vendor\topthink\framework\src\think\Facade.php	/^    protected static function createFacade(string $class = '', array $args = [], bool $newInstance = false)$/;"	v
createFacade	vendor\topthink\framework\src\think\Facade.php	/^    protected static function createFacade(string $class = '', array $args = [], bool $newInstance = false)$/;"	f
facadeClass	vendor\topthink\framework\src\think\Facade.php	/^        $facadeClass = static::getFacadeClass();$/;"	v
getFacadeClass	vendor\topthink\framework\src\think\Facade.php	/^    protected static function getFacadeClass()$/;"	f
instance	vendor\topthink\framework\src\think\Facade.php	/^    public static function instance(...$args)$/;"	f
make	vendor\topthink\framework\src\think\Facade.php	/^    public static function make(string $class, $args = [], $newInstance = false)$/;"	f
newInstance	vendor\topthink\framework\src\think\Facade.php	/^            $newInstance = true;$/;"	v
File	vendor\topthink\framework\src\think\File.php	/^class File extends SplFileInfo$/;"	c
__construct	vendor\topthink\framework\src\think\File.php	/^    public function __construct(string $path, bool $checkPath = true)$/;"	f
checkPath	vendor\topthink\framework\src\think\File.php	/^    public function __construct(string $path, bool $checkPath = true)$/;"	v
error	vendor\topthink\framework\src\think\File.php	/^            $error = $msg;$/;"	v
extension	vendor\topthink\framework\src\think\File.php	/^    public function extension(): string$/;"	f
finfo	vendor\topthink\framework\src\think\File.php	/^        $finfo = finfo_open(FILEINFO_MIME_TYPE);$/;"	v
getMime	vendor\topthink\framework\src\think\File.php	/^    public function getMime(): string$/;"	f
getName	vendor\topthink\framework\src\think\File.php	/^    protected function getName(string $name): string$/;"	f
getTargetFile	vendor\topthink\framework\src\think\File.php	/^    protected function getTargetFile(string $directory, string $name = null): File$/;"	f
hash	vendor\topthink\framework\src\think\File.php	/^                        $hash           = $this->hash($rule);$/;"	v
hash	vendor\topthink\framework\src\think\File.php	/^    protected $hash = [];$/;"	v
hash	vendor\topthink\framework\src\think\File.php	/^    public function hash(string $type = 'sha1'): string$/;"	f
hashName	vendor\topthink\framework\src\think\File.php	/^                        $this->hashName = call_user_func($rule);$/;"	v
hashName	vendor\topthink\framework\src\think\File.php	/^                        $this->hashName = date('Ymd') . DIRECTORY_SEPARATOR . md5((string) microtime(true));$/;"	v
hashName	vendor\topthink\framework\src\think\File.php	/^                        $this->hashName = substr($hash, 0, 2) . DIRECTORY_SEPARATOR . substr($hash, 2);$/;"	v
hashName	vendor\topthink\framework\src\think\File.php	/^                $this->hashName = call_user_func_array($rule, [$this]);$/;"	v
hashName	vendor\topthink\framework\src\think\File.php	/^    protected $hashName;$/;"	v
hashName	vendor\topthink\framework\src\think\File.php	/^    public function hashName($rule = 'date'): string$/;"	f
md5	vendor\topthink\framework\src\think\File.php	/^    public function md5(): string$/;"	f
move	vendor\topthink\framework\src\think\File.php	/^    public function move(string $directory, string $name = null): File$/;"	f
name	vendor\topthink\framework\src\think\File.php	/^    protected function getTargetFile(string $directory, string $name = null): File$/;"	v
name	vendor\topthink\framework\src\think\File.php	/^    public function move(string $directory, string $name = null): File$/;"	v
originalName	vendor\topthink\framework\src\think\File.php	/^        $originalName = false === $pos ? $originalName : substr($originalName, $pos + 1);$/;"	v
originalName	vendor\topthink\framework\src\think\File.php	/^        $originalName = str_replace('\\\\', '\/', $name);$/;"	v
pos	vendor\topthink\framework\src\think\File.php	/^        $pos          = strrpos($originalName, '\/');$/;"	v
renamed	vendor\topthink\framework\src\think\File.php	/^        $renamed = rename($this->getPathname(), $target);$/;"	v
sha1	vendor\topthink\framework\src\think\File.php	/^    public function sha1(): string$/;"	f
target	vendor\topthink\framework\src\think\File.php	/^        $target = $this->getTargetFile($directory, $name);$/;"	v
target	vendor\topthink\framework\src\think\File.php	/^        $target = rtrim($directory, '\/\\\\') . \\DIRECTORY_SEPARATOR . (null === $name ? $this->getBasename() : $this->getName($name));$/;"	v
type	vendor\topthink\framework\src\think\File.php	/^    public function hash(string $type = 'sha1'): string$/;"	v
Filesystem	vendor\topthink\framework\src\think\Filesystem.php	/^class Filesystem extends Manager$/;"	c
disk	vendor\topthink\framework\src\think\Filesystem.php	/^    public function disk(string $name = null): Driver$/;"	f
getConfig	vendor\topthink\framework\src\think\Filesystem.php	/^    public function getConfig(string $name = null, $default = null)$/;"	f
getDefaultDriver	vendor\topthink\framework\src\think\Filesystem.php	/^    public function getDefaultDriver()$/;"	f
getDiskConfig	vendor\topthink\framework\src\think\Filesystem.php	/^    public function getDiskConfig($disk, $name = null, $default = null)$/;"	f
name	vendor\topthink\framework\src\think\Filesystem.php	/^    public function disk(string $name = null): Driver$/;"	v
name	vendor\topthink\framework\src\think\Filesystem.php	/^    public function getConfig(string $name = null, $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Filesystem.php	/^    public function getDiskConfig($disk, $name = null, $default = null)$/;"	v
namespace	vendor\topthink\framework\src\think\Filesystem.php	/^    protected $namespace = '\\\\think\\\\filesystem\\\\driver\\\\';$/;"	v
resolveConfig	vendor\topthink\framework\src\think\Filesystem.php	/^    protected function resolveConfig(string $name)$/;"	f
resolveType	vendor\topthink\framework\src\think\Filesystem.php	/^    protected function resolveType(string $name)$/;"	f
Http	vendor\topthink\framework\src\think\Http.php	/^class Http$/;"	c
__construct	vendor\topthink\framework\src\think\Http.php	/^    public function __construct(App $app)$/;"	f
app	vendor\topthink\framework\src\think\Http.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\Http.php	/^    protected $app;$/;"	v
bind	vendor\topthink\framework\src\think\Http.php	/^    public function setBind(bool $bind = true)$/;"	v
dispatchToRoute	vendor\topthink\framework\src\think\Http.php	/^    protected function dispatchToRoute($request)$/;"	f
end	vendor\topthink\framework\src\think\Http.php	/^    public function end(Response $response): void$/;"	f
files	vendor\topthink\framework\src\think\Http.php	/^            $files = glob($routePath . '*.php');$/;"	v
getName	vendor\topthink\framework\src\think\Http.php	/^    public function getName(): string$/;"	f
getPath	vendor\topthink\framework\src\think\Http.php	/^    public function getPath(): string$/;"	f
getRoutePath	vendor\topthink\framework\src\think\Http.php	/^    public function getRoutePath(): string$/;"	f
initialize	vendor\topthink\framework\src\think\Http.php	/^    protected function initialize()$/;"	f
isBind	vendor\topthink\framework\src\think\Http.php	/^        $this->isBind = $bind;$/;"	v
isBind	vendor\topthink\framework\src\think\Http.php	/^    protected $isBind = false;$/;"	v
isBind	vendor\topthink\framework\src\think\Http.php	/^    public function isBind(): bool$/;"	f
loadMiddleware	vendor\topthink\framework\src\think\Http.php	/^    protected function loadMiddleware(): void$/;"	f
loadRoutes	vendor\topthink\framework\src\think\Http.php	/^    protected function loadRoutes(): void$/;"	f
name	vendor\topthink\framework\src\think\Http.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\framework\src\think\Http.php	/^    protected $name;$/;"	v
name	vendor\topthink\framework\src\think\Http.php	/^    public function name(string $name)$/;"	f
path	vendor\topthink\framework\src\think\Http.php	/^        $this->path = $path;$/;"	v
path	vendor\topthink\framework\src\think\Http.php	/^    protected $path;$/;"	v
path	vendor\topthink\framework\src\think\Http.php	/^    public function path(string $path)$/;"	f
renderException	vendor\topthink\framework\src\think\Http.php	/^    protected function renderException($request, Throwable $e)$/;"	f
reportException	vendor\topthink\framework\src\think\Http.php	/^    protected function reportException(Throwable $e)$/;"	f
request	vendor\topthink\framework\src\think\Http.php	/^        $request = $request ?? $this->app->make('request', [], true);$/;"	v
request	vendor\topthink\framework\src\think\Http.php	/^    public function run(Request $request = null): Response$/;"	v
response	vendor\topthink\framework\src\think\Http.php	/^            $response = $this->renderException($request, $e);$/;"	v
response	vendor\topthink\framework\src\think\Http.php	/^            $response = $this->runWithRequest($request);$/;"	v
routePath	vendor\topthink\framework\src\think\Http.php	/^        $routePath = $this->getRoutePath();$/;"	v
routePath	vendor\topthink\framework\src\think\Http.php	/^        $this->routePath = $path;$/;"	v
routePath	vendor\topthink\framework\src\think\Http.php	/^        $this->routePath = $this->app->getRootPath() . 'route' . DIRECTORY_SEPARATOR;$/;"	v
run	vendor\topthink\framework\src\think\Http.php	/^    public function run(Request $request = null): Response$/;"	f
runWithRequest	vendor\topthink\framework\src\think\Http.php	/^    protected function runWithRequest(Request $request)$/;"	f
setBind	vendor\topthink\framework\src\think\Http.php	/^    public function setBind(bool $bind = true)$/;"	f
setRoutePath	vendor\topthink\framework\src\think\Http.php	/^    public function setRoutePath(string $path): void$/;"	f
withRoute	vendor\topthink\framework\src\think\Http.php	/^        $withRoute = $this->app->config->get('app.with_route', true) ? function () {$/;"	v
Lang	vendor\topthink\framework\src\think\Lang.php	/^class Lang$/;"	c
__construct	vendor\topthink\framework\src\think\Lang.php	/^    public function __construct(array $config = [])$/;"	f
__make	vendor\topthink\framework\src\think\Lang.php	/^    public static function __make(Config $config)$/;"	f
config	vendor\topthink\framework\src\think\Lang.php	/^        $this->config = array_merge($this->config, array_change_key_case($config));$/;"	v
config	vendor\topthink\framework\src\think\Lang.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\Lang.php	/^    public function __construct(array $config = [])$/;"	v
defaultLangSet	vendor\topthink\framework\src\think\Lang.php	/^    public function defaultLangSet()$/;"	f
detect	vendor\topthink\framework\src\think\Lang.php	/^    public function detect(Request $request): string$/;"	f
get	vendor\topthink\framework\src\think\Lang.php	/^    public function get(string $name = null, array $vars = [], string $range = '')$/;"	f
getLangSet	vendor\topthink\framework\src\think\Lang.php	/^    public function getLangSet(): string$/;"	f
has	vendor\topthink\framework\src\think\Lang.php	/^    public function has(string $name, string $range = ''): bool$/;"	f
lang	vendor\topthink\framework\src\think\Lang.php	/^                $lang   = array_change_key_case($result) + $lang;$/;"	v
lang	vendor\topthink\framework\src\think\Lang.php	/^        $lang = [];$/;"	v
lang	vendor\topthink\framework\src\think\Lang.php	/^    private $lang = [];$/;"	v
langSet	vendor\topthink\framework\src\think\Lang.php	/^                    $langSet = $this->config['accept_language'][$langSet];$/;"	v
langSet	vendor\topthink\framework\src\think\Lang.php	/^                $langSet = strtolower($matches[1]);$/;"	v
langSet	vendor\topthink\framework\src\think\Lang.php	/^            $langSet = strtolower($request->cookie($this->config['cookie_var']));$/;"	v
langSet	vendor\topthink\framework\src\think\Lang.php	/^            $langSet = strtolower($request->get($this->config['detect_var']));$/;"	v
langSet	vendor\topthink\framework\src\think\Lang.php	/^        $langSet = '';$/;"	v
load	vendor\topthink\framework\src\think\Lang.php	/^    public function load($file, $range = ''): array$/;"	f
match	vendor\topthink\framework\src\think\Lang.php	/^            $match = preg_match('\/^([a-z\\d\\-]+)\/i', $request->server('HTTP_ACCEPT_LANGUAGE'), $matches);$/;"	v
name	vendor\topthink\framework\src\think\Lang.php	/^    public function get(string $name = null, array $vars = [], string $range = '')$/;"	v
parse	vendor\topthink\framework\src\think\Lang.php	/^    protected function parse(string $file): array$/;"	f
range	vendor\topthink\framework\src\think\Lang.php	/^            $this->range = $langSet;$/;"	v
range	vendor\topthink\framework\src\think\Lang.php	/^        $range = $range ?: $this->range;$/;"	v
range	vendor\topthink\framework\src\think\Lang.php	/^        $this->range  = $this->config['default_lang'];$/;"	v
range	vendor\topthink\framework\src\think\Lang.php	/^        $this->range = $lang;$/;"	v
range	vendor\topthink\framework\src\think\Lang.php	/^    private $range = 'zh-cn';$/;"	v
range	vendor\topthink\framework\src\think\Lang.php	/^    public function has(string $name, string $range = ''): bool$/;"	v
range	vendor\topthink\framework\src\think\Lang.php	/^    public function load($file, $range = ''): array$/;"	v
replace	vendor\topthink\framework\src\think\Lang.php	/^                $replace = array_keys($vars);$/;"	v
result	vendor\topthink\framework\src\think\Lang.php	/^                    $result = yaml_parse_file($file);$/;"	v
result	vendor\topthink\framework\src\think\Lang.php	/^                $result = $this->parse($_file);$/;"	v
result	vendor\topthink\framework\src\think\Lang.php	/^                $result = include $file;$/;"	v
saveToCookie	vendor\topthink\framework\src\think\Lang.php	/^    public function saveToCookie(Cookie $cookie)$/;"	f
setLangSet	vendor\topthink\framework\src\think\Lang.php	/^    public function setLangSet(string $lang): void$/;"	f
type	vendor\topthink\framework\src\think\Lang.php	/^        $type = pathinfo($file, PATHINFO_EXTENSION);$/;"	v
v	vendor\topthink\framework\src\think\Lang.php	/^                    $v = "{:{$v}}";$/;"	v
value	vendor\topthink\framework\src\think\Lang.php	/^                $value = call_user_func_array('sprintf', $vars);$/;"	v
value	vendor\topthink\framework\src\think\Lang.php	/^                $value = str_replace($replace, $vars, $value);$/;"	v
value	vendor\topthink\framework\src\think\Lang.php	/^            $value = $this->lang[$range][strtolower($name)] ?? $name;$/;"	v
value	vendor\topthink\framework\src\think\Lang.php	/^            $value = $this->lang[$range][strtolower($name1)][$name2] ?? $name;$/;"	v
Log	vendor\topthink\framework\src\think\Log.php	/^class Log extends Manager implements LoggerInterface$/;"	c
__call	vendor\topthink\framework\src\think\Log.php	/^    public function __call($method, $parameters)$/;"	f
alert	vendor\topthink\framework\src\think\Log.php	/^    public function alert($message, array $context = []): void$/;"	f
allow	vendor\topthink\framework\src\think\Log.php	/^        $allow = array_merge($this->getConfig("level", []), $this->getChannelConfig($name, "level", []));$/;"	v
channel	vendor\topthink\framework\src\think\Log.php	/^            $channel = array_keys($this->drivers);$/;"	v
channel	vendor\topthink\framework\src\think\Log.php	/^        $channel = $this->getConfig('type_channel.' . $type);$/;"	v
channel	vendor\topthink\framework\src\think\Log.php	/^    public function channel($name = null)$/;"	f
channel	vendor\topthink\framework\src\think\Log.php	/^    public function getLog(string $channel = null): array$/;"	v
clear	vendor\topthink\framework\src\think\Log.php	/^    public function clear($channel = '*')$/;"	f
close	vendor\topthink\framework\src\think\Log.php	/^    public function close($channel = '*')$/;"	f
context	vendor\topthink\framework\src\think\Log.php	/^    public function alert($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function critical($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function debug($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function emergency($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function error($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function info($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function log($level, $message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function notice($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function sql($message, array $context = []): void$/;"	v
context	vendor\topthink\framework\src\think\Log.php	/^    public function warning($message, array $context = []): void$/;"	v
createDriver	vendor\topthink\framework\src\think\Log.php	/^    public function createDriver(string $name)$/;"	f
critical	vendor\topthink\framework\src\think\Log.php	/^    public function critical($message, array $context = []): void$/;"	f
debug	vendor\topthink\framework\src\think\Log.php	/^    public function debug($message, array $context = []): void$/;"	f
driver	vendor\topthink\framework\src\think\Log.php	/^        $driver = parent::createDriver($name);$/;"	v
emergency	vendor\topthink\framework\src\think\Log.php	/^    public function emergency($message, array $context = []): void$/;"	f
error	vendor\topthink\framework\src\think\Log.php	/^    public function error($message, array $context = []): void$/;"	f
getChannelConfig	vendor\topthink\framework\src\think\Log.php	/^    public function getChannelConfig($channel, $name = null, $default = null)$/;"	f
getConfig	vendor\topthink\framework\src\think\Log.php	/^    public function getConfig(string $name = null, $default = null)$/;"	f
getDefaultDriver	vendor\topthink\framework\src\think\Log.php	/^    public function getDefaultDriver()$/;"	f
getLog	vendor\topthink\framework\src\think\Log.php	/^    public function getLog(string $channel = null): array$/;"	f
info	vendor\topthink\framework\src\think\Log.php	/^    public function info($message, array $context = []): void$/;"	f
lazy	vendor\topthink\framework\src\think\Log.php	/^        $lazy  = !$this->getChannelConfig($name, "realtime_write", false) && !$this->app->runningInConsole();$/;"	v
listen	vendor\topthink\framework\src\think\Log.php	/^    public function listen($listener)$/;"	f
log	vendor\topthink\framework\src\think\Log.php	/^    public function log($level, $message, array $context = []): void$/;"	f
name	vendor\topthink\framework\src\think\Log.php	/^    public function getChannelConfig($channel, $name = null, $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Log.php	/^    public function getConfig(string $name = null, $default = null)$/;"	v
namespace	vendor\topthink\framework\src\think\Log.php	/^    protected $namespace = '\\\\think\\\\log\\\\driver\\\\';$/;"	v
notice	vendor\topthink\framework\src\think\Log.php	/^    public function notice($message, array $context = []): void$/;"	f
record	vendor\topthink\framework\src\think\Log.php	/^    public function record($msg, string $type = 'info', array $context = [], bool $lazy = true)$/;"	f
resolveConfig	vendor\topthink\framework\src\think\Log.php	/^    protected function resolveConfig(string $name)$/;"	f
resolveType	vendor\topthink\framework\src\think\Log.php	/^    protected function resolveType(string $name)$/;"	f
save	vendor\topthink\framework\src\think\Log.php	/^    public function save(): bool$/;"	f
sql	vendor\topthink\framework\src\think\Log.php	/^    public function sql($message, array $context = []): void$/;"	f
type	vendor\topthink\framework\src\think\Log.php	/^    public function record($msg, string $type = 'info', array $context = [], bool $lazy = true)$/;"	v
type	vendor\topthink\framework\src\think\Log.php	/^    public function write($msg, string $type = 'info', array $context = [])$/;"	v
warning	vendor\topthink\framework\src\think\Log.php	/^    public function warning($message, array $context = []): void$/;"	f
write	vendor\topthink\framework\src\think\Log.php	/^    public function write($msg, string $type = 'info', array $context = [])$/;"	f
Manager	vendor\topthink\framework\src\think\Manager.php	/^abstract class Manager$/;"	c
__call	vendor\topthink\framework\src\think\Manager.php	/^    public function __call($method, $parameters)$/;"	f
__construct	vendor\topthink\framework\src\think\Manager.php	/^    public function __construct(App $app)$/;"	f
app	vendor\topthink\framework\src\think\Manager.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\Manager.php	/^    protected $app;$/;"	v
class	vendor\topthink\framework\src\think\Manager.php	/^            $class = false !== strpos($type, '\\\\') ? $type : $this->namespace . Str::studly($type);$/;"	v
class	vendor\topthink\framework\src\think\Manager.php	/^        $class = $this->resolveClass($type);$/;"	v
config	vendor\topthink\framework\src\think\Manager.php	/^        $config = $this->resolveConfig($name);$/;"	v
createDriver	vendor\topthink\framework\src\think\Manager.php	/^    protected function createDriver(string $name)$/;"	f
driver	vendor\topthink\framework\src\think\Manager.php	/^    protected function driver(string $name = null)$/;"	f
drivers	vendor\topthink\framework\src\think\Manager.php	/^    protected $drivers = [];$/;"	v
forgetDriver	vendor\topthink\framework\src\think\Manager.php	/^    public function forgetDriver($name = null)$/;"	f
getDefaultDriver	vendor\topthink\framework\src\think\Manager.php	/^    abstract public function getDefaultDriver();$/;"	f
getDriver	vendor\topthink\framework\src\think\Manager.php	/^    protected function getDriver(string $name)$/;"	f
method	vendor\topthink\framework\src\think\Manager.php	/^        $method = 'create' . Str::studly($type) . 'Driver';$/;"	v
name	vendor\topthink\framework\src\think\Manager.php	/^        $name = $name ?: $this->getDefaultDriver();$/;"	v
name	vendor\topthink\framework\src\think\Manager.php	/^        $name = $name ?? $this->getDefaultDriver();$/;"	v
name	vendor\topthink\framework\src\think\Manager.php	/^    protected function driver(string $name = null)$/;"	v
namespace	vendor\topthink\framework\src\think\Manager.php	/^    protected $namespace = null;$/;"	v
params	vendor\topthink\framework\src\think\Manager.php	/^        $params = $this->resolveParams($name);$/;"	v
resolveClass	vendor\topthink\framework\src\think\Manager.php	/^    protected function resolveClass(string $type): string$/;"	f
resolveConfig	vendor\topthink\framework\src\think\Manager.php	/^    protected function resolveConfig(string $name)$/;"	f
resolveParams	vendor\topthink\framework\src\think\Manager.php	/^    protected function resolveParams($name): array$/;"	f
resolveType	vendor\topthink\framework\src\think\Manager.php	/^    protected function resolveType(string $name)$/;"	f
type	vendor\topthink\framework\src\think\Manager.php	/^        $type = $this->resolveType($name);$/;"	v
Middleware	vendor\topthink\framework\src\think\Middleware.php	/^class Middleware$/;"	c
__construct	vendor\topthink\framework\src\think\Middleware.php	/^    public function __construct(App $app)$/;"	f
aPriority	vendor\topthink\framework\src\think\Middleware.php	/^            $aPriority = $this->getMiddlewarePriority($priority, $a);$/;"	v
add	vendor\topthink\framework\src\think\Middleware.php	/^    public function add($middleware, string $type = 'global'): void$/;"	f
alias	vendor\topthink\framework\src\think\Middleware.php	/^        $alias = $this->app->config->get('middleware.alias', []);$/;"	v
all	vendor\topthink\framework\src\think\Middleware.php	/^    public function all(string $type = 'global'): array$/;"	f
app	vendor\topthink\framework\src\think\Middleware.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\Middleware.php	/^    protected $app;$/;"	v
bPriority	vendor\topthink\framework\src\think\Middleware.php	/^            $bPriority = $this->getMiddlewarePriority($priority, $b);$/;"	v
buildMiddleware	vendor\topthink\framework\src\think\Middleware.php	/^    protected function buildMiddleware($middleware, string $type): array$/;"	f
call	vendor\topthink\framework\src\think\Middleware.php	/^                        $call = [$this->app->make($call[0]), $call[1]];$/;"	v
controller	vendor\topthink\framework\src\think\Middleware.php	/^    public function controller($middleware): void$/;"	f
end	vendor\topthink\framework\src\think\Middleware.php	/^    public function end(Response $response)$/;"	f
getMiddlewarePriority	vendor\topthink\framework\src\think\Middleware.php	/^    protected function getMiddlewarePriority($priority, $middleware)$/;"	f
handleException	vendor\topthink\framework\src\think\Middleware.php	/^    public function handleException($passable, Throwable $e)$/;"	f
handler	vendor\topthink\framework\src\think\Middleware.php	/^        $handler = $this->app->make(Handle::class);$/;"	v
import	vendor\topthink\framework\src\think\Middleware.php	/^    public function import(array $middlewares = [], string $type = 'global'): void$/;"	f
index	vendor\topthink\framework\src\think\Middleware.php	/^            $index = array_search($call[0], array_reverse($priority));$/;"	v
instance	vendor\topthink\framework\src\think\Middleware.php	/^                    $instance = $this->app->make($call[0]);$/;"	v
middleware	vendor\topthink\framework\src\think\Middleware.php	/^            $middleware = $alias[$middleware];$/;"	v
middleware	vendor\topthink\framework\src\think\Middleware.php	/^        $middleware = $this->buildMiddleware($middleware, $type);$/;"	v
middlewares	vendor\topthink\framework\src\think\Middleware.php	/^    public function import(array $middlewares = [], string $type = 'global'): void$/;"	v
pipeline	vendor\topthink\framework\src\think\Middleware.php	/^    public function pipeline(string $type = 'global')$/;"	f
priority	vendor\topthink\framework\src\think\Middleware.php	/^        $priority = $this->app->config->get('middleware.priority', []);$/;"	v
queue	vendor\topthink\framework\src\think\Middleware.php	/^    protected $queue = [];$/;"	v
response	vendor\topthink\framework\src\think\Middleware.php	/^                    $response = call_user_func($call, $request, $next, $param);$/;"	v
response	vendor\topthink\framework\src\think\Middleware.php	/^        $response = $handler->render($passable, $e);$/;"	v
route	vendor\topthink\framework\src\think\Middleware.php	/^    public function route($middleware): void$/;"	f
sortMiddleware	vendor\topthink\framework\src\think\Middleware.php	/^    protected function sortMiddleware(array $middlewares)$/;"	f
type	vendor\topthink\framework\src\think\Middleware.php	/^    public function add($middleware, string $type = 'global'): void$/;"	v
type	vendor\topthink\framework\src\think\Middleware.php	/^    public function all(string $type = 'global'): array$/;"	v
type	vendor\topthink\framework\src\think\Middleware.php	/^    public function pipeline(string $type = 'global')$/;"	v
type	vendor\topthink\framework\src\think\Middleware.php	/^    public function unshift($middleware, string $type = 'global')$/;"	v
unshift	vendor\topthink\framework\src\think\Middleware.php	/^    public function unshift($middleware, string $type = 'global')$/;"	f
Pipeline	vendor\topthink\framework\src\think\Pipeline.php	/^class Pipeline$/;"	c
carry	vendor\topthink\framework\src\think\Pipeline.php	/^    protected function carry()$/;"	f
exceptionHandler	vendor\topthink\framework\src\think\Pipeline.php	/^        $this->exceptionHandler = $handler;$/;"	v
exceptionHandler	vendor\topthink\framework\src\think\Pipeline.php	/^    protected $exceptionHandler;$/;"	v
handleException	vendor\topthink\framework\src\think\Pipeline.php	/^    protected function handleException($passable, Throwable $e)$/;"	f
passable	vendor\topthink\framework\src\think\Pipeline.php	/^        $this->passable = $passable;$/;"	v
passable	vendor\topthink\framework\src\think\Pipeline.php	/^    protected $passable;$/;"	v
pipeline	vendor\topthink\framework\src\think\Pipeline.php	/^        $pipeline = array_reduce($/;"	v
pipes	vendor\topthink\framework\src\think\Pipeline.php	/^        $this->pipes = is_array($pipes) ? $pipes : func_get_args();$/;"	v
pipes	vendor\topthink\framework\src\think\Pipeline.php	/^    protected $pipes = [];$/;"	v
send	vendor\topthink\framework\src\think\Pipeline.php	/^    public function send($passable)$/;"	f
then	vendor\topthink\framework\src\think\Pipeline.php	/^    public function then(Closure $destination)$/;"	f
through	vendor\topthink\framework\src\think\Pipeline.php	/^    public function through($pipes)$/;"	f
whenException	vendor\topthink\framework\src\think\Pipeline.php	/^    public function whenException($handler)$/;"	f
IPBin	vendor\topthink\framework\src\think\Request.php	/^            $IPBin = vsprintf('%016b%016b%016b%016b%016b%016b%016b%016b', $IPHex);$/;"	v
IPBin	vendor\topthink\framework\src\think\Request.php	/^            $IPBin = vsprintf('%08b%08b%08b%08b', $IPHex);$/;"	v
IPHex	vendor\topthink\framework\src\think\Request.php	/^            $IPHex = str_split(bin2hex(inet_pton($ip)), 2);$/;"	v
IPHex	vendor\topthink\framework\src\think\Request.php	/^            $IPHex = str_split(bin2hex(inet_pton($ip)), 4);$/;"	v
Request	vendor\topthink\framework\src\think\Request.php	/^class Request$/;"	c
__construct	vendor\topthink\framework\src\think\Request.php	/^    public function __construct()$/;"	f
__get	vendor\topthink\framework\src\think\Request.php	/^    public function __get(string $name)$/;"	f
__isset	vendor\topthink\framework\src\think\Request.php	/^    public function __isset(string $name): bool$/;"	f
__make	vendor\topthink\framework\src\think\Request.php	/^    public static function __make(App $app)$/;"	f
__set	vendor\topthink\framework\src\think\Request.php	/^    public function __set(string $name, $value)$/;"	f
accept	vendor\topthink\framework\src\think\Request.php	/^        $accept = $this->server('HTTP_ACCEPT');$/;"	v
acceptType	vendor\topthink\framework\src\think\Request.php	/^        $acceptType = $this->type();$/;"	v
action	vendor\topthink\framework\src\think\Request.php	/^        $this->action = $action;$/;"	v
action	vendor\topthink\framework\src\think\Request.php	/^    protected $action;$/;"	v
action	vendor\topthink\framework\src\think\Request.php	/^    public function action(bool $convert = false): string$/;"	f
ajax	vendor\topthink\framework\src\think\Request.php	/^    public function isAjax(bool $ajax = false): bool$/;"	v
array	vendor\topthink\framework\src\think\Request.php	/^            $array = $this->dealUploadFile($files, $name);$/;"	v
array	vendor\topthink\framework\src\think\Request.php	/^            $array = explode(',', $val);$/;"	v
array	vendor\topthink\framework\src\think\Request.php	/^        $array = [];$/;"	v
base	vendor\topthink\framework\src\think\Request.php	/^        $base = $this->root();$/;"	v
baseFile	vendor\topthink\framework\src\think\Request.php	/^            $this->baseFile = $url;$/;"	v
baseFile	vendor\topthink\framework\src\think\Request.php	/^    protected $baseFile;$/;"	v
baseFile	vendor\topthink\framework\src\think\Request.php	/^    public function baseFile(bool $complete = false): string$/;"	f
baseUrl	vendor\topthink\framework\src\think\Request.php	/^            $this->baseUrl = strpos($str, '?') ? strstr($str, '?', true) : $str;$/;"	v
baseUrl	vendor\topthink\framework\src\think\Request.php	/^        $this->baseUrl = $url;$/;"	v
baseUrl	vendor\topthink\framework\src\think\Request.php	/^    protected $baseUrl;$/;"	v
baseUrl	vendor\topthink\framework\src\think\Request.php	/^    public function baseUrl(bool $complete = false): string$/;"	f
buildToken	vendor\topthink\framework\src\think\Request.php	/^    public function buildToken(string $name = '__token__', $type = 'md5'): string$/;"	f
checkToken	vendor\topthink\framework\src\think\Request.php	/^    public function checkToken(string $token = '__token__', array $data = []): bool$/;"	f
complete	vendor\topthink\framework\src\think\Request.php	/^    public function baseFile(bool $complete = false): string$/;"	v
complete	vendor\topthink\framework\src\think\Request.php	/^    public function baseUrl(bool $complete = false): string$/;"	v
complete	vendor\topthink\framework\src\think\Request.php	/^    public function root(bool $complete = false): string$/;"	v
complete	vendor\topthink\framework\src\think\Request.php	/^    public function url(bool $complete = false): string$/;"	v
content	vendor\topthink\framework\src\think\Request.php	/^            $this->content = $this->input;$/;"	v
content	vendor\topthink\framework\src\think\Request.php	/^    protected $content;$/;"	v
contentType	vendor\topthink\framework\src\think\Request.php	/^        $contentType = $this->server('CONTENT_TYPE');$/;"	v
contentType	vendor\topthink\framework\src\think\Request.php	/^    public function contentType(): string$/;"	f
controller	vendor\topthink\framework\src\think\Request.php	/^        $this->controller = $controller;$/;"	v
controller	vendor\topthink\framework\src\think\Request.php	/^    protected $controller;$/;"	v
controller	vendor\topthink\framework\src\think\Request.php	/^    public function controller(bool $convert = false): string$/;"	f
convert	vendor\topthink\framework\src\think\Request.php	/^    public function action(bool $convert = false): string$/;"	v
convert	vendor\topthink\framework\src\think\Request.php	/^    public function controller(bool $convert = false): string$/;"	v
cookie	vendor\topthink\framework\src\think\Request.php	/^        $this->cookie = $cookie;$/;"	v
cookie	vendor\topthink\framework\src\think\Request.php	/^    protected $cookie = [];$/;"	v
cookie	vendor\topthink\framework\src\think\Request.php	/^    public function cookie(string $name = '', $default = null, $filter = '')$/;"	f
count	vendor\topthink\framework\src\think\Request.php	/^                $count = count($file['name']);$/;"	v
count	vendor\topthink\framework\src\think\Request.php	/^            $count = count($item);$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^                    $data = (string) $data;$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^                $data = $data[$val];$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^                $data = (array) $data;$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^                $data = (boolean) $data;$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^                $data = (float) $data;$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^                $data = (int) $data;$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^            $data = $this->cookie;$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^            $data = $this->getData($data, $name);$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^            $data = $this->getData($this->cookie, $name, $default);$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^            $data = $this->post();$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^        $data = $this->filterData($data, $filter, $name, $default);$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^        $data = is_array($data) ? $data : $this->$data();$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^    public function input(array $data = [], $name = '', $default = null, $filter = '')$/;"	v
data	vendor\topthink\framework\src\think\Request.php	/^    public function only(array $name, $data = 'param', $filter = ''): array$/;"	v
dealUploadFile	vendor\topthink\framework\src\think\Request.php	/^    protected function dealUploadFile(array $files, string $name): array$/;"	f
default	vendor\topthink\framework\src\think\Request.php	/^                $default = $val;$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^                $default = null;$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^        $default = array_pop($filters);$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    protected function getData(array $data, string $name, $default = null)$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function delete($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function get($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function middleware($name, $default = null)$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function param($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function patch($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function post($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function put($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function request($name = '', $default = null, $filter = '')$/;"	v
default	vendor\topthink\framework\src\think\Request.php	/^    public function route($name = '', $default = null, $filter = '')$/;"	v
delete	vendor\topthink\framework\src\think\Request.php	/^    public function delete($name = '', $default = null, $filter = '')$/;"	f
domain	vendor\topthink\framework\src\think\Request.php	/^        $this->domain = $domain;$/;"	v
domain	vendor\topthink\framework\src\think\Request.php	/^    protected $domain;$/;"	v
domain	vendor\topthink\framework\src\think\Request.php	/^    public function domain(bool $port = false): string$/;"	f
env	vendor\topthink\framework\src\think\Request.php	/^        $this->env = $env;$/;"	v
env	vendor\topthink\framework\src\think\Request.php	/^    protected $env;$/;"	v
env	vendor\topthink\framework\src\think\Request.php	/^    public function env(string $name = '', string $default = null)$/;"	f
except	vendor\topthink\framework\src\think\Request.php	/^    public function except(array $name, string $type = 'param'): array$/;"	f
ext	vendor\topthink\framework\src\think\Request.php	/^    public function ext(): string$/;"	f
file	vendor\topthink\framework\src\think\Request.php	/^                $file = str_replace('\\\\', '\/', dirname($file));$/;"	v
file	vendor\topthink\framework\src\think\Request.php	/^            $file = $this->baseFile();$/;"	v
file	vendor\topthink\framework\src\think\Request.php	/^        $this->file = $files;$/;"	v
file	vendor\topthink\framework\src\think\Request.php	/^    protected $file = [];$/;"	v
file	vendor\topthink\framework\src\think\Request.php	/^    public function file(string $name = '')$/;"	f
fileUploadErrors	vendor\topthink\framework\src\think\Request.php	/^        static $fileUploadErrors = [$/;"	v
files	vendor\topthink\framework\src\think\Request.php	/^        $files = $this->file;$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^                $filter = (array) $filter;$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^                $filter = explode(',', $filter);$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^            $filter = $filter ?: $this->filter;$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^            $filter = [];$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^        $filter = $this->getFilter($filter, $default);$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^        $this->filter = $filter;$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^    protected $filter;$/;"	v
filter	vendor\topthink\framework\src\think\Request.php	/^    public function filter($filter = null)$/;"	f
filterData	vendor\topthink\framework\src\think\Request.php	/^    protected function filterData($data, $filter, $name, $default)$/;"	f
filterValue	vendor\topthink\framework\src\think\Request.php	/^    public function filterValue(&$value, $key, $filters)$/;"	f
flag	vendor\topthink\framework\src\think\Request.php	/^                $flag = FILTER_FLAG_IPV4;$/;"	v
flag	vendor\topthink\framework\src\think\Request.php	/^                $flag = FILTER_FLAG_IPV6;$/;"	v
flag	vendor\topthink\framework\src\think\Request.php	/^                $flag = null;$/;"	v
float	vendor\topthink\framework\src\think\Request.php	/^    public function time(bool $float = false)$/;"	v
get	vendor\topthink\framework\src\think\Request.php	/^        $this->get = $get;$/;"	v
get	vendor\topthink\framework\src\think\Request.php	/^    protected $get = [];$/;"	v
get	vendor\topthink\framework\src\think\Request.php	/^    public function get($name = '', $default = null, $filter = '')$/;"	f
getContent	vendor\topthink\framework\src\think\Request.php	/^    public function getContent(): string$/;"	f
getData	vendor\topthink\framework\src\think\Request.php	/^    protected function getData(array $data, string $name, $default = null)$/;"	f
getFilter	vendor\topthink\framework\src\think\Request.php	/^    protected function getFilter($filter, $default): array$/;"	f
getInput	vendor\topthink\framework\src\think\Request.php	/^    public function getInput(): string$/;"	f
getInputData	vendor\topthink\framework\src\think\Request.php	/^    protected function getInputData($content): array$/;"	f
has	vendor\topthink\framework\src\think\Request.php	/^    public function has(string $name, string $type = 'param', bool $checkEmpty = false): bool$/;"	f
header	vendor\topthink\framework\src\think\Request.php	/^            $header = $result;$/;"	v
header	vendor\topthink\framework\src\think\Request.php	/^            $header = [];$/;"	v
header	vendor\topthink\framework\src\think\Request.php	/^        $this->header = array_change_key_case($header);$/;"	v
header	vendor\topthink\framework\src\think\Request.php	/^    protected $header = [];$/;"	v
header	vendor\topthink\framework\src\think\Request.php	/^    public function header(string $name = '', string $default = null)$/;"	f
host	vendor\topthink\framework\src\think\Request.php	/^            $host = $this->host;$/;"	v
host	vendor\topthink\framework\src\think\Request.php	/^            $host = strval($this->server('HTTP_X_REAL_HOST') ?: $this->server('HTTP_HOST'));$/;"	v
host	vendor\topthink\framework\src\think\Request.php	/^        $this->host = $host;$/;"	v
host	vendor\topthink\framework\src\think\Request.php	/^    protected $host;$/;"	v
host	vendor\topthink\framework\src\think\Request.php	/^    public function host(bool $strict = false): string$/;"	f
httpsAgentName	vendor\topthink\framework\src\think\Request.php	/^    protected $httpsAgentName = '';$/;"	v
input	vendor\topthink\framework\src\think\Request.php	/^        $this->input = $input;$/;"	v
input	vendor\topthink\framework\src\think\Request.php	/^        $this->input = file_get_contents('php:\/\/input');$/;"	v
input	vendor\topthink\framework\src\think\Request.php	/^    protected $input;$/;"	v
input	vendor\topthink\framework\src\think\Request.php	/^    public function input(array $data = [], $name = '', $default = null, $filter = '')$/;"	f
ip	vendor\topthink\framework\src\think\Request.php	/^    public function ip(): string$/;"	f
ip2bin	vendor\topthink\framework\src\think\Request.php	/^    public function ip2bin(string $ip): string$/;"	f
isAjax	vendor\topthink\framework\src\think\Request.php	/^    public function isAjax(bool $ajax = false): bool$/;"	f
isCgi	vendor\topthink\framework\src\think\Request.php	/^    public function isCgi(): bool$/;"	f
isCli	vendor\topthink\framework\src\think\Request.php	/^    public function isCli(): bool$/;"	f
isDelete	vendor\topthink\framework\src\think\Request.php	/^    public function isDelete(): bool$/;"	f
isGet	vendor\topthink\framework\src\think\Request.php	/^    public function isGet(): bool$/;"	f
isHead	vendor\topthink\framework\src\think\Request.php	/^    public function isHead(): bool$/;"	f
isJson	vendor\topthink\framework\src\think\Request.php	/^    public function isJson(): bool$/;"	f
isMobile	vendor\topthink\framework\src\think\Request.php	/^    public function isMobile(): bool$/;"	f
isOptions	vendor\topthink\framework\src\think\Request.php	/^    public function isOptions(): bool$/;"	f
isPatch	vendor\topthink\framework\src\think\Request.php	/^    public function isPatch(): bool$/;"	f
isPjax	vendor\topthink\framework\src\think\Request.php	/^    public function isPjax(bool $pjax = false): bool$/;"	f
isPost	vendor\topthink\framework\src\think\Request.php	/^    public function isPost(): bool$/;"	f
isPut	vendor\topthink\framework\src\think\Request.php	/^    public function isPut(): bool$/;"	f
isSsl	vendor\topthink\framework\src\think\Request.php	/^    public function isSsl(): bool$/;"	f
isValidIP	vendor\topthink\framework\src\think\Request.php	/^    public function isValidIP(string $ip, string $type = ''): bool$/;"	f
item	vendor\topthink\framework\src\think\Request.php	/^                $item  = [];$/;"	v
item	vendor\topthink\framework\src\think\Request.php	/^            $item  = explode('.', $this->host());$/;"	v
item	vendor\topthink\framework\src\think\Request.php	/^        $item = [];$/;"	v
k	vendor\topthink\framework\src\think\Request.php	/^            foreach ($array as $k => $v) {$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^                    $key          = str_replace('_', '-', strtolower(substr($key, 5)));$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^                $key     = $val;$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^            foreach ($IPHex as $key => $value) {$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^            foreach ($server as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^        foreach ($files as $key => $file) {$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^        foreach ($name as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\Request.php	/^        foreach ($this->mimeType as $key => $val) {$/;"	v
keys	vendor\topthink\framework\src\think\Request.php	/^                $keys  = array_keys($file);$/;"	v
mergeParam	vendor\topthink\framework\src\think\Request.php	/^            $this->mergeParam = true;$/;"	v
mergeParam	vendor\topthink\framework\src\think\Request.php	/^    protected $mergeParam = false;$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^                    $this->method    = strtoupper($method);$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^                    $this->method = 'POST';$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^                $method = strtolower($this->post[$this->varMethod]);$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^                $this->method = $this->server('REQUEST_METHOD') ?: 'GET';$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^                $this->method = strtoupper($this->server('HTTP_X_HTTP_METHOD_OVERRIDE'));$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^            $method = $this->method(true);$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^        $this->method = strtoupper($method);$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^    protected $method;$/;"	v
method	vendor\topthink\framework\src\think\Request.php	/^    public function method(bool $origin = false): string$/;"	f
middleware	vendor\topthink\framework\src\think\Request.php	/^        $this->middleware = array_merge($this->middleware, $middleware);$/;"	v
middleware	vendor\topthink\framework\src\think\Request.php	/^    protected $middleware = [];$/;"	v
middleware	vendor\topthink\framework\src\think\Request.php	/^    public function middleware($name, $default = null)$/;"	f
mimeType	vendor\topthink\framework\src\think\Request.php	/^            $this->mimeType = array_merge($this->mimeType, $type);$/;"	v
mimeType	vendor\topthink\framework\src\think\Request.php	/^    protected $mimeType = [$/;"	v
mimeType	vendor\topthink\framework\src\think\Request.php	/^    public function mimeType($type, $val = ''): void$/;"	f
msg	vendor\topthink\framework\src\think\Request.php	/^        $msg = $fileUploadErrors[$error];$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^            $name = strtoupper($name);$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^        $name = $this->action ?: '';$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^        $name = $this->controller ?: '';$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^        $name = (string) $name;$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^        $name = str_replace('_', '-', strtolower($name));$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function buildToken(string $name = '__token__', $type = 'md5'): string$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function cookie(string $name = '', $default = null, $filter = '')$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function env(string $name = '', string $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function file(string $name = '')$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function header(string $name = '', string $default = null)$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function server(string $name = '', string $default = '')$/;"	v
name	vendor\topthink\framework\src\think\Request.php	/^    public function session(string $name = '', $default = null)$/;"	v
only	vendor\topthink\framework\src\think\Request.php	/^    public function only(array $name, $data = 'param', $filter = ''): array$/;"	f
origin	vendor\topthink\framework\src\think\Request.php	/^    public function method(bool $origin = false): string$/;"	v
panDomain	vendor\topthink\framework\src\think\Request.php	/^        $this->panDomain = $domain;$/;"	v
panDomain	vendor\topthink\framework\src\think\Request.php	/^    protected $panDomain;$/;"	v
panDomain	vendor\topthink\framework\src\think\Request.php	/^    public function panDomain(): string$/;"	f
param	vendor\topthink\framework\src\think\Request.php	/^                $param = $param[$val];$/;"	v
param	vendor\topthink\framework\src\think\Request.php	/^            $this->param = array_merge($this->param, $this->get(false), $vars, $this->route(false));$/;"	v
param	vendor\topthink\framework\src\think\Request.php	/^        $param = $this->$type();$/;"	v
param	vendor\topthink\framework\src\think\Request.php	/^        $param = empty($this->$type) ? $this->$type() : $this->$type;$/;"	v
param	vendor\topthink\framework\src\think\Request.php	/^    protected $param = [];$/;"	v
param	vendor\topthink\framework\src\think\Request.php	/^    public function param($name = '', $default = null, $filter = '')$/;"	f
patch	vendor\topthink\framework\src\think\Request.php	/^    public function patch($name = '', $default = null, $filter = '')$/;"	f
path	vendor\topthink\framework\src\think\Request.php	/^    protected $path;$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^                        $pathinfo = (0 === strpos($this->server($type), $this->server('SCRIPT_NAME'))) ?$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^                $pathinfo = $_GET[$this->varPathinfo];$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^                $pathinfo = $this->server('PATH_INFO');$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^                $pathinfo = strpos($this->server('REQUEST_URI'), '?') ? strstr($this->server('REQUEST_URI'), '?', true) : $this->server('REQUEST_URI');$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^            $this->pathinfo = empty($pathinfo) || '\/' == $pathinfo ? '' : ltrim($pathinfo, '\/');$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^        $this->pathinfo = $pathinfo;$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^    protected $pathinfo;$/;"	v
pathinfo	vendor\topthink\framework\src\think\Request.php	/^    public function pathinfo(): string$/;"	f
pathinfoFetch	vendor\topthink\framework\src\think\Request.php	/^    protected $pathinfoFetch = ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'];$/;"	v
pjax	vendor\topthink\framework\src\think\Request.php	/^    public function isPjax(bool $pjax = false): bool$/;"	v
port	vendor\topthink\framework\src\think\Request.php	/^    public function domain(bool $port = false): string$/;"	v
port	vendor\topthink\framework\src\think\Request.php	/^    public function port(): int$/;"	f
post	vendor\topthink\framework\src\think\Request.php	/^        $this->post = $post;$/;"	v
post	vendor\topthink\framework\src\think\Request.php	/^    protected $post = [];$/;"	v
post	vendor\topthink\framework\src\think\Request.php	/^    public function post($name = '', $default = null, $filter = '')$/;"	f
protocol	vendor\topthink\framework\src\think\Request.php	/^    public function protocol(): string$/;"	f
proxyIp	vendor\topthink\framework\src\think\Request.php	/^        $proxyIp       = $this->proxyServerIp;$/;"	v
proxyIpHeader	vendor\topthink\framework\src\think\Request.php	/^        $proxyIpHeader = $this->proxyServerIpHeader;$/;"	v
proxyServerIp	vendor\topthink\framework\src\think\Request.php	/^    protected $proxyServerIp = [];$/;"	v
proxyServerIpHeader	vendor\topthink\framework\src\think\Request.php	/^    protected $proxyServerIpHeader = ['HTTP_X_REAL_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_CLIENT_IP', 'HTTP_X_CLIENT_IP', 'HTTP_X_CLUSTER_CLIENT_IP'];$/;"	v
put	vendor\topthink\framework\src\think\Request.php	/^    protected $put;$/;"	v
put	vendor\topthink\framework\src\think\Request.php	/^    public function put($name = '', $default = null, $filter = '')$/;"	f
query	vendor\topthink\framework\src\think\Request.php	/^    public function query(): string$/;"	f
realIP	vendor\topthink\framework\src\think\Request.php	/^                        $this->realIP = $tempIP;$/;"	v
realIP	vendor\topthink\framework\src\think\Request.php	/^            $this->realIP = '0.0.0.0';$/;"	v
realIP	vendor\topthink\framework\src\think\Request.php	/^        $this->realIP = $this->server('REMOTE_ADDR', '');$/;"	v
realIP	vendor\topthink\framework\src\think\Request.php	/^    protected $realIP;$/;"	v
realIPBin	vendor\topthink\framework\src\think\Request.php	/^                $realIPBin = $this->ip2bin($this->realIP);$/;"	v
remotePort	vendor\topthink\framework\src\think\Request.php	/^    public function remotePort(): int$/;"	f
request	vendor\topthink\framework\src\think\Request.php	/^        $request = new static();$/;"	v
request	vendor\topthink\framework\src\think\Request.php	/^    protected $request = [];$/;"	v
request	vendor\topthink\framework\src\think\Request.php	/^    public function request($name = '', $default = null, $filter = '')$/;"	f
result	vendor\topthink\framework\src\think\Request.php	/^        $result = !empty($this->server('HTTP_X_PJAX')) ? true : false;$/;"	v
result	vendor\topthink\framework\src\think\Request.php	/^        $result = $value && 'xmlhttprequest' == strtolower($value) ? true : false;$/;"	v
result	vendor\topthink\framework\src\think\Request.php	/^        if (function_exists('apache_request_headers') && $result = apache_request_headers()) {$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^            $root  = $count > 1 ? $item[$count - 2] . '.' . $item[$count - 1] : $item[0];$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^            $root = '\/' . ltrim($root, '\/');$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^            $this->root = rtrim($file, '\/');$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^        $root = $this->rootDomain;$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^        $root = strpos($base, '.') ? ltrim(dirname($base), DIRECTORY_SEPARATOR) : $base;$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^        $this->root = $url;$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^    protected $root;$/;"	v
root	vendor\topthink\framework\src\think\Request.php	/^    public function root(bool $complete = false): string$/;"	f
rootDomain	vendor\topthink\framework\src\think\Request.php	/^            $rootDomain = $this->rootDomain();$/;"	v
rootDomain	vendor\topthink\framework\src\think\Request.php	/^    protected $rootDomain = '';$/;"	v
rootDomain	vendor\topthink\framework\src\think\Request.php	/^    public function rootDomain(): string$/;"	f
rootUrl	vendor\topthink\framework\src\think\Request.php	/^    public function rootUrl(): string$/;"	f
route	vendor\topthink\framework\src\think\Request.php	/^        $this->route = $route;$/;"	v
route	vendor\topthink\framework\src\think\Request.php	/^        $this->route = array_merge($this->route, $route);$/;"	v
route	vendor\topthink\framework\src\think\Request.php	/^    protected $route = [];$/;"	v
route	vendor\topthink\framework\src\think\Request.php	/^    public function route($name = '', $default = null, $filter = '')$/;"	f
rule	vendor\topthink\framework\src\think\Request.php	/^        $this->rule = $rule;$/;"	v
rule	vendor\topthink\framework\src\think\Request.php	/^    protected $rule;$/;"	v
rule	vendor\topthink\framework\src\think\Request.php	/^    public function rule()$/;"	f
scheme	vendor\topthink\framework\src\think\Request.php	/^    public function scheme(): string$/;"	f
script_name	vendor\topthink\framework\src\think\Request.php	/^                $script_name = basename($this->server('SCRIPT_FILENAME'));$/;"	v
secureKey	vendor\topthink\framework\src\think\Request.php	/^            $this->secureKey = uniqid('', true);$/;"	v
secureKey	vendor\topthink\framework\src\think\Request.php	/^    protected $secureKey;$/;"	v
secureKey	vendor\topthink\framework\src\think\Request.php	/^    public function secureKey(): string$/;"	f
server	vendor\topthink\framework\src\think\Request.php	/^            $server = $_SERVER;$/;"	v
server	vendor\topthink\framework\src\think\Request.php	/^        $this->server = array_change_key_case($server, CASE_UPPER);$/;"	v
server	vendor\topthink\framework\src\think\Request.php	/^    protected $server = [];$/;"	v
server	vendor\topthink\framework\src\think\Request.php	/^    public function server(string $name = '', string $default = '')$/;"	f
serverIP	vendor\topthink\framework\src\think\Request.php	/^                    $serverIP         = $serverIPElements[0];$/;"	v
serverIPBin	vendor\topthink\framework\src\think\Request.php	/^                    $serverIPBin      = $this->ip2bin($serverIP);$/;"	v
serverIPElements	vendor\topthink\framework\src\think\Request.php	/^                    $serverIPElements = explode('\/', $ip);$/;"	v
serverIPPrefix	vendor\topthink\framework\src\think\Request.php	/^                    $serverIPPrefix   = $serverIPElements[1] ?? 128;$/;"	v
session	vendor\topthink\framework\src\think\Request.php	/^        $this->session = $session;$/;"	v
session	vendor\topthink\framework\src\think\Request.php	/^    protected $session;$/;"	v
session	vendor\topthink\framework\src\think\Request.php	/^    public function session(string $name = '', $default = null)$/;"	f
setAction	vendor\topthink\framework\src\think\Request.php	/^    public function setAction(string $action)$/;"	f
setBaseUrl	vendor\topthink\framework\src\think\Request.php	/^    public function setBaseUrl(string $url)$/;"	f
setController	vendor\topthink\framework\src\think\Request.php	/^    public function setController(string $controller)$/;"	f
setDomain	vendor\topthink\framework\src\think\Request.php	/^    public function setDomain(string $domain)$/;"	f
setHost	vendor\topthink\framework\src\think\Request.php	/^    public function setHost(string $host)$/;"	f
setMethod	vendor\topthink\framework\src\think\Request.php	/^    public function setMethod(string $method)$/;"	f
setPanDomain	vendor\topthink\framework\src\think\Request.php	/^    public function setPanDomain(string $domain)$/;"	f
setPathinfo	vendor\topthink\framework\src\think\Request.php	/^    public function setPathinfo(string $pathinfo)$/;"	f
setRoot	vendor\topthink\framework\src\think\Request.php	/^    public function setRoot(string $url)$/;"	f
setRoute	vendor\topthink\framework\src\think\Request.php	/^    public function setRoute(array $route)$/;"	f
setRule	vendor\topthink\framework\src\think\Request.php	/^    public function setRule(Rule $rule)$/;"	f
setSubDomain	vendor\topthink\framework\src\think\Request.php	/^    public function setSubDomain(string $domain)$/;"	f
setUrl	vendor\topthink\framework\src\think\Request.php	/^    public function setUrl(string $url)$/;"	f
str	vendor\topthink\framework\src\think\Request.php	/^            $str           = $this->url();$/;"	v
strict	vendor\topthink\framework\src\think\Request.php	/^    public function host(bool $strict = false): string$/;"	v
subDomain	vendor\topthink\framework\src\think\Request.php	/^                $this->subDomain = '';$/;"	v
subDomain	vendor\topthink\framework\src\think\Request.php	/^                $this->subDomain = rtrim(stristr($this->host(), $rootDomain, true), '.');$/;"	v
subDomain	vendor\topthink\framework\src\think\Request.php	/^        $this->subDomain = $domain;$/;"	v
subDomain	vendor\topthink\framework\src\think\Request.php	/^    protected $subDomain;$/;"	v
subDomain	vendor\topthink\framework\src\think\Request.php	/^    public function subDomain(): string$/;"	f
tempIP	vendor\topthink\framework\src\think\Request.php	/^                    $tempIP = null;$/;"	v
tempIP	vendor\topthink\framework\src\think\Request.php	/^                $tempIP = $this->server($header);$/;"	v
tempIP	vendor\topthink\framework\src\think\Request.php	/^                $tempIP = trim(explode(',', $tempIP)[0]);$/;"	v
throwUploadFileError	vendor\topthink\framework\src\think\Request.php	/^    protected function throwUploadFileError($error)$/;"	f
time	vendor\topthink\framework\src\think\Request.php	/^    public function time(bool $float = false)$/;"	f
token	vendor\topthink\framework\src\think\Request.php	/^        $token = call_user_func($type, $this->server('REQUEST_TIME_FLOAT'));$/;"	v
token	vendor\topthink\framework\src\think\Request.php	/^    public function checkToken(string $token = '__token__', array $data = []): bool$/;"	v
type	vendor\topthink\framework\src\think\Request.php	/^                $type = $contentType;$/;"	v
type	vendor\topthink\framework\src\think\Request.php	/^        $type  = is_callable($type) ? $type : 'md5';$/;"	v
type	vendor\topthink\framework\src\think\Request.php	/^    public function except(array $name, string $type = 'param'): array$/;"	v
type	vendor\topthink\framework\src\think\Request.php	/^    public function has(string $name, string $type = 'param', bool $checkEmpty = false): bool$/;"	v
type	vendor\topthink\framework\src\think\Request.php	/^    public function isValidIP(string $ip, string $type = ''): bool$/;"	v
type	vendor\topthink\framework\src\think\Request.php	/^    public function type(): string$/;"	f
typeCast	vendor\topthink\framework\src\think\Request.php	/^    private function typeCast(&$data, string $type)$/;"	f
url	vendor\topthink\framework\src\think\Request.php	/^                    $url = $this->server('ORIG_SCRIPT_NAME');$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^                    $url = $this->server('PHP_SELF');$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^                    $url = $this->server('SCRIPT_NAME');$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^                    $url = str_replace('\\\\', '\/', str_replace($this->server('DOCUMENT_ROOT'), '', $this->server('SCRIPT_FILENAME')));$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^                    $url = substr($this->server('SCRIPT_NAME'), 0, $pos) . '\/' . $script_name;$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^            $url = $_SERVER['argv'][1];$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^            $url = $this->server('HTTP_X_REWRITE_URL');$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^            $url = $this->server('ORIG_PATH_INFO') . (!empty($this->server('QUERY_STRING')) ? '?' . $this->server('QUERY_STRING') : '');$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^            $url = $this->server('REQUEST_URI');$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^            $url = $this->url;$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^            $url = '';$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^        $this->url = $url;$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^    protected $url;$/;"	v
url	vendor\topthink\framework\src\think\Request.php	/^    public function url(bool $complete = false): string$/;"	f
val	vendor\topthink\framework\src\think\Request.php	/^    public function mimeType($type, $val = ''): void$/;"	v
value	vendor\topthink\framework\src\think\Request.php	/^                        $value = $default;$/;"	v
value	vendor\topthink\framework\src\think\Request.php	/^                    $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));$/;"	v
value	vendor\topthink\framework\src\think\Request.php	/^                $value = call_user_func($filter, $value);$/;"	v
value	vendor\topthink\framework\src\think\Request.php	/^        $value  = $this->server('HTTP_X_REQUESTED_WITH');$/;"	v
varAjax	vendor\topthink\framework\src\think\Request.php	/^    protected $varAjax = '_ajax';$/;"	v
varMethod	vendor\topthink\framework\src\think\Request.php	/^    protected $varMethod = '_method';$/;"	v
varPathinfo	vendor\topthink\framework\src\think\Request.php	/^    protected $varPathinfo = 's';$/;"	v
varPjax	vendor\topthink\framework\src\think\Request.php	/^    protected $varPjax = '_pjax';$/;"	v
vars	vendor\topthink\framework\src\think\Request.php	/^                    $vars = $this->post(false);$/;"	v
vars	vendor\topthink\framework\src\think\Request.php	/^                    $vars = $this->put(false);$/;"	v
vars	vendor\topthink\framework\src\think\Request.php	/^                    $vars = [];$/;"	v
withCookie	vendor\topthink\framework\src\think\Request.php	/^    public function withCookie(array $cookie)$/;"	f
withEnv	vendor\topthink\framework\src\think\Request.php	/^    public function withEnv(Env $env)$/;"	f
withFiles	vendor\topthink\framework\src\think\Request.php	/^    public function withFiles(array $files)$/;"	f
withGet	vendor\topthink\framework\src\think\Request.php	/^    public function withGet(array $get)$/;"	f
withHeader	vendor\topthink\framework\src\think\Request.php	/^    public function withHeader(array $header)$/;"	f
withInput	vendor\topthink\framework\src\think\Request.php	/^    public function withInput(string $input)$/;"	f
withMiddleware	vendor\topthink\framework\src\think\Request.php	/^    public function withMiddleware(array $middleware)$/;"	f
withPost	vendor\topthink\framework\src\think\Request.php	/^    public function withPost(array $post)$/;"	f
withRoute	vendor\topthink\framework\src\think\Request.php	/^    public function withRoute(array $route)$/;"	f
withServer	vendor\topthink\framework\src\think\Request.php	/^    public function withServer(array $server)$/;"	f
withSession	vendor\topthink\framework\src\think\Request.php	/^    public function withSession(Session $session)$/;"	f
Response	vendor\topthink\framework\src\think\Response.php	/^abstract class Response$/;"	c
allowCache	vendor\topthink\framework\src\think\Response.php	/^        $this->allowCache = $cache;$/;"	v
allowCache	vendor\topthink\framework\src\think\Response.php	/^    protected $allowCache = true;$/;"	v
allowCache	vendor\topthink\framework\src\think\Response.php	/^    public function allowCache(bool $cache)$/;"	f
cacheControl	vendor\topthink\framework\src\think\Response.php	/^    public function cacheControl(string $cache)$/;"	f
charset	vendor\topthink\framework\src\think\Response.php	/^    protected $charset = 'utf-8';$/;"	v
charset	vendor\topthink\framework\src\think\Response.php	/^    public function contentType(string $contentType, string $charset = 'utf-8')$/;"	v
class	vendor\topthink\framework\src\think\Response.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\response\\\\' . ucfirst(strtolower($type));$/;"	v
code	vendor\topthink\framework\src\think\Response.php	/^        $this->code = $code;$/;"	v
code	vendor\topthink\framework\src\think\Response.php	/^    protected $code = 200;$/;"	v
code	vendor\topthink\framework\src\think\Response.php	/^    protected function init($data = '', int $code = 200)$/;"	v
code	vendor\topthink\framework\src\think\Response.php	/^    public function code(int $code)$/;"	f
content	vendor\topthink\framework\src\think\Response.php	/^            $content = $this->output($this->data);$/;"	v
content	vendor\topthink\framework\src\think\Response.php	/^            $this->content = (string) $content;$/;"	v
content	vendor\topthink\framework\src\think\Response.php	/^        $this->content = (string) $content;$/;"	v
content	vendor\topthink\framework\src\think\Response.php	/^    protected $content = null;$/;"	v
content	vendor\topthink\framework\src\think\Response.php	/^    public function content($content)$/;"	f
contentType	vendor\topthink\framework\src\think\Response.php	/^    protected $contentType = 'text\/html';$/;"	v
contentType	vendor\topthink\framework\src\think\Response.php	/^    public function contentType(string $contentType, string $charset = 'utf-8')$/;"	f
cookie	vendor\topthink\framework\src\think\Response.php	/^    protected $cookie;$/;"	v
cookie	vendor\topthink\framework\src\think\Response.php	/^    public function cookie(string $name, string $value, $option = null)$/;"	f
create	vendor\topthink\framework\src\think\Response.php	/^    public static function create($data = '', string $type = 'html', int $code = 200): Response$/;"	f
data	vendor\topthink\framework\src\think\Response.php	/^        $data = $this->getContent();$/;"	v
data	vendor\topthink\framework\src\think\Response.php	/^        $this->data = $data;$/;"	v
data	vendor\topthink\framework\src\think\Response.php	/^    protected $data;$/;"	v
data	vendor\topthink\framework\src\think\Response.php	/^    public function data($data)$/;"	f
eTag	vendor\topthink\framework\src\think\Response.php	/^    public function eTag(string $eTag)$/;"	f
expires	vendor\topthink\framework\src\think\Response.php	/^    public function expires(string $time)$/;"	f
getCode	vendor\topthink\framework\src\think\Response.php	/^    public function getCode(): int$/;"	f
getContent	vendor\topthink\framework\src\think\Response.php	/^    public function getContent(): string$/;"	f
getData	vendor\topthink\framework\src\think\Response.php	/^    public function getData()$/;"	f
getHeader	vendor\topthink\framework\src\think\Response.php	/^    public function getHeader(string $name = '')$/;"	f
header	vendor\topthink\framework\src\think\Response.php	/^        $this->header = array_merge($this->header, $header);$/;"	v
header	vendor\topthink\framework\src\think\Response.php	/^    protected $header = [];$/;"	v
header	vendor\topthink\framework\src\think\Response.php	/^    public function header(array $header = [])$/;"	f
header	vendor\topthink\framework\src\think\Response.php	/^    public function header(array $header = [])$/;"	v
init	vendor\topthink\framework\src\think\Response.php	/^    protected function init($data = '', int $code = 200)$/;"	f
isAllowCache	vendor\topthink\framework\src\think\Response.php	/^    public function isAllowCache()$/;"	f
lastModified	vendor\topthink\framework\src\think\Response.php	/^    public function lastModified(string $time)$/;"	f
name	vendor\topthink\framework\src\think\Response.php	/^            foreach ($this->header as $name => $val) {$/;"	v
name	vendor\topthink\framework\src\think\Response.php	/^    public function getHeader(string $name = '')$/;"	v
option	vendor\topthink\framework\src\think\Response.php	/^    public function cookie(string $name, string $value, $option = null)$/;"	v
options	vendor\topthink\framework\src\think\Response.php	/^        $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\framework\src\think\Response.php	/^    protected $options = [];$/;"	v
options	vendor\topthink\framework\src\think\Response.php	/^    public function options(array $options = [])$/;"	f
options	vendor\topthink\framework\src\think\Response.php	/^    public function options(array $options = [])$/;"	v
output	vendor\topthink\framework\src\think\Response.php	/^    protected function output($data)$/;"	f
send	vendor\topthink\framework\src\think\Response.php	/^    public function send(): void$/;"	f
sendData	vendor\topthink\framework\src\think\Response.php	/^    protected function sendData(string $data): void$/;"	f
session	vendor\topthink\framework\src\think\Response.php	/^        $this->session = $session;$/;"	v
session	vendor\topthink\framework\src\think\Response.php	/^    protected $session;$/;"	v
setSession	vendor\topthink\framework\src\think\Response.php	/^    public function setSession(Session $session)$/;"	f
type	vendor\topthink\framework\src\think\Response.php	/^    public static function create($data = '', string $type = 'html', int $code = 200): Response$/;"	v
Route	vendor\topthink\framework\src\think\Route.php	/^class Route$/;"	c
__call	vendor\topthink\framework\src\think\Route.php	/^    public function __call($method, $args)$/;"	f
__construct	vendor\topthink\framework\src\think\Route.php	/^    public function __construct(App $app)$/;"	f
any	vendor\topthink\framework\src\think\Route.php	/^    public function any(string $rule, $route): RuleItem$/;"	f
app	vendor\topthink\framework\src\think\Route.php	/^        $this->app      = $app;$/;"	v
app	vendor\topthink\framework\src\think\Route.php	/^    protected $app;$/;"	v
bind	vendor\topthink\framework\src\think\Route.php	/^    protected $bind = [];$/;"	v
bind	vendor\topthink\framework\src\think\Route.php	/^    public function bind(string $bind, string $domain = null)$/;"	f
buildUrl	vendor\topthink\framework\src\think\Route.php	/^    public function buildUrl(string $url = '', array $vars = []): UrlBuild$/;"	f
check	vendor\topthink\framework\src\think\Route.php	/^    public function check(): Dispatch$/;"	f
checkDomain	vendor\topthink\framework\src\think\Route.php	/^    protected function checkDomain(): Domain$/;"	f
clear	vendor\topthink\framework\src\think\Route.php	/^    public function clear(): void$/;"	f
completeMatch	vendor\topthink\framework\src\think\Route.php	/^        $completeMatch = $this->config['route_complete_match'];$/;"	v
config	vendor\topthink\framework\src\think\Route.php	/^        $this->config = array_merge($this->config, $this->app->config->get('route'));$/;"	v
config	vendor\topthink\framework\src\think\Route.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\Route.php	/^    public function config(string $name = null)$/;"	f
cross	vendor\topthink\framework\src\think\Route.php	/^            $this->cross = (new RuleGroup($this))->mergeRuleRegex($this->mergeRuleRegex);$/;"	v
cross	vendor\topthink\framework\src\think\Route.php	/^    protected $cross;$/;"	v
delete	vendor\topthink\framework\src\think\Route.php	/^    public function delete(string $rule, $route): RuleItem$/;"	f
dispatch	vendor\topthink\framework\src\think\Route.php	/^            $dispatch = $this->check();$/;"	v
dispatch	vendor\topthink\framework\src\think\Route.php	/^            $dispatch = $this->url($this->path());$/;"	v
dispatch	vendor\topthink\framework\src\think\Route.php	/^    public function dispatch(Request $request, $withRoute = null)$/;"	f
domain	vendor\topthink\framework\src\think\Route.php	/^            $domain  = $subDomain ? explode('.', $subDomain) : [];$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^            $domain = $this->domains[$domainName];$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^            $domain = $this->host;$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^            $domain = (new Domain($this, $domainName, $rule))$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^        $domain = is_null($domain) ? '-' : $domain;$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^        $domain = new Domain($this);$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^    public function bind(string $bind, string $domain = null)$/;"	v
domain	vendor\topthink\framework\src\think\Route.php	/^    public function domain($name, $rule = null): Domain$/;"	f
domain	vendor\topthink\framework\src\think\Route.php	/^    public function getDomainBind(string $domain = null)$/;"	v
domain2	vendor\topthink\framework\src\think\Route.php	/^            $domain2 = $domain ? array_pop($domain) : '';$/;"	v
domain3	vendor\topthink\framework\src\think\Route.php	/^                $domain3 = array_pop($domain);$/;"	v
domainName	vendor\topthink\framework\src\think\Route.php	/^        $domainName = is_array($name) ? array_shift($name) : $name;$/;"	v
domains	vendor\topthink\framework\src\think\Route.php	/^    protected $domains = [];$/;"	v
first	vendor\topthink\framework\src\think\Route.php	/^    public function setName(string $name, RuleItem $ruleItem, bool $first = false): void$/;"	v
get	vendor\topthink\framework\src\think\Route.php	/^    public function get(string $rule, $route): RuleItem$/;"	f
getBind	vendor\topthink\framework\src\think\Route.php	/^    public function getBind(): array$/;"	f
getDomainBind	vendor\topthink\framework\src\think\Route.php	/^    public function getDomainBind(string $domain = null)$/;"	f
getDomains	vendor\topthink\framework\src\think\Route.php	/^    public function getDomains(): array$/;"	f
getGroup	vendor\topthink\framework\src\think\Route.php	/^    public function getGroup(string $name = null)$/;"	f
getName	vendor\topthink\framework\src\think\Route.php	/^    public function getName(string $name = null, string $domain = null, string $method = '*'): array$/;"	f
getRest	vendor\topthink\framework\src\think\Route.php	/^    public function getRest(string $name = null)$/;"	f
getRule	vendor\topthink\framework\src\think\Route.php	/^    public function getRule(string $rule): array$/;"	f
getRuleList	vendor\topthink\framework\src\think\Route.php	/^    public function getRuleList(): array$/;"	f
getRuleName	vendor\topthink\framework\src\think\Route.php	/^    public function getRuleName(): RuleName$/;"	f
group	vendor\topthink\framework\src\think\Route.php	/^        $this->group = $domain;$/;"	v
group	vendor\topthink\framework\src\think\Route.php	/^        $this->group = $group;$/;"	v
group	vendor\topthink\framework\src\think\Route.php	/^    protected $group;$/;"	v
group	vendor\topthink\framework\src\think\Route.php	/^    public function group($name, $route = null): RuleGroup$/;"	f
host	vendor\topthink\framework\src\think\Route.php	/^        $this->host    = $this->request->host(true);$/;"	v
host	vendor\topthink\framework\src\think\Route.php	/^    protected $host;$/;"	v
import	vendor\topthink\framework\src\think\Route.php	/^    public function import(array $name): void$/;"	f
init	vendor\topthink\framework\src\think\Route.php	/^    protected function init()$/;"	f
isTest	vendor\topthink\framework\src\think\Route.php	/^        $this->isTest = $test;$/;"	v
isTest	vendor\topthink\framework\src\think\Route.php	/^    protected $isTest = false;$/;"	v
isTest	vendor\topthink\framework\src\think\Route.php	/^    public function isTest(): bool$/;"	f
item	vendor\topthink\framework\src\think\Route.php	/^                    $item      = $this->domains['*'];$/;"	v
item	vendor\topthink\framework\src\think\Route.php	/^                $item      = $this->domains['*.' . $domain2];$/;"	v
item	vendor\topthink\framework\src\think\Route.php	/^                $item = $this->domains[$subDomain];$/;"	v
item	vendor\topthink\framework\src\think\Route.php	/^                $item = $this->domains[$this->host];$/;"	v
item	vendor\topthink\framework\src\think\Route.php	/^            $item = $this->domains[$item];$/;"	v
item	vendor\topthink\framework\src\think\Route.php	/^            $item = $this->domains['-'];$/;"	v
item	vendor\topthink\framework\src\think\Route.php	/^        $item = false;$/;"	v
lazy	vendor\topthink\framework\src\think\Route.php	/^        $this->lazy = $lazy;$/;"	v
lazy	vendor\topthink\framework\src\think\Route.php	/^    protected $lazy = true;$/;"	v
lazy	vendor\topthink\framework\src\think\Route.php	/^    public function lazy(bool $lazy = true)$/;"	f
lazy	vendor\topthink\framework\src\think\Route.php	/^    public function lazy(bool $lazy = true)$/;"	v
merge	vendor\topthink\framework\src\think\Route.php	/^    public function mergeRuleRegex(bool $merge = true)$/;"	v
mergeRuleRegex	vendor\topthink\framework\src\think\Route.php	/^        $this->mergeRuleRegex = $merge;$/;"	v
mergeRuleRegex	vendor\topthink\framework\src\think\Route.php	/^        $this->mergeRuleRegex = $this->config['route_rule_merge'];$/;"	v
mergeRuleRegex	vendor\topthink\framework\src\think\Route.php	/^    protected $mergeRuleRegex = false;$/;"	v
mergeRuleRegex	vendor\topthink\framework\src\think\Route.php	/^    public function mergeRuleRegex(bool $merge = true)$/;"	f
method	vendor\topthink\framework\src\think\Route.php	/^    public function miss($route, string $method = '*'): RuleItem$/;"	v
method	vendor\topthink\framework\src\think\Route.php	/^    public function setCrossDomainRule(Rule $rule, string $method = '*')$/;"	v
miss	vendor\topthink\framework\src\think\Route.php	/^    public function miss($route, string $method = '*'): RuleItem$/;"	f
name	vendor\topthink\framework\src\think\Route.php	/^                $name = '*' . strstr($subDomain, '.');$/;"	v
name	vendor\topthink\framework\src\think\Route.php	/^            $name  = '';$/;"	v
name	vendor\topthink\framework\src\think\Route.php	/^    public function config(string $name = null)$/;"	v
name	vendor\topthink\framework\src\think\Route.php	/^    public function getGroup(string $name = null)$/;"	v
name	vendor\topthink\framework\src\think\Route.php	/^    public function getName(string $name = null, string $domain = null, string $method = '*'): array$/;"	v
name	vendor\topthink\framework\src\think\Route.php	/^    public function getRest(string $name = null)$/;"	v
option	vendor\topthink\framework\src\think\Route.php	/^    public function option(array $option)$/;"	f
options	vendor\topthink\framework\src\think\Route.php	/^    public function options(string $rule, $route): RuleItem$/;"	f
panDomain	vendor\topthink\framework\src\think\Route.php	/^                    $panDomain = $domain2;$/;"	v
panDomain	vendor\topthink\framework\src\think\Route.php	/^                $panDomain = $domain3;$/;"	v
patch	vendor\topthink\framework\src\think\Route.php	/^    public function patch(string $rule, $route): RuleItem$/;"	f
path	vendor\topthink\framework\src\think\Route.php	/^            $path = $pathinfo;$/;"	v
path	vendor\topthink\framework\src\think\Route.php	/^            $path = preg_replace('\/\\.' . $this->request->ext() . '$\/i', '', $pathinfo);$/;"	v
path	vendor\topthink\framework\src\think\Route.php	/^            $path = preg_replace('\/\\.(' . ltrim($suffix, '.') . ')$\/i', '', $pathinfo);$/;"	v
path	vendor\topthink\framework\src\think\Route.php	/^    protected function path(): string$/;"	f
pathinfo	vendor\topthink\framework\src\think\Route.php	/^        $pathinfo = $this->request->pathinfo();$/;"	v
pattern	vendor\topthink\framework\src\think\Route.php	/^    public function pattern(array $pattern)$/;"	f
post	vendor\topthink\framework\src\think\Route.php	/^    public function post(string $rule, $route): RuleItem$/;"	f
put	vendor\topthink\framework\src\think\Route.php	/^    public function put(string $rule, $route): RuleItem$/;"	f
redirect	vendor\topthink\framework\src\think\Route.php	/^    public function redirect(string $rule, string $route = '', int $status = 301): RuleItem$/;"	f
removeSlash	vendor\topthink\framework\src\think\Route.php	/^        $this->removeSlash    = $this->config['remove_slash'];$/;"	v
removeSlash	vendor\topthink\framework\src\think\Route.php	/^    protected $removeSlash = false;$/;"	v
request	vendor\topthink\framework\src\think\Route.php	/^        $this->request = $request;$/;"	v
request	vendor\topthink\framework\src\think\Route.php	/^    protected $request;$/;"	v
resource	vendor\topthink\framework\src\think\Route.php	/^    public function resource(string $rule, string $route): Resource$/;"	f
resource	vendor\topthink\framework\src\think\Route.php	/^    public function rest($name, $resource = [])$/;"	v
rest	vendor\topthink\framework\src\think\Route.php	/^            $this->rest = $resource ? $name : array_merge($this->rest, $name);$/;"	v
rest	vendor\topthink\framework\src\think\Route.php	/^    protected $rest = [$/;"	v
rest	vendor\topthink\framework\src\think\Route.php	/^    public function rest($name, $resource = [])$/;"	f
result	vendor\topthink\framework\src\think\Route.php	/^            $result = $this->bind[$domain];$/;"	v
result	vendor\topthink\framework\src\think\Route.php	/^            $result = $this->bind[$name];$/;"	v
result	vendor\topthink\framework\src\think\Route.php	/^            $result = $this->bind['*'];$/;"	v
result	vendor\topthink\framework\src\think\Route.php	/^            $result = $this->cross->check($this->request, $url, $completeMatch);$/;"	v
result	vendor\topthink\framework\src\think\Route.php	/^            $result = null;$/;"	v
result	vendor\topthink\framework\src\think\Route.php	/^        $result = $this->checkDomain()->check($this->request, $url, $completeMatch);$/;"	v
route	vendor\topthink\framework\src\think\Route.php	/^            $route = $name;$/;"	v
route	vendor\topthink\framework\src\think\Route.php	/^    public function group($name, $route = null): RuleGroup$/;"	v
route	vendor\topthink\framework\src\think\Route.php	/^    public function redirect(string $rule, string $route = '', int $status = 301): RuleItem$/;"	v
route	vendor\topthink\framework\src\think\Route.php	/^    public function rule(string $rule, $route = null, string $method = '*'): RuleItem$/;"	v
rule	vendor\topthink\framework\src\think\Route.php	/^    public function domain($name, $rule = null): Domain$/;"	v
rule	vendor\topthink\framework\src\think\Route.php	/^    public function rule(string $rule, $route = null, string $method = '*'): RuleItem$/;"	f
ruleItem	vendor\topthink\framework\src\think\Route.php	/^    public function setRule(string $rule, RuleItem $ruleItem = null): void$/;"	v
ruleName	vendor\topthink\framework\src\think\Route.php	/^        $this->ruleName = new RuleName();$/;"	v
ruleName	vendor\topthink\framework\src\think\Route.php	/^    protected $ruleName;$/;"	v
setCrossDomainRule	vendor\topthink\framework\src\think\Route.php	/^    public function setCrossDomainRule(Rule $rule, string $method = '*')$/;"	f
setDefaultDomain	vendor\topthink\framework\src\think\Route.php	/^    protected function setDefaultDomain(): void$/;"	f
setGroup	vendor\topthink\framework\src\think\Route.php	/^    public function setGroup(RuleGroup $group): void$/;"	f
setName	vendor\topthink\framework\src\think\Route.php	/^    public function setName(string $name, RuleItem $ruleItem, bool $first = false): void$/;"	f
setRule	vendor\topthink\framework\src\think\Route.php	/^    public function setRule(string $rule, RuleItem $ruleItem = null): void$/;"	f
setTestMode	vendor\topthink\framework\src\think\Route.php	/^    public function setTestMode(bool $test): void$/;"	f
subDomain	vendor\topthink\framework\src\think\Route.php	/^            $subDomain = $this->request->subDomain();$/;"	v
suffix	vendor\topthink\framework\src\think\Route.php	/^        $suffix   = $this->config['url_html_suffix'];$/;"	v
template	vendor\topthink\framework\src\think\Route.php	/^    public function view(string $rule, string $template = '', array $vars = []): RuleItem$/;"	v
url	vendor\topthink\framework\src\think\Route.php	/^        $url = str_replace($this->config['pathinfo_depr'], '|', $this->path());$/;"	v
url	vendor\topthink\framework\src\think\Route.php	/^    public function buildUrl(string $url = '', array $vars = []): UrlBuild$/;"	v
url	vendor\topthink\framework\src\think\Route.php	/^    public function url(string $url): UrlDispatch$/;"	f
view	vendor\topthink\framework\src\think\Route.php	/^    public function view(string $rule, string $template = '', array $vars = []): RuleItem$/;"	f
withRoute	vendor\topthink\framework\src\think\Route.php	/^    public function dispatch(Request $request, $withRoute = null)$/;"	v
Service	vendor\topthink\framework\src\think\Service.php	/^abstract class Service$/;"	c
__construct	vendor\topthink\framework\src\think\Service.php	/^    public function __construct(App $app)$/;"	f
app	vendor\topthink\framework\src\think\Service.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\Service.php	/^    protected $app;$/;"	v
commands	vendor\topthink\framework\src\think\Service.php	/^        $commands = is_array($commands) ? $commands : func_get_args();$/;"	v
commands	vendor\topthink\framework\src\think\Service.php	/^    protected function commands($commands)$/;"	f
loadRoutesFrom	vendor\topthink\framework\src\think\Service.php	/^    protected function loadRoutesFrom($path)$/;"	f
registerRoutes	vendor\topthink\framework\src\think\Service.php	/^    protected function registerRoutes(Closure $closure)$/;"	f
Session	vendor\topthink\framework\src\think\Session.php	/^class Session extends Manager$/;"	c
config	vendor\topthink\framework\src\think\Session.php	/^        $config = $this->app->config->get('session', []);$/;"	v
createDriver	vendor\topthink\framework\src\think\Session.php	/^    protected function createDriver(string $name)$/;"	f
getConfig	vendor\topthink\framework\src\think\Session.php	/^    public function getConfig(string $name = null, $default = null)$/;"	f
getDefaultDriver	vendor\topthink\framework\src\think\Session.php	/^    public function getDefaultDriver()$/;"	f
handler	vendor\topthink\framework\src\think\Session.php	/^        $handler = parent::createDriver($name);$/;"	v
name	vendor\topthink\framework\src\think\Session.php	/^    public function getConfig(string $name = null, $default = null)$/;"	v
namespace	vendor\topthink\framework\src\think\Session.php	/^    protected $namespace = '\\\\think\\\\session\\\\driver\\\\';$/;"	v
resolveConfig	vendor\topthink\framework\src\think\Session.php	/^    protected function resolveConfig(string $name)$/;"	f
Validate	vendor\topthink\framework\src\think\Validate.php	/^class Validate$/;"	c
__call	vendor\topthink\framework\src\think\Validate.php	/^    public function __call($method, $args)$/;"	f
__construct	vendor\topthink\framework\src\think\Validate.php	/^    public function __construct()$/;"	f
activeUrl	vendor\topthink\framework\src\think\Validate.php	/^    public function activeUrl(string $value, string $rule = 'MX'): bool$/;"	f
after	vendor\topthink\framework\src\think\Validate.php	/^    public function after($value, $rule, array $data = []): bool$/;"	f
afterWith	vendor\topthink\framework\src\think\Validate.php	/^    public function afterWith($value, $rule, array $data = []): bool$/;"	f
alias	vendor\topthink\framework\src\think\Validate.php	/^    protected $alias = [$/;"	v
allowIp	vendor\topthink\framework\src\think\Validate.php	/^    public function allowIp($value, $rule): bool$/;"	f
append	vendor\topthink\framework\src\think\Validate.php	/^    protected $append = [];$/;"	v
append	vendor\topthink\framework\src\think\Validate.php	/^    public function append($field, $rule = null)$/;"	f
array	vendor\topthink\framework\src\think\Validate.php	/^                $array = array_pad([], 3, '');$/;"	v
array	vendor\topthink\framework\src\think\Validate.php	/^                $array = array_pad(explode(',', $rule), 3, '');$/;"	v
batch	vendor\topthink\framework\src\think\Validate.php	/^        $this->batch = $batch;$/;"	v
batch	vendor\topthink\framework\src\think\Validate.php	/^    protected $batch = false;$/;"	v
batch	vendor\topthink\framework\src\think\Validate.php	/^    public function batch(bool $batch = true)$/;"	f
batch	vendor\topthink\framework\src\think\Validate.php	/^    public function batch(bool $batch = true)$/;"	v
before	vendor\topthink\framework\src\think\Validate.php	/^    public function before($value, $rule, array $data = []): bool$/;"	f
beforeWith	vendor\topthink\framework\src\think\Validate.php	/^    public function beforeWith($value, $rule, array $data = []): bool$/;"	f
between	vendor\topthink\framework\src\think\Validate.php	/^    public function between($value, $rule): bool$/;"	f
callback	vendor\topthink\framework\src\think\Validate.php	/^                $callback = $this->type[$type] ?? [$this, $type];$/;"	v
callback	vendor\topthink\framework\src\think\Validate.php	/^    public function extend(string $type, callable $callback = null, string $message = null)$/;"	v
check	vendor\topthink\framework\src\think\Validate.php	/^    public function check(array $data, array $rules = []): bool$/;"	f
checkExt	vendor\topthink\framework\src\think\Validate.php	/^    protected function checkExt(File $file, $ext): bool$/;"	f
checkItem	vendor\topthink\framework\src\think\Validate.php	/^    protected function checkItem(string $field, $value, $rules, $data, string $title = '', array $msg = [])$/;"	f
checkMime	vendor\topthink\framework\src\think\Validate.php	/^    protected function checkMime(File $file, $mime): bool$/;"	f
checkRule	vendor\topthink\framework\src\think\Validate.php	/^    public function checkRule($value, $rules): bool$/;"	f
checkSize	vendor\topthink\framework\src\think\Validate.php	/^    protected function checkSize(File $file, $size): bool$/;"	f
confirm	vendor\topthink\framework\src\think\Validate.php	/^    public function confirm($value, $rule, array $data = [], string $field = ''): bool$/;"	f
ctypeFun	vendor\topthink\framework\src\think\Validate.php	/^                    $ctypeFun = 'ctype_' . $rule;$/;"	v
currentScene	vendor\topthink\framework\src\think\Validate.php	/^        $this->currentScene = $name;$/;"	v
currentScene	vendor\topthink\framework\src\think\Validate.php	/^    protected $currentScene;$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function after($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function afterWith($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function before($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function beforeWith($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function confirm($value, $rule, array $data = [], string $field = ''): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function different($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function egt($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function elt($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function gt($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function is($value, string $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function lt($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function requireCallback($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function requireIf($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function requireWith($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function requireWithout($value, $rule, array $data = []): bool$/;"	v
data	vendor\topthink\framework\src\think\Validate.php	/^    public function unique($value, $rule, array $data = [], string $field = ''): bool$/;"	v
dateFormat	vendor\topthink\framework\src\think\Validate.php	/^    public function dateFormat($value, $rule): bool$/;"	f
db	vendor\topthink\framework\src\think\Validate.php	/^            $db = $this->db->name($rule[0]);$/;"	v
db	vendor\topthink\framework\src\think\Validate.php	/^            $db = new $rule[0];$/;"	v
db	vendor\topthink\framework\src\think\Validate.php	/^        $this->db = $db;$/;"	v
db	vendor\topthink\framework\src\think\Validate.php	/^    protected $db;$/;"	v
defaultRegex	vendor\topthink\framework\src\think\Validate.php	/^    protected $defaultRegex = [$/;"	v
denyIp	vendor\topthink\framework\src\think\Validate.php	/^    public function denyIp($value, $rule): bool$/;"	f
different	vendor\topthink\framework\src\think\Validate.php	/^    public function different($value, $rule, array $data = []): bool$/;"	f
egt	vendor\topthink\framework\src\think\Validate.php	/^    public function egt($value, $rule, array $data = []): bool$/;"	f
elt	vendor\topthink\framework\src\think\Validate.php	/^    public function elt($value, $rule, array $data = []): bool$/;"	f
end	vendor\topthink\framework\src\think\Validate.php	/^            $end = strtotime($end);$/;"	v
eq	vendor\topthink\framework\src\think\Validate.php	/^    public function eq($value, $rule): bool$/;"	f
error	vendor\topthink\framework\src\think\Validate.php	/^                    $this->error = $result;$/;"	v
error	vendor\topthink\framework\src\think\Validate.php	/^        $this->error = [];$/;"	v
error	vendor\topthink\framework\src\think\Validate.php	/^    protected $error = [];$/;"	v
errorMsgIsArray	vendor\topthink\framework\src\think\Validate.php	/^    protected function errorMsgIsArray(array $msg, $rule, string $title)$/;"	f
expire	vendor\topthink\framework\src\think\Validate.php	/^    public function expire($value, $rule): bool$/;"	f
ext	vendor\topthink\framework\src\think\Validate.php	/^            $ext = explode(',', $ext);$/;"	v
extend	vendor\topthink\framework\src\think\Validate.php	/^    public function extend(string $type, callable $callback = null, string $message = null)$/;"	f
fail	vendor\topthink\framework\src\think\Validate.php	/^    public function failException(bool $fail = true)$/;"	v
failException	vendor\topthink\framework\src\think\Validate.php	/^        $this->failException = $fail;$/;"	v
failException	vendor\topthink\framework\src\think\Validate.php	/^    protected $failException = false;$/;"	v
failException	vendor\topthink\framework\src\think\Validate.php	/^    public function failException(bool $fail = true)$/;"	f
field	vendor\topthink\framework\src\think\Validate.php	/^                $this->field = array_merge($this->field, $rule);$/;"	v
field	vendor\topthink\framework\src\think\Validate.php	/^    protected $field = [];$/;"	v
fields	vendor\topthink\framework\src\think\Validate.php	/^            $fields = explode('^', $key);$/;"	v
fileExt	vendor\topthink\framework\src\think\Validate.php	/^    public function fileExt($file, $rule): bool$/;"	f
fileMime	vendor\topthink\framework\src\think\Validate.php	/^    public function fileMime($file, $rule): bool$/;"	f
fileSize	vendor\topthink\framework\src\think\Validate.php	/^    public function fileSize($file, $rule): bool$/;"	f
filter	vendor\topthink\framework\src\think\Validate.php	/^    protected $filter = [$/;"	v
filter	vendor\topthink\framework\src\think\Validate.php	/^    public function filter($value, $rule): bool$/;"	f
getDataValue	vendor\topthink\framework\src\think\Validate.php	/^    protected function getDataValue(array $data, $key)$/;"	f
getError	vendor\topthink\framework\src\think\Validate.php	/^    public function getError()$/;"	f
getImageType	vendor\topthink\framework\src\think\Validate.php	/^    protected function getImageType($image)$/;"	f
getRuleMsg	vendor\topthink\framework\src\think\Validate.php	/^    protected function getRuleMsg(string $attribute, string $title, string $type, $rule)$/;"	f
getScene	vendor\topthink\framework\src\think\Validate.php	/^    protected function getScene(string $scene): void$/;"	f
getValidateType	vendor\topthink\framework\src\think\Validate.php	/^    protected function getValidateType($key, $rule): array$/;"	f
gt	vendor\topthink\framework\src\think\Validate.php	/^    public function gt($value, $rule, array $data = []): bool$/;"	f
hasScene	vendor\topthink\framework\src\think\Validate.php	/^    public function hasScene(string $name): bool$/;"	f
i	vendor\topthink\framework\src\think\Validate.php	/^        $i = 0;$/;"	v
image	vendor\topthink\framework\src\think\Validate.php	/^    public function image($file, $rule): bool$/;"	f
imageType	vendor\topthink\framework\src\think\Validate.php	/^                    $imageType = 'jpg';$/;"	v
imageType	vendor\topthink\framework\src\think\Validate.php	/^                $imageType = strtolower($rule[2]);$/;"	v
in	vendor\topthink\framework\src\think\Validate.php	/^    public function in($value, $rule): bool$/;"	f
info	vendor\topthink\framework\src\think\Validate.php	/^                $info   = is_numeric($key) ? '' : $key;$/;"	v
info	vendor\topthink\framework\src\think\Validate.php	/^            $info = $rule;$/;"	v
info	vendor\topthink\framework\src\think\Validate.php	/^            $info = $type;$/;"	v
info	vendor\topthink\framework\src\think\Validate.php	/^            $info = getimagesize($image);$/;"	v
info	vendor\topthink\framework\src\think\Validate.php	/^        $info = date_parse_from_format($rule, $value);$/;"	v
ip	vendor\topthink\framework\src\think\Validate.php	/^    public function ip($value, string $rule = 'ipv4'): bool$/;"	f
is	vendor\topthink\framework\src\think\Validate.php	/^    public function is($value, string $rule, array $data = []): bool$/;"	f
key	vendor\topthink\framework\src\think\Validate.php	/^                $key = $this->alias[$key];$/;"	v
key	vendor\topthink\framework\src\think\Validate.php	/^            foreach ($field as $key => $rule) {$/;"	v
key	vendor\topthink\framework\src\think\Validate.php	/^        $key = $rule[1] ?? $field;$/;"	v
key	vendor\topthink\framework\src\think\Validate.php	/^        foreach ($msg as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\Validate.php	/^        foreach ($rules as $key => $rule) {$/;"	v
key	vendor\topthink\framework\src\think\Validate.php	/^        foreach ($this->append as $key => $rule) {$/;"	v
lang	vendor\topthink\framework\src\think\Validate.php	/^        $this->lang = $lang;$/;"	v
lang	vendor\topthink\framework\src\think\Validate.php	/^    protected $lang;$/;"	v
length	vendor\topthink\framework\src\think\Validate.php	/^            $length = $value->getSize();$/;"	v
length	vendor\topthink\framework\src\think\Validate.php	/^            $length = count($value);$/;"	v
length	vendor\topthink\framework\src\think\Validate.php	/^            $length = mb_strlen((string) $value);$/;"	v
length	vendor\topthink\framework\src\think\Validate.php	/^        return $length == $rule;$/;"	v
length	vendor\topthink\framework\src\think\Validate.php	/^    public function length($value, $rule): bool$/;"	f
lt	vendor\topthink\framework\src\think\Validate.php	/^    public function lt($value, $rule, array $data = []): bool$/;"	f
maker	vendor\topthink\framework\src\think\Validate.php	/^    protected static $maker = [];$/;"	v
maker	vendor\topthink\framework\src\think\Validate.php	/^    public static function maker(Closure $maker)$/;"	f
map	vendor\topthink\framework\src\think\Validate.php	/^            $map = [];$/;"	v
map	vendor\topthink\framework\src\think\Validate.php	/^        $map = [];$/;"	v
max	vendor\topthink\framework\src\think\Validate.php	/^    public function max($value, $rule): bool$/;"	f
message	vendor\topthink\framework\src\think\Validate.php	/^                        $message = $this->lang->get(substr($message, 2, -1));$/;"	v
message	vendor\topthink\framework\src\think\Validate.php	/^                    $message = $msg[$i];$/;"	v
message	vendor\topthink\framework\src\think\Validate.php	/^                    $message = $this->getRuleMsg($field, $title, $info, $rule);$/;"	v
message	vendor\topthink\framework\src\think\Validate.php	/^        $this->message = array_merge($this->message, $message);$/;"	v
message	vendor\topthink\framework\src\think\Validate.php	/^    protected $message = [];$/;"	v
message	vendor\topthink\framework\src\think\Validate.php	/^    public function message(array $message)$/;"	f
method	vendor\topthink\framework\src\think\Validate.php	/^            $method = substr($method, 2);$/;"	v
mime	vendor\topthink\framework\src\think\Validate.php	/^            $mime = explode(',', $mime);$/;"	v
min	vendor\topthink\framework\src\think\Validate.php	/^    public function min($value, $rule): bool$/;"	f
msg	vendor\topthink\framework\src\think\Validate.php	/^                $msg = str_replace(':rule', (string) $rule, $msg);$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->lang->get($msg);$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->lang->get(substr($msg, 2, -1));$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->message[$attribute . '.' . $type];$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->message[$attribute];$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->message[$attribute][$type];$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->typeMsg[$type];$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $this->typeMsg['require'];$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = $title . $this->lang->get('not conform to the rules');$/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^            $msg = str_replace($/;"	v
msg	vendor\topthink\framework\src\think\Validate.php	/^    public function setTypeMsg($type, string $msg = null): void$/;"	v
must	vendor\topthink\framework\src\think\Validate.php	/^    public function must($value, $rule = null): bool$/;"	f
notBetween	vendor\topthink\framework\src\think\Validate.php	/^    public function notBetween($value, $rule): bool$/;"	f
notIn	vendor\topthink\framework\src\think\Validate.php	/^    public function notIn($value, $rule): bool$/;"	f
only	vendor\topthink\framework\src\think\Validate.php	/^            $this->only = $this->scene[$scene];$/;"	v
only	vendor\topthink\framework\src\think\Validate.php	/^        $this->only = $fields;$/;"	v
only	vendor\topthink\framework\src\think\Validate.php	/^        $this->only = $this->append = $this->remove = [];$/;"	v
only	vendor\topthink\framework\src\think\Validate.php	/^    protected $only = [];$/;"	v
only	vendor\topthink\framework\src\think\Validate.php	/^    public function only(array $fields)$/;"	f
param	vendor\topthink\framework\src\think\Validate.php	/^            $param = $rule[1] ?? null;$/;"	v
param	vendor\topthink\framework\src\think\Validate.php	/^            $param = null;$/;"	v
parseErrorMsg	vendor\topthink\framework\src\think\Validate.php	/^    protected function parseErrorMsg(string $msg, $rule, string $title)$/;"	f
pk	vendor\topthink\framework\src\think\Validate.php	/^        $pk = !empty($rule[3]) ? $rule[3] : $db->getPk();$/;"	v
regex	vendor\topthink\framework\src\think\Validate.php	/^    protected $regex = [];$/;"	v
regex	vendor\topthink\framework\src\think\Validate.php	/^    public function regex($value, $rule): bool$/;"	f
remove	vendor\topthink\framework\src\think\Validate.php	/^    protected $remove = [];$/;"	v
remove	vendor\topthink\framework\src\think\Validate.php	/^    public function remove($field, $rule = null)$/;"	f
request	vendor\topthink\framework\src\think\Validate.php	/^        $this->request = $request;$/;"	v
request	vendor\topthink\framework\src\think\Validate.php	/^    protected $request;$/;"	v
requireCallback	vendor\topthink\framework\src\think\Validate.php	/^    public function requireCallback($value, $rule, array $data = []): bool$/;"	f
requireIf	vendor\topthink\framework\src\think\Validate.php	/^    public function requireIf($value, $rule, array $data = []): bool$/;"	f
requireWith	vendor\topthink\framework\src\think\Validate.php	/^    public function requireWith($value, $rule, array $data = []): bool$/;"	f
requireWithout	vendor\topthink\framework\src\think\Validate.php	/^    public function requireWithout($value, $rule, array $data = []): bool$/;"	f
result	vendor\topthink\framework\src\think\Validate.php	/^                        $result = str_replace(':rule', (string) $rule, $result);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result   = $ctypeFun($value);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = $this->filter($value, $this->filter[$rule]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = $this->regex($value, $rule);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = call_user_func_array($this->type[$rule], [$value]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = call_user_func_array($this->type[$type], [$value, $rule, $data, $field, $title]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = call_user_func_array([$this, $type], [$value, $rule, $data, $field, $title]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = str_replace(':attribute', $title, $result);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                    $result = true;$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = !empty($value) || '0' == $value;$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = $this->checkItem($key, $value, $rule, $data, $title);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = $this->checkItem($key, $value, $rule->getRule(), $data, $rule->getTitle() ?: $title, $rule->getMsg());$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = $this->token($value, '__token__', $data);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = $value instanceof File && in_array($this->getImageType($value->getRealPath()), [1, 2, 3, 6]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = $value instanceof File;$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = call_user_func_array($callback, [$value, $rule]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = call_user_func_array($rule, [$value, $data]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = call_user_func_array($rule, [$value]);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = checkdnsrr($value);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = ctype_alnum($value);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = ctype_digit((string) $value);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = false !== strtotime($value);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = in_array($value, ['1', 'on', 'yes']);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = in_array($value, [true, false, 0, 1, '0', '1'], true);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^                $result = is_array($value);$/;"	v
result	vendor\topthink\framework\src\think\Validate.php	/^        $result = call_user_func_array([$this, $rule], [$value, $data]);$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^                $rule = $field . '_confirm';$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^                $rule = explode('|', $rule);$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^                $rule = strstr($field, '_confirm', true);$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule  = $rule[0];$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = $this->defaultRegex[$rule];$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = $this->regex[$rule];$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = '';$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = 'MX';$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = '\/^' . $rule . '$\/';$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = 'ipv4';$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $rule = explode(',', $rule);$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^            $this->rule = $name + $this->rule;$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^        $rule = !empty($rule) ? $rule : '__token__';$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^        $rule = $this->getDataValue($data, $rule);$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    protected $rule = [];$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function activeUrl(string $value, string $rule = 'MX'): bool$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function append($field, $rule = null)$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function ip($value, string $rule = 'ipv4'): bool$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function must($value, $rule = null): bool$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function remove($field, $rule = null)$/;"	v
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function rule($name, $rule = '')$/;"	f
rule	vendor\topthink\framework\src\think\Validate.php	/^    public function rule($name, $rule = '')$/;"	v
rules	vendor\topthink\framework\src\think\Validate.php	/^            $rules = $rules->getRule();$/;"	v
rules	vendor\topthink\framework\src\think\Validate.php	/^            $rules = $this->rule;$/;"	v
rules	vendor\topthink\framework\src\think\Validate.php	/^            $rules = array_unique(array_merge($rules, $this->append[$field]), SORT_REGULAR);$/;"	v
rules	vendor\topthink\framework\src\think\Validate.php	/^            $rules = explode('|', $rules);$/;"	v
rules	vendor\topthink\framework\src\think\Validate.php	/^    public function check(array $data, array $rules = []): bool$/;"	v
scene	vendor\topthink\framework\src\think\Validate.php	/^    protected $scene = [];$/;"	v
scene	vendor\topthink\framework\src\think\Validate.php	/^    public function scene(string $name)$/;"	f
setDb	vendor\topthink\framework\src\think\Validate.php	/^    public function setDb(Db $db)$/;"	f
setLang	vendor\topthink\framework\src\think\Validate.php	/^    public function setLang(Lang $lang)$/;"	f
setRequest	vendor\topthink\framework\src\think\Validate.php	/^    public function setRequest(Request $request)$/;"	f
setTypeMsg	vendor\topthink\framework\src\think\Validate.php	/^    public function setTypeMsg($type, string $msg = null): void$/;"	f
start	vendor\topthink\framework\src\think\Validate.php	/^            $start = strtotime($start);$/;"	v
title	vendor\topthink\framework\src\think\Validate.php	/^                $title = $this->field[$key] ?? $key;$/;"	v
title	vendor\topthink\framework\src\think\Validate.php	/^    protected function checkItem(string $field, $value, $rules, $data, string $title = '', array $msg = [])$/;"	v
token	vendor\topthink\framework\src\think\Validate.php	/^    public function token($value, string $rule, array $data): bool$/;"	f
type	vendor\topthink\framework\src\think\Validate.php	/^                $type = $this->alias[$type];$/;"	v
type	vendor\topthink\framework\src\think\Validate.php	/^            $type = $rule;$/;"	v
type	vendor\topthink\framework\src\think\Validate.php	/^            $type = 'is';$/;"	v
type	vendor\topthink\framework\src\think\Validate.php	/^    protected $type = [];$/;"	v
typeMsg	vendor\topthink\framework\src\think\Validate.php	/^            $this->typeMsg = array_merge($this->typeMsg, $type);$/;"	v
typeMsg	vendor\topthink\framework\src\think\Validate.php	/^    protected $typeMsg = [$/;"	v
unique	vendor\topthink\framework\src\think\Validate.php	/^    public function unique($value, $rule, array $data = [], string $field = ''): bool$/;"	f
val	vendor\topthink\framework\src\think\Validate.php	/^        $val = $this->getDataValue($data, $rule);$/;"	v
value	vendor\topthink\framework\src\think\Validate.php	/^                    $value = null;$/;"	v
value	vendor\topthink\framework\src\think\Validate.php	/^                $value = $data = $data[$key];$/;"	v
value	vendor\topthink\framework\src\think\Validate.php	/^            $value = $data[$key] ?? null;$/;"	v
value	vendor\topthink\framework\src\think\Validate.php	/^            $value = $key;$/;"	v
value	vendor\topthink\framework\src\think\Validate.php	/^            $value = $this->getDataValue($data, $key);$/;"	v
value	vendor\topthink\framework\src\think\Validate.php	/^        return $value == $rule;$/;"	v
w	vendor\topthink\framework\src\think\Validate.php	/^            return $w == $width && $h == $height;$/;"	v
View	vendor\topthink\framework\src\think\View.php	/^class View extends Manager$/;"	c
__get	vendor\topthink\framework\src\think\View.php	/^    public function __get($name)$/;"	f
__isset	vendor\topthink\framework\src\think\View.php	/^    public function __isset($name)$/;"	f
__set	vendor\topthink\framework\src\think\View.php	/^    public function __set($name, $value)$/;"	f
assign	vendor\topthink\framework\src\think\View.php	/^    public function assign($name, $value = null)$/;"	f
config	vendor\topthink\framework\src\think\View.php	/^        $config = $this->app->config->get('view', []);$/;"	v
content	vendor\topthink\framework\src\think\View.php	/^            $content = call_user_func_array($this->filter, [$content]);$/;"	v
content	vendor\topthink\framework\src\think\View.php	/^        $content = ob_get_clean();$/;"	v
data	vendor\topthink\framework\src\think\View.php	/^            $this->data = array_merge($this->data, $name);$/;"	v
data	vendor\topthink\framework\src\think\View.php	/^    protected $data = [];$/;"	v
display	vendor\topthink\framework\src\think\View.php	/^    public function display(string $content, array $vars = []): string$/;"	f
engine	vendor\topthink\framework\src\think\View.php	/^    public function engine(string $type = null)$/;"	f
fetch	vendor\topthink\framework\src\think\View.php	/^    public function fetch(string $template = '', array $vars = []): string$/;"	f
filter	vendor\topthink\framework\src\think\View.php	/^        $this->filter = $filter;$/;"	v
filter	vendor\topthink\framework\src\think\View.php	/^    protected $filter;$/;"	v
filter	vendor\topthink\framework\src\think\View.php	/^    public function filter(callable $filter = null)$/;"	f
filter	vendor\topthink\framework\src\think\View.php	/^    public function filter(callable $filter = null)$/;"	v
getContent	vendor\topthink\framework\src\think\View.php	/^    protected function getContent($callback): string$/;"	f
getDefaultDriver	vendor\topthink\framework\src\think\View.php	/^    public function getDefaultDriver()$/;"	f
namespace	vendor\topthink\framework\src\think\View.php	/^    protected $namespace = '\\\\think\\\\view\\\\driver\\\\';$/;"	v
resolveConfig	vendor\topthink\framework\src\think\View.php	/^    protected function resolveConfig(string $name)$/;"	f
template	vendor\topthink\framework\src\think\View.php	/^    public function fetch(string $template = '', array $vars = []): string$/;"	v
type	vendor\topthink\framework\src\think\View.php	/^    public function engine(string $type = null)$/;"	v
value	vendor\topthink\framework\src\think\View.php	/^    public function assign($name, $value = null)$/;"	v
vars	vendor\topthink\framework\src\think\View.php	/^    public function display(string $content, array $vars = []): string$/;"	v
Driver	vendor\topthink\framework\src\think\cache\Driver.php	/^abstract class Driver implements CacheInterface, CacheHandlerInterface$/;"	c
__call	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function __call($method, $args)$/;"	f
default	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getMultiple($keys, $default = null): iterable$/;"	v
deleteMultiple	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function deleteMultiple($keys): bool$/;"	f
expire	vendor\topthink\framework\src\think\cache\Driver.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	vendor\topthink\framework\src\think\cache\Driver.php	/^            $expire = DateTime::createFromFormat('U', (string) time())$/;"	v
expire	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function remember(string $name, $value, $expire = null)$/;"	v
getCacheKey	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getCacheKey(string $name): string$/;"	f
getExpireTime	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected function getExpireTime($expire): int$/;"	f
getMultiple	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getMultiple($keys, $default = null): iterable$/;"	f
getReadTimes	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getReadTimes(): int$/;"	f
getTagItems	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getTagItems(string $tag): array$/;"	f
getTagKey	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getTagKey(string $tag): string$/;"	f
getWriteTimes	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function getWriteTimes(): int$/;"	f
handler	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected $handler = null;$/;"	v
handler	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function handler()$/;"	f
item	vendor\topthink\framework\src\think\cache\Driver.php	/^        $item = $this->get($name, []);$/;"	v
item	vendor\topthink\framework\src\think\cache\Driver.php	/^        $item = array_unique($item);$/;"	v
key	vendor\topthink\framework\src\think\cache\Driver.php	/^        $key  = implode('-', $name);$/;"	v
key	vendor\topthink\framework\src\think\cache\Driver.php	/^        foreach ($values as $key => $val) {$/;"	v
name	vendor\topthink\framework\src\think\cache\Driver.php	/^            $name = array_map(function ($val) {$/;"	v
name	vendor\topthink\framework\src\think\cache\Driver.php	/^        $name = (array) $name;$/;"	v
options	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected $options = [];$/;"	v
pull	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function pull(string $name)$/;"	f
push	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function push(string $name, $value): void$/;"	f
readTimes	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected $readTimes = 0;$/;"	v
remember	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function remember(string $name, $value, $expire = null)$/;"	f
result	vendor\topthink\framework\src\think\cache\Driver.php	/^            $result = $this->delete($key);$/;"	v
result	vendor\topthink\framework\src\think\cache\Driver.php	/^            $result = $this->set($key, $val, $ttl);$/;"	v
result	vendor\topthink\framework\src\think\cache\Driver.php	/^        $result = $this->get($name, false);$/;"	v
result	vendor\topthink\framework\src\think\cache\Driver.php	/^        $result = [];$/;"	v
serialize	vendor\topthink\framework\src\think\cache\Driver.php	/^        $serialize = $this->options['serialize'][0] ?? "\\Opis\\Closure\\serialize";$/;"	v
serialize	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected function serialize($data): string$/;"	f
setMultiple	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function setMultiple($values, $ttl = null): bool$/;"	f
tag	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected $tag = [];$/;"	v
tag	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function tag($name): TagSet$/;"	f
time	vendor\topthink\framework\src\think\cache\Driver.php	/^        $time = time();$/;"	v
ttl	vendor\topthink\framework\src\think\cache\Driver.php	/^    public function setMultiple($values, $ttl = null): bool$/;"	v
unserialize	vendor\topthink\framework\src\think\cache\Driver.php	/^        $unserialize = $this->options['serialize'][1] ?? "\\Opis\\Closure\\unserialize";$/;"	v
unserialize	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected function unserialize(string $data)$/;"	f
value	vendor\topthink\framework\src\think\cache\Driver.php	/^                $value = $value();$/;"	v
writeTimes	vendor\topthink\framework\src\think\cache\Driver.php	/^    protected $writeTimes = 0;$/;"	v
TagSet	vendor\topthink\framework\src\think\cache\TagSet.php	/^class TagSet$/;"	c
__construct	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function __construct(array $tag, Driver $cache)$/;"	f
append	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function append(string $name): void$/;"	f
clear	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function clear(): bool$/;"	f
expire	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function remember(string $name, $value, $expire = null)$/;"	v
expire	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function set(string $name, $value, $expire = null): bool$/;"	v
handler	vendor\topthink\framework\src\think\cache\TagSet.php	/^        $this->handler = $cache;$/;"	v
handler	vendor\topthink\framework\src\think\cache\TagSet.php	/^    protected $handler;$/;"	v
key	vendor\topthink\framework\src\think\cache\TagSet.php	/^        foreach ($values as $key => $val) {$/;"	v
name	vendor\topthink\framework\src\think\cache\TagSet.php	/^        $name = $this->handler->getCacheKey($name);$/;"	v
names	vendor\topthink\framework\src\think\cache\TagSet.php	/^            $names = $this->handler->getTagItems($tag);$/;"	v
remember	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function remember(string $name, $value, $expire = null)$/;"	f
result	vendor\topthink\framework\src\think\cache\TagSet.php	/^            $result = $this->set($key, $val, $ttl);$/;"	v
result	vendor\topthink\framework\src\think\cache\TagSet.php	/^        $result = $this->handler->remember($name, $value, $expire);$/;"	v
set	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function set(string $name, $value, $expire = null): bool$/;"	f
setMultiple	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function setMultiple($values, $ttl = null): bool$/;"	f
tag	vendor\topthink\framework\src\think\cache\TagSet.php	/^        $this->tag     = $tag;$/;"	v
tag	vendor\topthink\framework\src\think\cache\TagSet.php	/^    protected $tag;$/;"	v
ttl	vendor\topthink\framework\src\think\cache\TagSet.php	/^    public function setMultiple($values, $ttl = null): bool$/;"	v
File	vendor\topthink\framework\src\think\cache\driver\File.php	/^class File extends Driver$/;"	c
__construct	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function __construct(App $app, array $options = [])$/;"	f
clear	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function clear(): bool$/;"	f
clearTag	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function clearTag(array $keys): void$/;"	f
content	vendor\topthink\framework\src\think\cache\driver\File.php	/^                $content = gzuncompress($content);$/;"	v
content	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $content = substr($content, 32);$/;"	v
content	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $content = @file_get_contents($filename);$/;"	v
data	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $data = gzcompress($data, 3);$/;"	v
data	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $data   = "<?php\\n\/\/" . sprintf('%012d', $expire) . "\\n exit();?>\\n" . $data;$/;"	v
data	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $data = $this->serialize($value);$/;"	v
dec	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function dec(string $name, int $step = 1)$/;"	f
default	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function get($name, $default = null)$/;"	v
delete	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function delete($name): bool$/;"	f
dir	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $dir = dirname($filename);$/;"	v
dirname	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $dirname = $this->options['path'] . $this->options['prefix'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $expire = $raw['expire'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $expire = $this->options['expire'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $expire = (int) substr($content, 8, 12);$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $expire = 0;$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $expire   = $this->getExpireTime($expire);$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function set($name, $value, $expire = null): bool$/;"	v
filename	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $filename = $this->getCacheKey($name);$/;"	v
get	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function get($name, $default = null)$/;"	f
getCacheKey	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function getCacheKey(string $name): string$/;"	f
getRaw	vendor\topthink\framework\src\think\cache\driver\File.php	/^    protected function getRaw(string $name)$/;"	f
has	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function has($name): bool$/;"	f
inc	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function inc(string $name, int $step = 1)$/;"	f
items	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $items = new FilesystemIterator($dirname);$/;"	v
name	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $name = $this->options['prefix'] . DIRECTORY_SEPARATOR . $name;$/;"	v
name	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $name = substr($name, 0, 2) . DIRECTORY_SEPARATOR . substr($name, 2);$/;"	v
name	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $name = hash($this->options['hash_type'], $name);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\File.php	/^    protected $options = [$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function __construct(App $app, array $options = [])$/;"	v
raw	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $raw = $this->getRaw($name);$/;"	v
result	vendor\topthink\framework\src\think\cache\driver\File.php	/^        $result = file_put_contents($filename, $data);$/;"	v
rmdir	vendor\topthink\framework\src\think\cache\driver\File.php	/^    private function rmdir($dirname)$/;"	f
set	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function set($name, $value, $expire = null): bool$/;"	f
step	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function dec(string $name, int $step = 1)$/;"	v
step	vendor\topthink\framework\src\think\cache\driver\File.php	/^    public function inc(string $name, int $step = 1)$/;"	v
unlink	vendor\topthink\framework\src\think\cache\driver\File.php	/^    private function unlink(string $path): bool$/;"	f
value	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $value  = $step;$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\File.php	/^            $value  = $this->unserialize($raw['content']) + $step;$/;"	v
Memcache	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^class Memcache extends Driver$/;"	c
__construct	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function __construct(array $options = [])$/;"	f
clear	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function clear(): bool$/;"	f
clearTag	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function clearTag(array $keys): void$/;"	f
dec	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function dec(string $name, int $step = 1)$/;"	f
default	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function get($name, $default = null)$/;"	v
delete	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function delete($name, $ttl = false): bool$/;"	f
expire	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $expire = $this->getExpireTime($expire);$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function set($name, $value, $expire = null): bool$/;"	v
get	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function get($name, $default = null)$/;"	f
handler	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $this->handler = new \\Memcache;$/;"	v
has	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function has($name): bool$/;"	f
hosts	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $hosts = (array) $this->options['host'];$/;"	v
i	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        foreach ($hosts as $i => $host) {$/;"	v
inc	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function inc(string $name, int $step = 1)$/;"	f
key	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $key    = $this->getCacheKey($name);$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $key = $this->getCacheKey($name);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    protected $options = [$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function __construct(array $options = [])$/;"	v
port	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^            $port = $ports[$i] ?? $ports[0];$/;"	v
ports	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $ports = (array) $this->options['port'];$/;"	v
res	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $res   = $this->handler->set($key, $value);$/;"	v
result	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $result = $this->handler->get($this->getCacheKey($name));$/;"	v
set	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function set($name, $value, $expire = null): bool$/;"	f
step	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function dec(string $name, int $step = 1)$/;"	v
step	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function inc(string $name, int $step = 1)$/;"	v
ttl	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^    public function delete($name, $ttl = false): bool$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $value  = $this->serialize($value);$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Memcache.php	/^        $value = $this->handler->get($key) - $step;$/;"	v
Memcached	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^class Memcached extends Driver$/;"	c
__construct	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function __construct(array $options = [])$/;"	f
clear	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function clear(): bool$/;"	f
clearTag	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function clearTag(array $keys): void$/;"	f
dec	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function dec(string $name, int $step = 1)$/;"	f
default	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function get($name, $default = null)$/;"	v
delete	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function delete($name): bool$/;"	f
expire	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^            $expire = $this->options['expire'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $expire = $this->getExpireTime($expire);$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function set($name, $value, $expire = null): bool$/;"	v
get	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function get($name, $default = null)$/;"	f
handler	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $this->handler = new \\Memcached;$/;"	v
has	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function has($name): bool$/;"	f
hosts	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $hosts = (array) $this->options['host'];$/;"	v
i	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        foreach ($hosts as $i => $host) {$/;"	v
inc	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function inc(string $name, int $step = 1)$/;"	f
key	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $key    = $this->getCacheKey($name);$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $key = $this->getCacheKey($name);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    protected $options = [$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function __construct(array $options = [])$/;"	v
ports	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $ports = (array) $this->options['port'];$/;"	v
res	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $res   = $this->handler->set($key, $value);$/;"	v
result	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $result = $this->handler->get($this->getCacheKey($name));$/;"	v
servers	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $servers = [];$/;"	v
set	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function set($name, $value, $expire = null): bool$/;"	f
step	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function dec(string $name, int $step = 1)$/;"	v
step	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^    public function inc(string $name, int $step = 1)$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $value  = $this->serialize($value);$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Memcached.php	/^        $value = $this->handler->get($key) - $step;$/;"	v
Redis	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^class Redis extends Driver$/;"	c
__construct	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function __construct(array $options = [])$/;"	f
clear	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function clear(): bool$/;"	f
clearTag	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function clearTag(array $keys): void$/;"	f
dec	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function dec(string $name, int $step = 1)$/;"	f
default	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function get($name, $default = null)$/;"	v
delete	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function delete($name): bool$/;"	f
expire	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^            $expire = $this->options['expire'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^        $expire = $this->getExpireTime($expire);$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function set($name, $value, $expire = null): bool$/;"	v
get	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function get($name, $default = null)$/;"	f
getTagItems	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function getTagItems(string $tag): array$/;"	f
handler	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^            $this->handler = new \\Predis\\Client($this->options, $params);$/;"	v
handler	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^            $this->handler = new \\Redis;$/;"	v
handler	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    protected $handler;$/;"	v
has	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function has($name): bool$/;"	f
inc	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function inc(string $name, int $step = 1)$/;"	f
key	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^            foreach ($this->options as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^        $key    = $this->getCacheKey($name);$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^        $key = $this->getCacheKey($name);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    protected $options = [$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function __construct(array $options = [])$/;"	v
params	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^            $params = [];$/;"	v
push	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function push(string $name, $value): void$/;"	f
result	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^        $result = $this->handler->del($this->getCacheKey($name));$/;"	v
set	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function set($name, $value, $expire = null): bool$/;"	f
step	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function dec(string $name, int $step = 1)$/;"	v
step	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^    public function inc(string $name, int $step = 1)$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^        $value  = $this->serialize($value);$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Redis.php	/^        $value = $this->handler->get($this->getCacheKey($name));$/;"	v
Wincache	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^class Wincache extends Driver$/;"	c
__construct	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function __construct(array $options = [])$/;"	f
clear	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function clear(): bool$/;"	f
clearTag	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function clearTag(array $keys): void$/;"	f
dec	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function dec(string $name, int $step = 1)$/;"	f
default	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function get($name, $default = null)$/;"	v
delete	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function delete($name): bool$/;"	f
expire	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^        $expire = $this->getExpireTime($expire);$/;"	v
expire	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function set($name, $value, $expire = null): bool$/;"	v
get	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function get($name, $default = null)$/;"	f
has	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function has($name): bool$/;"	f
inc	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function inc(string $name, int $step = 1)$/;"	f
key	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^        $key    = $this->getCacheKey($name);$/;"	v
key	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^        $key = $this->getCacheKey($name);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    protected $options = [$/;"	v
options	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function __construct(array $options = [])$/;"	v
set	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function set($name, $value, $expire = null): bool$/;"	f
step	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function dec(string $name, int $step = 1)$/;"	v
step	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^    public function inc(string $name, int $step = 1)$/;"	v
value	vendor\topthink\framework\src\think\cache\driver\Wincache.php	/^        $value  = $this->serialize($value);$/;"	v
Command	vendor\topthink\framework\src\think\console\Command.php	/^abstract class Command$/;"	c
__construct	vendor\topthink\framework\src\think\console\Command.php	/^    public function __construct()$/;"	f
addArgument	vendor\topthink\framework\src\think\console\Command.php	/^    public function addArgument(string $name, int $mode = null, string $description = '', $default = null)$/;"	f
addOption	vendor\topthink\framework\src\think\console\Command.php	/^    public function addOption(string $name, string $shortcut = null, int $mode = null, string $description = '', $default = null)$/;"	f
addUsage	vendor\topthink\framework\src\think\console\Command.php	/^    public function addUsage(string $usage)$/;"	f
aliases	vendor\topthink\framework\src\think\console\Command.php	/^        $this->aliases = $aliases;$/;"	v
aliases	vendor\topthink\framework\src\think\console\Command.php	/^    private $aliases = [];$/;"	v
app	vendor\topthink\framework\src\think\console\Command.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\console\Command.php	/^    protected $app;$/;"	v
configure	vendor\topthink\framework\src\think\console\Command.php	/^    protected function configure()$/;"	f
console	vendor\topthink\framework\src\think\console\Command.php	/^        $this->console = $console;$/;"	v
console	vendor\topthink\framework\src\think\console\Command.php	/^    private $console;$/;"	v
console	vendor\topthink\framework\src\think\console\Command.php	/^    public function setConsole(Console $console = null): void$/;"	v
consoleDefinitionMerged	vendor\topthink\framework\src\think\console\Command.php	/^        $this->consoleDefinitionMerged = false;$/;"	v
consoleDefinitionMerged	vendor\topthink\framework\src\think\console\Command.php	/^        $this->consoleDefinitionMerged = true;$/;"	v
consoleDefinitionMerged	vendor\topthink\framework\src\think\console\Command.php	/^    private $consoleDefinitionMerged         = false;$/;"	v
consoleDefinitionMergedWithArgs	vendor\topthink\framework\src\think\console\Command.php	/^            $this->consoleDefinitionMergedWithArgs = true;$/;"	v
consoleDefinitionMergedWithArgs	vendor\topthink\framework\src\think\console\Command.php	/^    private $consoleDefinitionMergedWithArgs = false;$/;"	v
content	vendor\topthink\framework\src\think\console\Command.php	/^        $content = $table->render();$/;"	v
currentArguments	vendor\topthink\framework\src\think\console\Command.php	/^            $currentArguments = $this->definition->getArguments();$/;"	v
definition	vendor\topthink\framework\src\think\console\Command.php	/^            $this->definition = $definition;$/;"	v
definition	vendor\topthink\framework\src\think\console\Command.php	/^        $this->definition = new Definition();$/;"	v
definition	vendor\topthink\framework\src\think\console\Command.php	/^    private $definition;$/;"	v
description	vendor\topthink\framework\src\think\console\Command.php	/^        $this->description = $description;$/;"	v
description	vendor\topthink\framework\src\think\console\Command.php	/^    private $description;$/;"	v
error	vendor\topthink\framework\src\think\console\Command.php	/^                        $error = error_get_last();$/;"	v
execute	vendor\topthink\framework\src\think\console\Command.php	/^    protected function execute(Input $input, Output $output)$/;"	f
getAliases	vendor\topthink\framework\src\think\console\Command.php	/^    public function getAliases(): array$/;"	f
getApp	vendor\topthink\framework\src\think\console\Command.php	/^    public function getApp()$/;"	f
getConsole	vendor\topthink\framework\src\think\console\Command.php	/^    public function getConsole(): Console$/;"	f
getDefinition	vendor\topthink\framework\src\think\console\Command.php	/^    public function getDefinition(): Definition$/;"	f
getDescription	vendor\topthink\framework\src\think\console\Command.php	/^    public function getDescription(): string$/;"	f
getHelp	vendor\topthink\framework\src\think\console\Command.php	/^    public function getHelp(): string$/;"	f
getName	vendor\topthink\framework\src\think\console\Command.php	/^    public function getName(): string$/;"	f
getNativeDefinition	vendor\topthink\framework\src\think\console\Command.php	/^    public function getNativeDefinition(): Definition$/;"	f
getProcessedHelp	vendor\topthink\framework\src\think\console\Command.php	/^    public function getProcessedHelp(): string$/;"	f
getSynopsis	vendor\topthink\framework\src\think\console\Command.php	/^    public function getSynopsis(bool $short = false): string$/;"	f
getUsages	vendor\topthink\framework\src\think\console\Command.php	/^    public function getUsages(): array$/;"	f
help	vendor\topthink\framework\src\think\console\Command.php	/^        $this->help = $help;$/;"	v
help	vendor\topthink\framework\src\think\console\Command.php	/^    private $help;$/;"	v
ignoreValidationErrors	vendor\topthink\framework\src\think\console\Command.php	/^        $this->ignoreValidationErrors = true;$/;"	v
ignoreValidationErrors	vendor\topthink\framework\src\think\console\Command.php	/^    private $ignoreValidationErrors          = false;$/;"	v
ignoreValidationErrors	vendor\topthink\framework\src\think\console\Command.php	/^    public function ignoreValidationErrors(): void$/;"	f
initialize	vendor\topthink\framework\src\think\console\Command.php	/^    protected function initialize(Input $input, Output $output)$/;"	f
input	vendor\topthink\framework\src\think\console\Command.php	/^        $this->input  = $input;$/;"	v
input	vendor\topthink\framework\src\think\console\Command.php	/^    protected $input;$/;"	v
interact	vendor\topthink\framework\src\think\console\Command.php	/^    protected function interact(Input $input, Output $output)$/;"	f
isEnabled	vendor\topthink\framework\src\think\console\Command.php	/^    public function isEnabled(): bool$/;"	f
key	vendor\topthink\framework\src\think\console\Command.php	/^        $key = $short ? 'short' : 'long';$/;"	v
mergeArgs	vendor\topthink\framework\src\think\console\Command.php	/^    public function mergeConsoleDefinition(bool $mergeArgs = true)$/;"	v
mergeConsoleDefinition	vendor\topthink\framework\src\think\console\Command.php	/^    public function mergeConsoleDefinition(bool $mergeArgs = true)$/;"	f
mode	vendor\topthink\framework\src\think\console\Command.php	/^    public function addArgument(string $name, int $mode = null, string $description = '', $default = null)$/;"	v
name	vendor\topthink\framework\src\think\console\Command.php	/^        $name = $this->name;$/;"	v
name	vendor\topthink\framework\src\think\console\Command.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\framework\src\think\console\Command.php	/^    private $name;$/;"	v
output	vendor\topthink\framework\src\think\console\Command.php	/^        $this->output = $output;$/;"	v
output	vendor\topthink\framework\src\think\console\Command.php	/^    protected $output;$/;"	v
placeholders	vendor\topthink\framework\src\think\console\Command.php	/^        $placeholders = [$/;"	v
processTitle	vendor\topthink\framework\src\think\console\Command.php	/^        $this->processTitle = $title;$/;"	v
processTitle	vendor\topthink\framework\src\think\console\Command.php	/^    private $processTitle;$/;"	v
replacements	vendor\topthink\framework\src\think\console\Command.php	/^        $replacements = [$/;"	v
run	vendor\topthink\framework\src\think\console\Command.php	/^    public function run(Input $input, Output $output): int$/;"	f
setAliases	vendor\topthink\framework\src\think\console\Command.php	/^    public function setAliases(iterable $aliases)$/;"	f
setApp	vendor\topthink\framework\src\think\console\Command.php	/^    public function setApp(App $app)$/;"	f
setConsole	vendor\topthink\framework\src\think\console\Command.php	/^    public function setConsole(Console $console = null): void$/;"	f
setDefinition	vendor\topthink\framework\src\think\console\Command.php	/^    public function setDefinition($definition)$/;"	f
setDescription	vendor\topthink\framework\src\think\console\Command.php	/^    public function setDescription(string $description)$/;"	f
setHelp	vendor\topthink\framework\src\think\console\Command.php	/^    public function setHelp(string $help)$/;"	f
setName	vendor\topthink\framework\src\think\console\Command.php	/^    public function setName(string $name)$/;"	f
setProcessTitle	vendor\topthink\framework\src\think\console\Command.php	/^    public function setProcessTitle($title)$/;"	f
short	vendor\topthink\framework\src\think\console\Command.php	/^    public function getSynopsis(bool $short = false): string$/;"	v
shortcut	vendor\topthink\framework\src\think\console\Command.php	/^    public function addOption(string $name, string $shortcut = null, int $mode = null, string $description = '', $default = null)$/;"	v
statusCode	vendor\topthink\framework\src\think\console\Command.php	/^        $statusCode = $this->execute($input, $output);$/;"	v
synopsis	vendor\topthink\framework\src\think\console\Command.php	/^    private $synopsis                        = [];$/;"	v
table	vendor\topthink\framework\src\think\console\Command.php	/^    protected function table(Table $table): string$/;"	f
usage	vendor\topthink\framework\src\think\console\Command.php	/^            $usage = sprintf('%s %s', $this->name, $usage);$/;"	v
usages	vendor\topthink\framework\src\think\console\Command.php	/^    private $usages                          = [];$/;"	v
validateName	vendor\topthink\framework\src\think\console\Command.php	/^    private function validateName(string $name)$/;"	f
Input	vendor\topthink\framework\src\think\console\Input.php	/^class Input$/;"	c
__construct	vendor\topthink\framework\src\think\console\Input.php	/^    public function __construct($argv = null)$/;"	f
__toString	vendor\topthink\framework\src\think\console\Input.php	/^    public function __toString()$/;"	f
addLongOption	vendor\topthink\framework\src\think\console\Input.php	/^    private function addLongOption(string $name, $value): void$/;"	f
addShortOption	vendor\topthink\framework\src\think\console\Input.php	/^    private function addShortOption(string $shortcut, $value): void$/;"	f
arg	vendor\topthink\framework\src\think\console\Input.php	/^            $arg = $this->definition->getArgument($c - 1);$/;"	v
arg	vendor\topthink\framework\src\think\console\Input.php	/^            $arg = $this->definition->getArgument($c);$/;"	v
arguments	vendor\topthink\framework\src\think\console\Input.php	/^        $this->arguments  = [];$/;"	v
arguments	vendor\topthink\framework\src\think\console\Input.php	/^    protected $arguments = [];$/;"	v
argv	vendor\topthink\framework\src\think\console\Input.php	/^            $argv = $_SERVER['argv'];$/;"	v
bind	vendor\topthink\framework\src\think\console\Input.php	/^    public function bind(Definition $definition): void$/;"	f
c	vendor\topthink\framework\src\think\console\Input.php	/^        $c = count($this->arguments);$/;"	v
default	vendor\topthink\framework\src\think\console\Input.php	/^    public function getParameterOption($values, $default = false)$/;"	v
definition	vendor\topthink\framework\src\think\console\Input.php	/^        $this->definition = $definition;$/;"	v
definition	vendor\topthink\framework\src\think\console\Input.php	/^        $this->definition = new Definition();$/;"	v
definition	vendor\topthink\framework\src\think\console\Input.php	/^    protected $definition;$/;"	v
escapeToken	vendor\topthink\framework\src\think\console\Input.php	/^    public function escapeToken(string $token): string$/;"	f
getArgument	vendor\topthink\framework\src\think\console\Input.php	/^    public function getArgument(string $name)$/;"	f
getArguments	vendor\topthink\framework\src\think\console\Input.php	/^    public function getArguments(): array$/;"	f
getFirstArgument	vendor\topthink\framework\src\think\console\Input.php	/^    public function getFirstArgument()$/;"	f
getOption	vendor\topthink\framework\src\think\console\Input.php	/^    public function getOption(string $name)$/;"	f
getOptions	vendor\topthink\framework\src\think\console\Input.php	/^    public function getOptions(): array$/;"	f
getParameterOption	vendor\topthink\framework\src\think\console\Input.php	/^    public function getParameterOption($values, $default = false)$/;"	f
hasArgument	vendor\topthink\framework\src\think\console\Input.php	/^    public function hasArgument($name): bool$/;"	f
hasOption	vendor\topthink\framework\src\think\console\Input.php	/^    public function hasOption(string $name): bool$/;"	f
hasParameterOption	vendor\topthink\framework\src\think\console\Input.php	/^    public function hasParameterOption($values): bool$/;"	f
i	vendor\topthink\framework\src\think\console\Input.php	/^                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));$/;"	v
interactive	vendor\topthink\framework\src\think\console\Input.php	/^        $this->interactive = $interactive;$/;"	v
interactive	vendor\topthink\framework\src\think\console\Input.php	/^    protected $interactive = true;$/;"	v
isInteractive	vendor\topthink\framework\src\think\console\Input.php	/^    public function isInteractive(): bool$/;"	f
len	vendor\topthink\framework\src\think\console\Input.php	/^        $len = strlen($name);$/;"	v
name	vendor\topthink\framework\src\think\console\Input.php	/^        $name = substr($token, 1);$/;"	v
name	vendor\topthink\framework\src\think\console\Input.php	/^        $name = substr($token, 2);$/;"	v
next	vendor\topthink\framework\src\think\console\Input.php	/^            $next = array_shift($this->parsed);$/;"	v
option	vendor\topthink\framework\src\think\console\Input.php	/^            $option = $this->definition->getOptionForShortcut($name[$i]);$/;"	v
option	vendor\topthink\framework\src\think\console\Input.php	/^        $option = $this->definition->getOption($name);$/;"	v
options	vendor\topthink\framework\src\think\console\Input.php	/^        $this->options    = [];$/;"	v
options	vendor\topthink\framework\src\think\console\Input.php	/^    protected $options = [];$/;"	v
parse	vendor\topthink\framework\src\think\console\Input.php	/^    protected function parse(): void$/;"	f
parseArgument	vendor\topthink\framework\src\think\console\Input.php	/^    private function parseArgument(string $token): void$/;"	f
parseLongOption	vendor\topthink\framework\src\think\console\Input.php	/^    private function parseLongOption(string $token): void$/;"	f
parseOptions	vendor\topthink\framework\src\think\console\Input.php	/^                $parseOptions = false;$/;"	v
parseOptions	vendor\topthink\framework\src\think\console\Input.php	/^        $parseOptions = true;$/;"	v
parseShortOption	vendor\topthink\framework\src\think\console\Input.php	/^    private function parseShortOption(string $token): void$/;"	f
parseShortOptionSet	vendor\topthink\framework\src\think\console\Input.php	/^    private function parseShortOptionSet(string $name): void$/;"	f
parsed	vendor\topthink\framework\src\think\console\Input.php	/^        $this->parsed = $this->tokens;$/;"	v
parsed	vendor\topthink\framework\src\think\console\Input.php	/^    private $parsed;$/;"	v
pos	vendor\topthink\framework\src\think\console\Input.php	/^                    if (false !== $pos = strpos($token, '=')) {$/;"	v
pos	vendor\topthink\framework\src\think\console\Input.php	/^        if (false !== $pos = strpos($name, '=')) {$/;"	v
setArgument	vendor\topthink\framework\src\think\console\Input.php	/^    public function setArgument(string $name, $value)$/;"	f
setInteractive	vendor\topthink\framework\src\think\console\Input.php	/^    public function setInteractive(bool $interactive): void$/;"	f
setOption	vendor\topthink\framework\src\think\console\Input.php	/^    public function setOption(string $name, $value): void$/;"	f
setTokens	vendor\topthink\framework\src\think\console\Input.php	/^    protected function setTokens(array $tokens)$/;"	f
token	vendor\topthink\framework\src\think\console\Input.php	/^            $token = array_shift($tokens);$/;"	v
token	vendor\topthink\framework\src\think\console\Input.php	/^        while (null !== $token = array_shift($this->parsed)) {$/;"	v
tokens	vendor\topthink\framework\src\think\console\Input.php	/^        $this->tokens = $argv;$/;"	v
tokens	vendor\topthink\framework\src\think\console\Input.php	/^        $this->tokens = $tokens;$/;"	v
tokens	vendor\topthink\framework\src\think\console\Input.php	/^        $tokens = $this->tokens;$/;"	v
tokens	vendor\topthink\framework\src\think\console\Input.php	/^        $tokens = array_map(function ($token) {$/;"	v
tokens	vendor\topthink\framework\src\think\console\Input.php	/^    private $tokens;$/;"	v
validate	vendor\topthink\framework\src\think\console\Input.php	/^    public function validate()$/;"	f
value	vendor\topthink\framework\src\think\console\Input.php	/^                $value = $next;$/;"	v
value	vendor\topthink\framework\src\think\console\Input.php	/^                $value = $option->isValueOptional() ? $option->getDefault() : true;$/;"	v
value	vendor\topthink\framework\src\think\console\Input.php	/^                $value = '';$/;"	v
value	vendor\topthink\framework\src\think\console\Input.php	/^            $value = null;$/;"	v
values	vendor\topthink\framework\src\think\console\Input.php	/^        $values = (array) $values;$/;"	v
Output	vendor\topthink\framework\src\think\console\Output.php	/^class Output$/;"	c
__call	vendor\topthink\framework\src\think\console\Output.php	/^    public function __call($method, $args)$/;"	f
__construct	vendor\topthink\framework\src\think\console\Output.php	/^    public function __construct($driver = 'console')$/;"	f
answer	vendor\topthink\framework\src\think\console\Output.php	/^        $answer = $ask->run();$/;"	v
ask	vendor\topthink\framework\src\think\console\Output.php	/^        $ask    = new Ask($input, $this, $question);$/;"	v
ask	vendor\topthink\framework\src\think\console\Output.php	/^    public function ask(Input $input, $question, $default = null, $validator = null)$/;"	f
askHidden	vendor\topthink\framework\src\think\console\Output.php	/^    public function askHidden(Input $input, $question, $validator = null)$/;"	f
askQuestion	vendor\topthink\framework\src\think\console\Output.php	/^    protected function askQuestion(Input $input, Question $question)$/;"	f
block	vendor\topthink\framework\src\think\console\Output.php	/^    protected function block(string $style, string $message): void$/;"	f
choice	vendor\topthink\framework\src\think\console\Output.php	/^    public function choice(Input $input, $question, array $choices, $default = null)$/;"	f
class	vendor\topthink\framework\src\think\console\Output.php	/^        $class = '\\\\think\\\\console\\\\output\\\\driver\\\\' . ucwords($driver);$/;"	v
confirm	vendor\topthink\framework\src\think\console\Output.php	/^    public function confirm(Input $input, $question, $default = true)$/;"	f
count	vendor\topthink\framework\src\think\console\Output.php	/^    public function newLine(int $count = 1): void$/;"	v
default	vendor\topthink\framework\src\think\console\Output.php	/^            $default = $values[$default];$/;"	v
default	vendor\topthink\framework\src\think\console\Output.php	/^    public function ask(Input $input, $question, $default = null, $validator = null)$/;"	v
default	vendor\topthink\framework\src\think\console\Output.php	/^    public function choice(Input $input, $question, array $choices, $default = null)$/;"	v
default	vendor\topthink\framework\src\think\console\Output.php	/^    public function confirm(Input $input, $question, $default = true)$/;"	v
describe	vendor\topthink\framework\src\think\console\Output.php	/^    public function describe($object, array $options = []): void$/;"	f
descriptor	vendor\topthink\framework\src\think\console\Output.php	/^        $descriptor = new Descriptor();$/;"	v
getVerbosity	vendor\topthink\framework\src\think\console\Output.php	/^    public function getVerbosity(): int$/;"	f
handle	vendor\topthink\framework\src\think\console\Output.php	/^        $this->handle = new $class($this);$/;"	v
handle	vendor\topthink\framework\src\think\console\Output.php	/^    private $handle = null;$/;"	v
isDebug	vendor\topthink\framework\src\think\console\Output.php	/^    public function isDebug(): bool$/;"	f
isQuiet	vendor\topthink\framework\src\think\console\Output.php	/^    public function isQuiet(): bool$/;"	f
isVerbose	vendor\topthink\framework\src\think\console\Output.php	/^    public function isVerbose(): bool$/;"	f
isVeryVerbose	vendor\topthink\framework\src\think\console\Output.php	/^    public function isVeryVerbose(): bool$/;"	f
newLine	vendor\topthink\framework\src\think\console\Output.php	/^    public function newLine(int $count = 1): void$/;"	f
newline	vendor\topthink\framework\src\think\console\Output.php	/^    public function write(string $messages, bool $newline = false, int $type = 0): void$/;"	v
options	vendor\topthink\framework\src\think\console\Output.php	/^        $options    = array_merge([$/;"	v
options	vendor\topthink\framework\src\think\console\Output.php	/^    public function describe($object, array $options = []): void$/;"	v
question	vendor\topthink\framework\src\think\console\Output.php	/^        $question = new Question($question);$/;"	v
question	vendor\topthink\framework\src\think\console\Output.php	/^        $question = new Question($question, $default);$/;"	v
renderException	vendor\topthink\framework\src\think\console\Output.php	/^    public function renderException(Throwable $e): void$/;"	f
setVerbosity	vendor\topthink\framework\src\think\console\Output.php	/^    public function setVerbosity(int $level)$/;"	f
styles	vendor\topthink\framework\src\think\console\Output.php	/^    protected $styles = [$/;"	v
type	vendor\topthink\framework\src\think\console\Output.php	/^    public function writeln(string $messages, int $type = 0): void$/;"	v
validator	vendor\topthink\framework\src\think\console\Output.php	/^    public function askHidden(Input $input, $question, $validator = null)$/;"	v
values	vendor\topthink\framework\src\think\console\Output.php	/^            $values  = array_flip($choices);$/;"	v
verbosity	vendor\topthink\framework\src\think\console\Output.php	/^        $this->verbosity = $level;$/;"	v
verbosity	vendor\topthink\framework\src\think\console\Output.php	/^    private $verbosity = self::VERBOSITY_NORMAL;$/;"	v
write	vendor\topthink\framework\src\think\console\Output.php	/^    public function write(string $messages, bool $newline = false, int $type = 0): void$/;"	f
writeln	vendor\topthink\framework\src\think\console\Output.php	/^    public function writeln(string $messages, int $type = 0): void$/;"	f
Table	vendor\topthink\framework\src\think\console\Table.php	/^class Table$/;"	c
addRow	vendor\topthink\framework\src\think\console\Table.php	/^    public function addRow($row, bool $first = false): void$/;"	f
align	vendor\topthink\framework\src\think\console\Table.php	/^    public function setCellAlign(int $align = 1)$/;"	v
align	vendor\topthink\framework\src\think\console\Table.php	/^    public function setHeader(array $header, int $align = 1): void$/;"	v
align	vendor\topthink\framework\src\think\console\Table.php	/^    public function setRows(array $rows, int $align = 1): void$/;"	v
array	vendor\topthink\framework\src\think\console\Table.php	/^                    $array = [];$/;"	v
array	vendor\topthink\framework\src\think\console\Table.php	/^                    $array = str_pad($row, $width);$/;"	v
array	vendor\topthink\framework\src\think\console\Table.php	/^        $array = [];$/;"	v
cellAlign	vendor\topthink\framework\src\think\console\Table.php	/^        $this->cellAlign = $align;$/;"	v
cellAlign	vendor\topthink\framework\src\think\console\Table.php	/^    protected $cellAlign = 1;$/;"	v
checkColWidth	vendor\topthink\framework\src\think\console\Table.php	/^    protected function checkColWidth($row): void$/;"	f
colWidth	vendor\topthink\framework\src\think\console\Table.php	/^    protected $colWidth = [];$/;"	v
content	vendor\topthink\framework\src\think\console\Table.php	/^        $content = $this->renderHeader();$/;"	v
content	vendor\topthink\framework\src\think\console\Table.php	/^        $content = $this->renderSeparator('top');$/;"	v
dataList	vendor\topthink\framework\src\think\console\Table.php	/^    public function render(array $dataList = []): string$/;"	v
encoding	vendor\topthink\framework\src\think\console\Table.php	/^                        if (false !== $encoding = mb_detect_encoding((string) $val, null, true)) {$/;"	v
first	vendor\topthink\framework\src\think\console\Table.php	/^    public function addRow($row, bool $first = false): void$/;"	v
format	vendor\topthink\framework\src\think\console\Table.php	/^    protected $format = [$/;"	v
getStyle	vendor\topthink\framework\src\think\console\Table.php	/^    protected function getStyle(string $style): array$/;"	f
header	vendor\topthink\framework\src\think\console\Table.php	/^        $this->header      = $header;$/;"	v
header	vendor\topthink\framework\src\think\console\Table.php	/^    protected $header = [];$/;"	v
headerAlign	vendor\topthink\framework\src\think\console\Table.php	/^        $this->headerAlign = $align;$/;"	v
headerAlign	vendor\topthink\framework\src\think\console\Table.php	/^    protected $headerAlign = 1;$/;"	v
key	vendor\topthink\framework\src\think\console\Table.php	/^                    foreach ($row as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\console\Table.php	/^            foreach ($row as $key => $cell) {$/;"	v
key	vendor\topthink\framework\src\think\console\Table.php	/^        foreach ($this->header as $key => $header) {$/;"	v
render	vendor\topthink\framework\src\think\console\Table.php	/^    public function render(array $dataList = []): string$/;"	f
renderHeader	vendor\topthink\framework\src\think\console\Table.php	/^    protected function renderHeader(): string$/;"	f
renderSeparator	vendor\topthink\framework\src\think\console\Table.php	/^    protected function renderSeparator(string $pos): string$/;"	f
rows	vendor\topthink\framework\src\think\console\Table.php	/^        $this->rows      = $rows;$/;"	v
rows	vendor\topthink\framework\src\think\console\Table.php	/^    protected $rows = [];$/;"	v
setCellAlign	vendor\topthink\framework\src\think\console\Table.php	/^    public function setCellAlign(int $align = 1)$/;"	f
setHeader	vendor\topthink\framework\src\think\console\Table.php	/^    public function setHeader(array $header, int $align = 1): void$/;"	f
setRows	vendor\topthink\framework\src\think\console\Table.php	/^    public function setRows(array $rows, int $align = 1): void$/;"	f
setStyle	vendor\topthink\framework\src\think\console\Table.php	/^    public function setStyle(string $style): void$/;"	f
style	vendor\topthink\framework\src\think\console\Table.php	/^            $style = $this->format[$this->style][$style];$/;"	v
style	vendor\topthink\framework\src\think\console\Table.php	/^            $style = [' ', ' ', ' ', ' '];$/;"	v
style	vendor\topthink\framework\src\think\console\Table.php	/^        $style   = $this->getStyle('cell');$/;"	v
style	vendor\topthink\framework\src\think\console\Table.php	/^        $style = $this->getStyle($pos);$/;"	v
style	vendor\topthink\framework\src\think\console\Table.php	/^        $this->style = isset($this->format[$style]) ? $style : 'default';$/;"	v
style	vendor\topthink\framework\src\think\console\Table.php	/^    protected $style = 'default';$/;"	v
width	vendor\topthink\framework\src\think\console\Table.php	/^                        $width = $this->colWidth[$key];$/;"	v
width	vendor\topthink\framework\src\think\console\Table.php	/^                    $width = 3 * (count($this->colWidth) - 1) + array_reduce($this->colWidth, function ($a, $b) {$/;"	v
width	vendor\topthink\framework\src\think\console\Table.php	/^                $width = mb_strwidth((string) $cell);$/;"	v
Clear	vendor\topthink\framework\src\think\console\command\Clear.php	/^class Clear extends Command$/;"	c
clear	vendor\topthink\framework\src\think\console\command\Clear.php	/^    protected function clear(string $path, bool $rmdir): void$/;"	f
configure	vendor\topthink\framework\src\think\console\command\Clear.php	/^    protected function configure()$/;"	f
execute	vendor\topthink\framework\src\think\console\command\Clear.php	/^    protected function execute(Input $input, Output $output)$/;"	f
files	vendor\topthink\framework\src\think\console\command\Clear.php	/^        $files = is_dir($path) ? scandir($path) : [];$/;"	v
path	vendor\topthink\framework\src\think\console\command\Clear.php	/^            $path = $input->getOption('path') ?: $runtimePath;$/;"	v
path	vendor\topthink\framework\src\think\console\command\Clear.php	/^            $path = $runtimePath . 'cache';$/;"	v
path	vendor\topthink\framework\src\think\console\command\Clear.php	/^            $path = $runtimePath . 'log';$/;"	v
rmdir	vendor\topthink\framework\src\think\console\command\Clear.php	/^        $rmdir = $input->getOption('dir') ? true : false;$/;"	v
runtimePath	vendor\topthink\framework\src\think\console\command\Clear.php	/^        $runtimePath = $this->app->getRootPath() . 'runtime' . DIRECTORY_SEPARATOR;$/;"	v
Help	vendor\topthink\framework\src\think\console\command\Help.php	/^class Help extends Command$/;"	c
command	vendor\topthink\framework\src\think\console\command\Help.php	/^            $this->command = $this->getConsole()->find($input->getArgument('command_name'));$/;"	v
command	vendor\topthink\framework\src\think\console\command\Help.php	/^        $this->command = $command;$/;"	v
command	vendor\topthink\framework\src\think\console\command\Help.php	/^        $this->command = null;$/;"	v
command	vendor\topthink\framework\src\think\console\command\Help.php	/^    private $command;$/;"	v
configure	vendor\topthink\framework\src\think\console\command\Help.php	/^    protected function configure()$/;"	f
execute	vendor\topthink\framework\src\think\console\command\Help.php	/^    protected function execute(Input $input, Output $output)$/;"	f
setCommand	vendor\topthink\framework\src\think\console\command\Help.php	/^    public function setCommand(Command $command): void$/;"	f
Lists	vendor\topthink\framework\src\think\console\command\Lists.php	/^class Lists extends Command$/;"	c
configure	vendor\topthink\framework\src\think\console\command\Lists.php	/^    protected function configure()$/;"	f
createDefinition	vendor\topthink\framework\src\think\console\command\Lists.php	/^    private function createDefinition(): InputDefinition$/;"	f
execute	vendor\topthink\framework\src\think\console\command\Lists.php	/^    protected function execute(Input $input, Output $output)$/;"	f
getNativeDefinition	vendor\topthink\framework\src\think\console\command\Lists.php	/^    public function getNativeDefinition(): InputDefinition$/;"	f
Make	vendor\topthink\framework\src\think\console\command\Make.php	/^abstract class Make extends Command$/;"	c
app	vendor\topthink\framework\src\think\console\command\Make.php	/^            $app = '';$/;"	v
buildClass	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected function buildClass(string $name)$/;"	f
class	vendor\topthink\framework\src\think\console\command\Make.php	/^        $class = str_replace($namespace . '\\\\', '', $name);$/;"	v
classname	vendor\topthink\framework\src\think\console\command\Make.php	/^        $classname = $this->getClassName($name);$/;"	v
configure	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected function configure()$/;"	f
execute	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected function execute(Input $input, Output $output)$/;"	f
getClassName	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected function getClassName(string $name): string$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected function getNamespace(string $app): string$/;"	f
getPathName	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected function getPathName(string $name): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\Make.php	/^    abstract protected function getStub();$/;"	f
name	vendor\topthink\framework\src\think\console\command\Make.php	/^            $name = str_replace('\/', '\\\\', $name);$/;"	v
name	vendor\topthink\framework\src\think\console\command\Make.php	/^        $name = str_replace('app\\\\', '', $name);$/;"	v
name	vendor\topthink\framework\src\think\console\command\Make.php	/^        $name = trim($input->getArgument('name'));$/;"	v
namespace	vendor\topthink\framework\src\think\console\command\Make.php	/^        $namespace = trim(implode('\\\\', array_slice(explode('\\\\', $name), 0, -1)), '\\\\');$/;"	v
pathname	vendor\topthink\framework\src\think\console\command\Make.php	/^        $pathname = $this->getPathName($classname);$/;"	v
stub	vendor\topthink\framework\src\think\console\command\Make.php	/^        $stub = file_get_contents($this->getStub());$/;"	v
type	vendor\topthink\framework\src\think\console\command\Make.php	/^    protected $type;$/;"	v
RouteList	vendor\topthink\framework\src\think\console\command\RouteList.php	/^class RouteList extends Command$/;"	c
configure	vendor\topthink\framework\src\think\console\command\RouteList.php	/^    protected function configure()$/;"	f
content	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $content = $this->getRouteList($dir);$/;"	v
dir	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $dir = $input->getArgument('dir') ?: '';$/;"	v
dir	vendor\topthink\framework\src\think\console\command\RouteList.php	/^    protected function getRouteList(string $dir = null): string$/;"	v
execute	vendor\topthink\framework\src\think\console\command\RouteList.php	/^    protected function execute(Input $input, Output $output)$/;"	f
filename	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $filename = $this->app->getRootPath() . 'runtime' . DIRECTORY_SEPARATOR . ($dir ? $dir . DIRECTORY_SEPARATOR : '') . 'route_list.php';$/;"	v
files	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $files = is_dir($path) ? scandir($path) : [];$/;"	v
getRouteList	vendor\topthink\framework\src\think\console\command\RouteList.php	/^    protected function getRouteList(string $dir = null): string$/;"	f
header	vendor\topthink\framework\src\think\console\command\RouteList.php	/^            $header = ['Rule', 'Route', 'Method', 'Name', 'Domain', 'Option', 'Pattern'];$/;"	v
header	vendor\topthink\framework\src\think\console\command\RouteList.php	/^            $header = ['Rule', 'Route', 'Method', 'Name'];$/;"	v
item	vendor\topthink\framework\src\think\console\command\RouteList.php	/^                $item = [$item['rule'], $item['route'], $item['method'], $item['name'], $item['domain'], json_encode($item['option']), json_encode($item['pattern'])];$/;"	v
item	vendor\topthink\framework\src\think\console\command\RouteList.php	/^                $item = [$item['rule'], $item['route'], $item['method'], $item['name']];$/;"	v
itemA	vendor\topthink\framework\src\think\console\command\RouteList.php	/^                $itemA = $a[$sort] ?? null;$/;"	v
itemB	vendor\topthink\framework\src\think\console\command\RouteList.php	/^                $itemB = $b[$sort] ?? null;$/;"	v
path	vendor\topthink\framework\src\think\console\command\RouteList.php	/^            $path = $this->app->getRootPath() . 'route' . DIRECTORY_SEPARATOR . $dir . DIRECTORY_SEPARATOR;$/;"	v
path	vendor\topthink\framework\src\think\console\command\RouteList.php	/^            $path = $this->app->getRootPath() . 'route' . DIRECTORY_SEPARATOR;$/;"	v
routeList	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $routeList = $this->app->route->getRuleList();$/;"	v
rows	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $rows      = [];$/;"	v
sort	vendor\topthink\framework\src\think\console\command\RouteList.php	/^                $sort = $this->sortBy[$sort];$/;"	v
sort	vendor\topthink\framework\src\think\console\command\RouteList.php	/^            $sort = strtolower($this->input->getOption('sort'));$/;"	v
sortBy	vendor\topthink\framework\src\think\console\command\RouteList.php	/^    protected $sortBy = [$/;"	v
style	vendor\topthink\framework\src\think\console\command\RouteList.php	/^            $style = $this->input->getArgument('style');$/;"	v
table	vendor\topthink\framework\src\think\console\command\RouteList.php	/^        $table = new Table();$/;"	v
RunServer	vendor\topthink\framework\src\think\console\command\RunServer.php	/^class RunServer extends Command$/;"	c
command	vendor\topthink\framework\src\think\console\command\RunServer.php	/^        $command = sprintf($/;"	v
configure	vendor\topthink\framework\src\think\console\command\RunServer.php	/^    public function configure()$/;"	f
execute	vendor\topthink\framework\src\think\console\command\RunServer.php	/^    public function execute(Input $input, Output $output)$/;"	f
host	vendor\topthink\framework\src\think\console\command\RunServer.php	/^        $host = $input->getOption('host');$/;"	v
port	vendor\topthink\framework\src\think\console\command\RunServer.php	/^        $port = $input->getOption('port');$/;"	v
root	vendor\topthink\framework\src\think\console\command\RunServer.php	/^            $root = $this->app->getRootPath() . 'public';$/;"	v
root	vendor\topthink\framework\src\think\console\command\RunServer.php	/^        $root = $input->getOption('root');$/;"	v
ServiceDiscover	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^class ServiceDiscover extends Command$/;"	c
configure	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^    public function configure()$/;"	f
content	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^            $content = '<?php ' . PHP_EOL . $header . "return " . var_export($services, true) . ';';$/;"	v
execute	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^    public function execute(Input $input, Output $output)$/;"	f
header	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^            $header = '\/\/ This file is automatically generated at:' . date('Y-m-d H:i:s') . PHP_EOL . 'declare (strict_types = 1);' . PHP_EOL;$/;"	v
packages	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^            $packages = json_decode(@file_get_contents($path), true);$/;"	v
services	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^                    $services = array_merge($services, (array) $package['extra']['think']['services']);$/;"	v
services	vendor\topthink\framework\src\think\console\command\ServiceDiscover.php	/^            $services = [];$/;"	v
VendorPublish	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^class VendorPublish extends Command$/;"	c
configDir	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^                $configDir = $this->app->getConfigPath();$/;"	v
configure	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^    public function configure()$/;"	f
force	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^        $force = $this->input->getOption('force');$/;"	v
handle	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^    public function handle()$/;"	f
installPath	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^                    $installPath = $this->app->getRootPath() . 'vendor\/' . $package['name'] . DIRECTORY_SEPARATOR;$/;"	v
name	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^                    foreach ((array) $package['extra']['think']['config'] as $name => $file) {$/;"	v
packages	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^            $packages = json_decode(@file_get_contents($path), true);$/;"	v
source	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^                        $source = $installPath . $file;$/;"	v
target	vendor\topthink\framework\src\think\console\command\VendorPublish.php	/^                        $target = $configDir . $name . '.php';$/;"	v
Version	vendor\topthink\framework\src\think\console\command\Version.php	/^class Version extends Command$/;"	c
configure	vendor\topthink\framework\src\think\console\command\Version.php	/^    protected function configure()$/;"	f
execute	vendor\topthink\framework\src\think\console\command\Version.php	/^    protected function execute(Input $input, Output $output)$/;"	f
Command	vendor\topthink\framework\src\think\console\command\make\Command.php	/^class Command extends Make$/;"	c
buildClass	vendor\topthink\framework\src\think\console\command\make\Command.php	/^    protected function buildClass(string $name): string$/;"	f
class	vendor\topthink\framework\src\think\console\command\make\Command.php	/^        $class = str_replace($namespace . '\\\\', '', $name);$/;"	v
commandName	vendor\topthink\framework\src\think\console\command\make\Command.php	/^        $commandName = $this->input->getArgument('commandName') ?: strtolower(basename($name));$/;"	v
configure	vendor\topthink\framework\src\think\console\command\make\Command.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Command.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Command.php	/^    protected function getStub(): string$/;"	f
namespace	vendor\topthink\framework\src\think\console\command\make\Command.php	/^        $namespace   = trim(implode('\\\\', array_slice(explode('\\\\', $name), 0, -1)), '\\\\');$/;"	v
stub	vendor\topthink\framework\src\think\console\command\make\Command.php	/^        $stub  = file_get_contents($this->getStub());$/;"	v
type	vendor\topthink\framework\src\think\console\command\make\Command.php	/^    protected $type = "Command";$/;"	v
Controller	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^class Controller extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^    protected function configure()$/;"	f
getClassName	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^    protected function getClassName(string $name): string$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^    protected function getStub(): string$/;"	f
stubPath	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^        $stubPath = __DIR__ . DIRECTORY_SEPARATOR . 'stubs' . DIRECTORY_SEPARATOR;$/;"	v
type	vendor\topthink\framework\src\think\console\command\make\Controller.php	/^    protected $type = "Controller";$/;"	v
Event	vendor\topthink\framework\src\think\console\command\make\Event.php	/^class Event extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Event.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Event.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Event.php	/^    protected function getStub(): string$/;"	f
type	vendor\topthink\framework\src\think\console\command\make\Event.php	/^    protected $type = "Event";$/;"	v
Listener	vendor\topthink\framework\src\think\console\command\make\Listener.php	/^class Listener extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Listener.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Listener.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Listener.php	/^    protected function getStub(): string$/;"	f
type	vendor\topthink\framework\src\think\console\command\make\Listener.php	/^    protected $type = "Listener";$/;"	v
Middleware	vendor\topthink\framework\src\think\console\command\make\Middleware.php	/^class Middleware extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Middleware.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Middleware.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Middleware.php	/^    protected function getStub(): string$/;"	f
type	vendor\topthink\framework\src\think\console\command\make\Middleware.php	/^    protected $type = "Middleware";$/;"	v
Model	vendor\topthink\framework\src\think\console\command\make\Model.php	/^class Model extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Model.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Model.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Model.php	/^    protected function getStub(): string$/;"	f
type	vendor\topthink\framework\src\think\console\command\make\Model.php	/^    protected $type = "Model";$/;"	v
Service	vendor\topthink\framework\src\think\console\command\make\Service.php	/^class Service extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Service.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Service.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Service.php	/^    protected function getStub(): string$/;"	f
type	vendor\topthink\framework\src\think\console\command\make\Service.php	/^    protected $type = "Service";$/;"	v
Subscribe	vendor\topthink\framework\src\think\console\command\make\Subscribe.php	/^class Subscribe extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Subscribe.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Subscribe.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Subscribe.php	/^    protected function getStub(): string$/;"	f
type	vendor\topthink\framework\src\think\console\command\make\Subscribe.php	/^    protected $type = "Subscribe";$/;"	v
Validate	vendor\topthink\framework\src\think\console\command\make\Validate.php	/^class Validate extends Make$/;"	c
configure	vendor\topthink\framework\src\think\console\command\make\Validate.php	/^    protected function configure()$/;"	f
getNamespace	vendor\topthink\framework\src\think\console\command\make\Validate.php	/^    protected function getNamespace(string $app): string$/;"	f
getStub	vendor\topthink\framework\src\think\console\command\make\Validate.php	/^    protected function getStub(): string$/;"	f
stubPath	vendor\topthink\framework\src\think\console\command\make\Validate.php	/^        $stubPath = __DIR__ . DIRECTORY_SEPARATOR . 'stubs' . DIRECTORY_SEPARATOR;$/;"	v
type	vendor\topthink\framework\src\think\console\command\make\Validate.php	/^    protected $type = "Validate";$/;"	v
Route	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^class Route extends Command$/;"	c
buildRouteCache	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^    protected function buildRouteCache(string $dir = null): string$/;"	f
configure	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^    protected function configure()$/;"	f
content	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^        $content = '<?php ' . PHP_EOL . 'return ';$/;"	v
dir	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^        $dir = $input->getArgument('dir') ?: '';$/;"	v
dir	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^    protected function buildRouteCache(string $dir = null): string$/;"	v
execute	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^    protected function execute(Input $input, Output $output)$/;"	f
filename	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^        $filename = $path . 'route.php';$/;"	v
files	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^        $files = is_dir($path) ? scandir($path) : [];$/;"	v
path	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^        $path = $this->app->getRootPath() . 'route' . DIRECTORY_SEPARATOR . ($dir ? $dir . DIRECTORY_SEPARATOR : '');$/;"	v
path	vendor\topthink\framework\src\think\console\command\optimize\Route.php	/^        $path = $this->app->getRootPath() . 'runtime' . DIRECTORY_SEPARATOR . ($dir ? $dir . DIRECTORY_SEPARATOR : '');$/;"	v
Schema	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^class Schema extends Command$/;"	c
appPath	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^                $appPath   = $this->app->getBasePath() . $dir . DIRECTORY_SEPARATOR;$/;"	v
appPath	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^                $appPath   = $this->app->getBasePath();$/;"	v
buildDataBaseSchema	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^    protected function buildDataBaseSchema(string $path, array $tables, string $db): void$/;"	f
buildModelSchema	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^    protected function buildModelSchema(string $class): void$/;"	f
class	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^                $class = '\\\\' . $namespace . '\\\\model\\\\' . pathinfo($file, PATHINFO_FILENAME);$/;"	v
configure	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^    protected function configure()$/;"	f
content	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $content = '<?php ' . PHP_EOL . 'return ';$/;"	v
db	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^        $db = isset($dbName) ? $dbName . '.' : '';$/;"	v
dbName	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^                $dbName = $this->app->db->getConnection()->getConfig('database');$/;"	v
dbName	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $dbName = $db;$/;"	v
dbName	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $dbName = $input->getOption('db');$/;"	v
dbName	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $dbName = $model->getConnection()->getConfig('database');$/;"	v
dbName	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $dbName = $this->app->db->getConnection()->getConfig('database') . '.';$/;"	v
dir	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^        $dir = $input->getArgument('dir') ?: '';$/;"	v
execute	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^    protected function execute(Input $input, Output $output)$/;"	f
info	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $info    = $model->db()->getConnection()->getTableFieldsInfo($table);$/;"	v
info	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $info    = $this->app->db->getConnection()->getTableFieldsInfo($db . $table);$/;"	v
list	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $list = is_dir($path) ? scandir($path) : [];$/;"	v
model	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $model = new $class;$/;"	v
namespace	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^                $namespace = 'app';$/;"	v
namespace	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^                $namespace = 'app\\\\' . $dir;$/;"	v
path	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $path   = $model->getConnection()->getConfig('schema_cache_path');$/;"	v
path	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $path = $appPath . 'model';$/;"	v
reflect	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^        $reflect = new \\ReflectionClass($class);$/;"	v
schemaPath	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^        $schemaPath = $this->app->db->getConnection()->getConfig('schema_cache_path');$/;"	v
table	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $table  = $model->getTable();$/;"	v
table	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $table = $input->getOption('table');$/;"	v
tables	vendor\topthink\framework\src\think\console\command\optimize\Schema.php	/^            $tables = $this->app->db->getConnection()->getTables($dbName);$/;"	v
Argument	vendor\topthink\framework\src\think\console\input\Argument.php	/^class Argument$/;"	c
__construct	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function __construct(string $name, int $mode = null, string $description = '', $default = null)$/;"	f
default	vendor\topthink\framework\src\think\console\input\Argument.php	/^                $default = [];$/;"	v
default	vendor\topthink\framework\src\think\console\input\Argument.php	/^        $this->default = $default;$/;"	v
default	vendor\topthink\framework\src\think\console\input\Argument.php	/^    private $default;$/;"	v
description	vendor\topthink\framework\src\think\console\input\Argument.php	/^        $this->description = $description;$/;"	v
description	vendor\topthink\framework\src\think\console\input\Argument.php	/^    private $description;$/;"	v
getDefault	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function getDefault()$/;"	f
getDescription	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function getDescription(): string$/;"	f
getName	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function getName(): string$/;"	f
isArray	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function isArray(): bool$/;"	f
isRequired	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function isRequired(): bool$/;"	f
mode	vendor\topthink\framework\src\think\console\input\Argument.php	/^            $mode = self::OPTIONAL;$/;"	v
mode	vendor\topthink\framework\src\think\console\input\Argument.php	/^        $this->mode        = $mode;$/;"	v
mode	vendor\topthink\framework\src\think\console\input\Argument.php	/^    private $mode;$/;"	v
mode	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function __construct(string $name, int $mode = null, string $description = '', $default = null)$/;"	v
name	vendor\topthink\framework\src\think\console\input\Argument.php	/^        $this->name        = $name;$/;"	v
name	vendor\topthink\framework\src\think\console\input\Argument.php	/^    private $name;$/;"	v
setDefault	vendor\topthink\framework\src\think\console\input\Argument.php	/^    public function setDefault($default = null): void$/;"	f
Definition	vendor\topthink\framework\src\think\console\input\Definition.php	/^class Definition$/;"	c
__construct	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function __construct(array $definition = [])$/;"	f
addArgument	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function addArgument(Argument $argument): void$/;"	f
addArguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function addArguments(array $arguments = []): void$/;"	f
addOption	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function addOption(Option $option): void$/;"	f
addOptions	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function addOptions(array $options = []): void$/;"	f
arguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $arguments = [];$/;"	v
arguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;$/;"	v
arguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $this->arguments          = [];$/;"	v
arguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private $arguments;$/;"	v
arguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function addArguments(array $arguments = []): void$/;"	v
arguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function setArguments(array $arguments = []): void$/;"	v
definition	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function __construct(array $definition = [])$/;"	v
element	vendor\topthink\framework\src\think\console\input\Definition.php	/^                $element = '[' . $element . ']';$/;"	v
element	vendor\topthink\framework\src\think\console\input\Definition.php	/^            $element = '<' . $argument->getName() . '>';$/;"	v
elements	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $elements = [];$/;"	v
getArgument	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getArgument($name): Argument$/;"	f
getArgumentCount	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getArgumentCount(): int$/;"	f
getArgumentDefaults	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getArgumentDefaults(): array$/;"	f
getArgumentRequiredCount	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getArgumentRequiredCount(): int$/;"	f
getArguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getArguments(): array$/;"	f
getOption	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getOption(string $name): Option$/;"	f
getOptionDefaults	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getOptionDefaults(): array$/;"	f
getOptionForShortcut	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getOptionForShortcut(string $shortcut): Option$/;"	f
getOptions	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getOptions(): array$/;"	f
getSynopsis	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getSynopsis(bool $short = false): string$/;"	f
hasAnArrayArgument	vendor\topthink\framework\src\think\console\input\Definition.php	/^            $this->hasAnArrayArgument = true;$/;"	v
hasAnArrayArgument	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $this->hasAnArrayArgument = false;$/;"	v
hasAnArrayArgument	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private $hasAnArrayArgument = false;$/;"	v
hasArgument	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function hasArgument($name): bool$/;"	f
hasOption	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function hasOption(string $name): bool$/;"	f
hasOptional	vendor\topthink\framework\src\think\console\input\Definition.php	/^            $this->hasOptional = true;$/;"	v
hasOptional	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $this->hasOptional        = false;$/;"	v
hasOptional	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private $hasOptional;$/;"	v
hasShortcut	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function hasShortcut(string $name): bool$/;"	f
options	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $options   = [];$/;"	v
options	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $this->options   = [];$/;"	v
options	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private $options;$/;"	v
options	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function addOptions(array $options = []): void$/;"	v
options	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function setOptions(array $options = []): void$/;"	v
requiredCount	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $this->requiredCount      = 0;$/;"	v
requiredCount	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private $requiredCount;$/;"	v
setArguments	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function setArguments(array $arguments = []): void$/;"	f
setDefinition	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function setDefinition(array $definition): void$/;"	f
setOptions	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function setOptions(array $options = []): void$/;"	f
short	vendor\topthink\framework\src\think\console\input\Definition.php	/^    public function getSynopsis(bool $short = false): string$/;"	v
shortcut	vendor\topthink\framework\src\think\console\input\Definition.php	/^                $shortcut   = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : '';$/;"	v
shortcutToName	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private function shortcutToName(string $shortcut): string$/;"	f
shortcuts	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $this->shortcuts = [];$/;"	v
shortcuts	vendor\topthink\framework\src\think\console\input\Definition.php	/^    private $shortcuts;$/;"	v
value	vendor\topthink\framework\src\think\console\input\Definition.php	/^                    $value = sprintf(' %s%s%s', $option->isValueOptional() ? '[' : '', strtoupper($option->getName()), $option->isValueOptional() ? ']' : '');$/;"	v
value	vendor\topthink\framework\src\think\console\input\Definition.php	/^                $value = '';$/;"	v
values	vendor\topthink\framework\src\think\console\input\Definition.php	/^        $values = [];$/;"	v
Option	vendor\topthink\framework\src\think\console\input\Option.php	/^class Option$/;"	c
__construct	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
acceptValue	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function acceptValue()$/;"	f
default	vendor\topthink\framework\src\think\console\input\Option.php	/^                $default = [];$/;"	v
default	vendor\topthink\framework\src\think\console\input\Option.php	/^        $this->default = $this->acceptValue() ? $default : false;$/;"	v
default	vendor\topthink\framework\src\think\console\input\Option.php	/^    private $default;$/;"	v
description	vendor\topthink\framework\src\think\console\input\Option.php	/^        $this->description = $description;$/;"	v
description	vendor\topthink\framework\src\think\console\input\Option.php	/^    private $description;$/;"	v
equals	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function equals(Option $option)$/;"	f
getDefault	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function getDefault()$/;"	f
getDescription	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function getDescription()$/;"	f
getName	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function getName()$/;"	f
getShortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function getShortcut()$/;"	f
isArray	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function isArray()$/;"	f
isValueOptional	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function isValueOptional()$/;"	f
isValueRequired	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function isValueRequired()$/;"	f
mode	vendor\topthink\framework\src\think\console\input\Option.php	/^            $mode = self::VALUE_NONE;$/;"	v
mode	vendor\topthink\framework\src\think\console\input\Option.php	/^        $this->mode        = $mode;$/;"	v
mode	vendor\topthink\framework\src\think\console\input\Option.php	/^    private $mode;$/;"	v
name	vendor\topthink\framework\src\think\console\input\Option.php	/^            $name = substr($name, 2);$/;"	v
name	vendor\topthink\framework\src\think\console\input\Option.php	/^        $this->name        = $name;$/;"	v
name	vendor\topthink\framework\src\think\console\input\Option.php	/^    private $name;$/;"	v
setDefault	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function setDefault($default = null)$/;"	f
shortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^                $shortcut = implode('|', $shortcut);$/;"	v
shortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^            $shortcut  = implode('|', $shortcuts);$/;"	v
shortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^            $shortcut = null;$/;"	v
shortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^        $this->shortcut    = $shortcut;$/;"	v
shortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^    private $shortcut;$/;"	v
shortcut	vendor\topthink\framework\src\think\console\input\Option.php	/^    public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	v
shortcuts	vendor\topthink\framework\src\think\console\input\Option.php	/^            $shortcuts = array_filter($shortcuts);$/;"	v
shortcuts	vendor\topthink\framework\src\think\console\input\Option.php	/^            $shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));$/;"	v
Ask	vendor\topthink\framework\src\think\console\output\Ask.php	/^class Ask$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\Ask.php	/^    public function __construct(Input $input, Output $output, Question $question)$/;"	f
attempts	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $attempts = $this->question->getMaxAttempts();$/;"	v
autocomplete	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $autocomplete = $this->question->getAutocompleterValues();$/;"	v
autocomplete	vendor\topthink\framework\src\think\console\output\Ask.php	/^    private function autocomplete($inputStream)$/;"	f
c	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $c = fread($inputStream, 1);$/;"	v
choices	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $choices = $this->question->getChoices();$/;"	v
command	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $command = sprintf("\/usr\/bin\/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'", $shell, $readCmd);$/;"	v
default	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $default = explode(',', $default);$/;"	v
default	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $default = $this->question->getDefault();$/;"	v
doAsk	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected function doAsk()$/;"	f
error	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $error    = null;$/;"	v
exe	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $exe = __DIR__ . '\/..\/bin\/hiddeninput.exe';$/;"	v
exitcode	vendor\topthink\framework\src\think\console\output\Ask.php	/^        return self::$stty = $exitcode === 0;$/;"	v
getHiddenResponse	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected function getHiddenResponse($inputStream)$/;"	f
getShell	vendor\topthink\framework\src\think\console\output\Ask.php	/^    private function getShell()$/;"	f
hasSttyAvailable	vendor\topthink\framework\src\think\console\output\Ask.php	/^    private function hasSttyAvailable()$/;"	f
i	vendor\topthink\framework\src\think\console\output\Ask.php	/^                        $i = strlen($ret);$/;"	v
i	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $i          = 0;$/;"	v
input	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $this->input    = $input;$/;"	v
input	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected $input;$/;"	v
inputStream	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $inputStream  = STDIN;$/;"	v
interviewer	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $interviewer = function () use ($that) {$/;"	v
key	vendor\topthink\framework\src\think\console\output\Ask.php	/^                foreach ($default as $key => $value) {$/;"	v
key	vendor\topthink\framework\src\think\console\output\Ask.php	/^            foreach ($this->question->getChoices() as $key => $value) {$/;"	v
matches	vendor\topthink\framework\src\think\console\output\Ask.php	/^                    $matches    = $autocomplete;$/;"	v
matches	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $matches    = $autocomplete;$/;"	v
numMatches	vendor\topthink\framework\src\think\console\output\Ask.php	/^                    $numMatches = 0;$/;"	v
numMatches	vendor\topthink\framework\src\think\console\output\Ask.php	/^                    $numMatches = count($matches);$/;"	v
numMatches	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $numMatches = 0;$/;"	v
numMatches	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $numMatches = count($matches);$/;"	v
ofs	vendor\topthink\framework\src\think\console\output\Ask.php	/^                        $ofs = 0;$/;"	v
ofs	vendor\topthink\framework\src\think\console\output\Ask.php	/^                    $ofs        = -1;$/;"	v
ofs	vendor\topthink\framework\src\think\console\output\Ask.php	/^                    $ofs = ($numMatches + $ofs) % $numMatches;$/;"	v
ofs	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $ofs        = 0;$/;"	v
ofs	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $ofs        = -1;$/;"	v
output	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $this->output   = $output;$/;"	v
output	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected $output;$/;"	v
question	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $this->question = $question;$/;"	v
question	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected $question;$/;"	v
readCmd	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^                        $ret = $matches[$ofs];$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^                    $ret = trim($this->getHiddenResponse($inputStream));$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $ret = fgets($inputStream, 4096);$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $ret = substr($ret, 0, $i);$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $ret = trim($ret);$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $ret = false;$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $ret = trim($this->autocomplete($inputStream));$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $ret          = '';$/;"	v
ret	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $ret = strlen($ret) > 0 ? $ret : $this->question->getDefault();$/;"	v
run	vendor\topthink\framework\src\think\console\output\Ask.php	/^    public function run()$/;"	f
shell	vendor\topthink\framework\src\think\console\output\Ask.php	/^        if (false !== $shell = $this->getShell()) {$/;"	v
shell	vendor\topthink\framework\src\think\console\output\Ask.php	/^    private static $shell;$/;"	v
stty	vendor\topthink\framework\src\think\console\output\Ask.php	/^    private static $stty;$/;"	v
sttyMode	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $sttyMode = shell_exec('stty -g');$/;"	v
sttyMode	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $sttyMode = shell_exec('stty -g');$/;"	v
test	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $test = "\/usr\/bin\/env %s -c 'echo OK' 2> \/dev\/null";$/;"	v
text	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $text    = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $choices[$default]);$/;"	v
text	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s (yes\/no)<\/info> [<comment>%s<\/comment>]:', $text, $default ? 'yes' : 'no');$/;"	v
text	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $default);$/;"	v
text	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, implode(', ', $default));$/;"	v
text	vendor\topthink\framework\src\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info>:', $text);$/;"	v
text	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $text    = $this->question->getQuestion();$/;"	v
that	vendor\topthink\framework\src\think\console\output\Ask.php	/^        $that = $this;$/;"	v
validateAttempts	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected function validateAttempts($interviewer)$/;"	f
value	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $value   = rtrim(shell_exec($command));$/;"	v
value	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $value = fgets($inputStream, 4096);$/;"	v
value	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $value = rtrim(shell_exec($exe));$/;"	v
value	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $value = trim($value);$/;"	v
width	vendor\topthink\framework\src\think\console\output\Ask.php	/^            $width = max(array_map('strlen', array_keys($this->question->getChoices())));$/;"	v
writePrompt	vendor\topthink\framework\src\think\console\output\Ask.php	/^    protected function writePrompt()$/;"	f
Descriptor	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^class Descriptor$/;"	c
calculateTotalWidthForOptions	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    private function calculateTotalWidthForOptions($options)$/;"	f
decorated	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function write($content, $decorated = false)$/;"	v
default	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $default = '';$/;"	v
default	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($argument->getDefault()));$/;"	v
default	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($option->getDefault()));$/;"	v
definition	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $definition = $command->getNativeDefinition();$/;"	v
describe	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    public function describe(Output $output, $object, array $options = [])$/;"	f
describeCommand	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeCommand(Command $command, array $options = [])$/;"	f
describeConsole	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeConsole(Console $console, array $options = [])$/;"	f
describeInputArgument	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeInputArgument(InputArgument $argument, array $options = [])$/;"	f
describeInputDefinition	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeInputDefinition(InputDefinition $definition, array $options = [])$/;"	f
describeInputOption	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeInputOption(InputOption $option, array $options = [])$/;"	f
describedNamespace	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;$/;"	v
description	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $description        = new ConsoleDescription($console, $describedNamespace);$/;"	v
formatDefaultValue	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    private function formatDefaultValue($default)$/;"	f
getColumnWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    private function getColumnWidth(array $commands)$/;"	f
help	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            if ('' != $help = $console->getHelp()) {$/;"	v
laterOptions	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $laterOptions = [];$/;"	v
nameLength	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $nameLength = 4 + strlen($option->getName()) + 2; \/\/ - + shortcut + , + whitespace + name + --$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    private function writeText($content, array $options = [])$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeCommand(Command $command, array $options = [])$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeConsole(Console $console, array $options = [])$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeInputArgument(InputArgument $argument, array $options = [])$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeInputDefinition(InputDefinition $definition, array $options = [])$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function describeInputOption(InputOption $option, array $options = [])$/;"	v
options	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    public function describe(Output $output, $object, array $options = [])$/;"	v
output	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $this->output = $output;$/;"	v
output	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected $output;$/;"	v
spacingWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^                    $spacingWidth = $width - strlen($name);$/;"	v
spacingWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $spacingWidth = $totalWidth - strlen($argument->getName()) + 2;$/;"	v
spacingWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $spacingWidth = $totalWidth - strlen($synopsis) + 2;$/;"	v
synopsis	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $synopsis   = sprintf('%s%s', $option->getShortcut() ? sprintf('-%s, ', $option->getShortcut()) : '    ', sprintf('--%s%s', $option->getName(), $value));$/;"	v
totalWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $totalWidth = max($totalWidth, $nameLength);$/;"	v
totalWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $totalWidth = max($totalWidth, strlen($argument->getName()));$/;"	v
totalWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $totalWidth   = $options['total_width'] ?? strlen($argument->getName());$/;"	v
totalWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $totalWidth = $options['total_width'] ?? $this->calculateTotalWidthForOptions([$option]);$/;"	v
totalWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $totalWidth = $this->calculateTotalWidthForOptions($definition->getOptions());$/;"	v
totalWidth	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $totalWidth = 0;$/;"	v
value	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^                $value = '[' . $value . ']';$/;"	v
value	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $value = '=' . strtoupper($option->getName());$/;"	v
value	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $value = '';$/;"	v
valueLength	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^                $valueLength = 1 + strlen($option->getName()); \/\/ = + value$/;"	v
width	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $width = $this->getColumnWidth($description->getCommands());$/;"	v
width	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^            $width = strlen($command->getName()) > $width ? strlen($command->getName()) : $width;$/;"	v
width	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^        $width = 0;$/;"	v
write	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    protected function write($content, $decorated = false)$/;"	f
writeText	vendor\topthink\framework\src\think\console\output\Descriptor.php	/^    private function writeText($content, array $options = [])$/;"	f
Formatter	vendor\topthink\framework\src\think\console\output\Formatter.php	/^class Formatter$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function __construct()$/;"	f
applyCurrentStyle	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    private function applyCurrentStyle($text)$/;"	f
createStyleFromString	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    private function createStyleFromString($string)$/;"	f
decorated	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        $this->decorated = (bool) $decorated;$/;"	v
decorated	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    private $decorated = false;$/;"	v
escape	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public static function escape($text)$/;"	f
format	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function format($message)$/;"	f
getStyle	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function getStyle($name)$/;"	f
getStyleStack	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function getStyleStack()$/;"	f
hasStyle	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function hasStyle($name)$/;"	f
i	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        foreach ($matches[0] as $i => $match) {$/;"	v
isDecorated	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function isDecorated()$/;"	f
offset	vendor\topthink\framework\src\think\console\output\Formatter.php	/^            $offset = $pos + strlen($text);$/;"	v
offset	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        $offset   = 0;$/;"	v
output	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        $output   = '';$/;"	v
pos	vendor\topthink\framework\src\think\console\output\Formatter.php	/^            $pos  = $match[1];$/;"	v
setDecorated	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function setDecorated($decorated)$/;"	f
setStyle	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    public function setStyle($name, Style $style)$/;"	f
style	vendor\topthink\framework\src\think\console\output\Formatter.php	/^            } elseif (false === $style = $this->createStyleFromString(strtolower($tag))) {$/;"	v
style	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        $style = new Style();$/;"	v
styleStack	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        $this->styleStack = new StyleStack();$/;"	v
styleStack	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    private $styleStack;$/;"	v
styles	vendor\topthink\framework\src\think\console\output\Formatter.php	/^    private $styles    = [];$/;"	v
tag	vendor\topthink\framework\src\think\console\output\Formatter.php	/^                $tag = $matches[1][$i][0];$/;"	v
tag	vendor\topthink\framework\src\think\console\output\Formatter.php	/^                $tag = $matches[3][$i][0] ?? '';$/;"	v
tagRegex	vendor\topthink\framework\src\think\console\output\Formatter.php	/^        $tagRegex = '[a-z][a-z0-9_=;-]*';$/;"	v
text	vendor\topthink\framework\src\think\console\output\Formatter.php	/^            $text = $match[0];$/;"	v
Question	vendor\topthink\framework\src\think\console\output\Question.php	/^class Question$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function __construct($question, $default = null)$/;"	f
attempts	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->attempts = $attempts;$/;"	v
attempts	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $attempts;$/;"	v
autocompleterValues	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->autocompleterValues = $values;$/;"	v
autocompleterValues	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $autocompleterValues;$/;"	v
default	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->default  = $default;$/;"	v
default	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $default;$/;"	v
default	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function __construct($question, $default = null)$/;"	v
getAutocompleterValues	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function getAutocompleterValues()$/;"	f
getDefault	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function getDefault()$/;"	f
getMaxAttempts	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function getMaxAttempts()$/;"	f
getNormalizer	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function getNormalizer()$/;"	f
getQuestion	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function getQuestion()$/;"	f
getValidator	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function getValidator()$/;"	f
hidden	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->hidden = (bool) $hidden;$/;"	v
hidden	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $hidden         = false;$/;"	v
hiddenFallback	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->hiddenFallback = (bool) $fallback;$/;"	v
hiddenFallback	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $hiddenFallback = true;$/;"	v
implementing	vendor\topthink\framework\src\think\console\output\Question.php	/^     * The normalizer can ba a callable (a string), a closure or a class implementing __invoke.$/;"	c
isAssoc	vendor\topthink\framework\src\think\console\output\Question.php	/^    protected function isAssoc($array)$/;"	f
isHidden	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function isHidden()$/;"	f
isHiddenFallback	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function isHiddenFallback()$/;"	f
normalizer	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->normalizer = $normalizer;$/;"	v
normalizer	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $normalizer;$/;"	v
question	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->question = $question;$/;"	v
question	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $question;$/;"	v
setAutocompleterValues	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function setAutocompleterValues($values)$/;"	f
setHidden	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function setHidden($hidden)$/;"	f
setHiddenFallback	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function setHiddenFallback($fallback)$/;"	f
setMaxAttempts	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function setMaxAttempts($attempts)$/;"	f
setNormalizer	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function setNormalizer($normalizer)$/;"	f
setValidator	vendor\topthink\framework\src\think\console\output\Question.php	/^    public function setValidator($validator)$/;"	f
validator	vendor\topthink\framework\src\think\console\output\Question.php	/^        $this->validator = $validator;$/;"	v
validator	vendor\topthink\framework\src\think\console\output\Question.php	/^    private $validator;$/;"	v
values	vendor\topthink\framework\src\think\console\output\Question.php	/^            $values = array_merge(array_keys($values), array_values($values));$/;"	v
Console	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^class Console$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    public function __construct(ThinkConsole $console, $namespace = null)$/;"	f
aliases	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private $aliases;$/;"	v
all	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        $all = $this->console->all($this->namespace ? $this->console->findNamespace($this->namespace) : null);$/;"	v
command	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^                    $command = new $command();$/;"	v
commands	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        $this->commands   = [];$/;"	v
commands	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private $commands;$/;"	v
console	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        $this->console   = $console;$/;"	v
console	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private $console;$/;"	v
getCommand	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    public function getCommand(string $name): Command$/;"	f
getCommands	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    public function getCommands(): array$/;"	f
getNamespaces	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    public function getNamespaces(): array$/;"	f
inspectConsole	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private function inspectConsole(): void$/;"	f
key	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^                $key = self::GLOBAL_NAMESPACE;$/;"	v
key	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^            $key = $this->console->extractNamespace($name, 1);$/;"	v
name	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^            foreach ($commands as $name => $command) {$/;"	v
name	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        foreach ($commands as $name => $command) {$/;"	v
names	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^            $names = [];$/;"	v
namespace	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        $this->namespace = $namespace;$/;"	v
namespace	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        foreach ($this->sortCommands($all) as $namespace => $commands) {$/;"	v
namespace	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private $namespace;$/;"	v
namespace	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    public function __construct(ThinkConsole $console, $namespace = null)$/;"	v
namespacedCommands	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        $namespacedCommands = [];$/;"	v
namespaces	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^        $this->namespaces = [];$/;"	v
namespaces	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private $namespaces;$/;"	v
sortCommands	vendor\topthink\framework\src\think\console\output\descriptor\Console.php	/^    private function sortCommands(array $commands): array$/;"	f
Buffer	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^class Buffer$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^    public function __construct(Output $output)$/;"	f
buffer	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^        $this->buffer = '';$/;"	v
buffer	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^    private $buffer = '';$/;"	v
content	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^        $content      = $this->buffer;$/;"	v
fetch	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^    public function fetch()$/;"	f
messages	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^        $messages = (array) $messages;$/;"	v
newline	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^    public function write($messages, bool $newline = false, int $options = 0)$/;"	v
renderException	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^    public function renderException(\\Throwable $e)$/;"	f
write	vendor\topthink\framework\src\think\console\output\driver\Buffer.php	/^    public function write($messages, bool $newline = false, int $options = 0)$/;"	f
Console	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^class Console$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    public function __construct(Output $output)$/;"	f
checks	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $checks = [$/;"	v
class	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $class    = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';$/;"	v
count	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                for ($i = 0, $count = count($trace); $i < $count; ++$i) {$/;"	v
decorated	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $decorated       = $this->hasColorSupport($this->stdout);$/;"	v
decorated	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $decorated = $this->hasColorSupport($stderr);$/;"	v
descriptorspec	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $descriptorspec = [1 => ['pipe', 'w'], 2 => ['pipe', 'w']];$/;"	v
dimensions	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $dimensions = $this->getTerminalDimensions();$/;"	v
doWrite	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function doWrite($message, $newline, $stream = null)$/;"	f
emptyLine	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $messages[] = $emptyLine = sprintf('<error>%s<\/error>', str_repeat(' ', $len));$/;"	v
encoding	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        if (false === $encoding = mb_detect_encoding($string)) {$/;"	v
file	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $file     = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n\/a';$/;"	v
formatter	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $this->formatter = new Formatter();$/;"	v
formatter	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private $formatter;$/;"	v
function	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $function = $trace[$i]['function'];$/;"	v
getMode	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function getMode()$/;"	f
getSttyColumns	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function getSttyColumns()$/;"	f
getTerminalDimensions	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    public function getTerminalDimensions(): array$/;"	f
getTerminalHeight	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function getTerminalHeight()$/;"	f
getTerminalWidth	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function getTerminalWidth()$/;"	f
hasColorSupport	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function hasColorSupport($stream): bool$/;"	f
hasStderrSupport	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function hasStderrSupport(): bool$/;"	f
hasStdoutSupport	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function hasStdoutSupport(): bool$/;"	f
info	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $info = stream_get_contents($pipes[1]);$/;"	v
isRunningOS400	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function isRunningOS400(): bool$/;"	f
len	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $len = max($lineLength, $len);$/;"	v
len	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $len = $this->stringWidth($title);$/;"	v
line	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $line     = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n\/a';$/;"	v
line	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $line    = $char;$/;"	v
line	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $line       = '';$/;"	v
lineLength	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $lineLength = $this->stringWidth(preg_replace('\/\\[[^m]*m\/', '', $line)) + 4;$/;"	v
lines	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $lines = [];$/;"	v
lines	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $lines      = [];$/;"	v
message	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $message = $this->formatter->format($message);$/;"	v
message	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $message = strip_tags($this->formatter->format($message));$/;"	v
messages	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $messages   = ['', ''];$/;"	v
messages	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $messages = (array) $messages;$/;"	v
newline	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    public function write($messages, bool $newline = false, int $type = 0, $stream = null)$/;"	v
openErrorStream	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function openErrorStream()$/;"	f
openOutputStream	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function openOutputStream()$/;"	f
output	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $this->output    = $output;$/;"	v
output	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private $output;$/;"	v
process	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $process        = proc_open('mode CON', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);$/;"	v
process	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $process        = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);$/;"	v
renderException	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    public function renderException(\\Throwable $e)$/;"	f
setDecorated	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    public function setDecorated($decorated)$/;"	f
splitStringByWidth	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function splitStringByWidth(string $string, int $width): array$/;"	f
stderr	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $stderr    = $this->openErrorStream();$/;"	v
stdout	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $this->stdout    = $this->openOutputStream();$/;"	v
stdout	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private $stdout;$/;"	v
stream	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $stream = $this->stdout;$/;"	v
stream	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    protected function doWrite($message, $newline, $stream = null)$/;"	v
stringWidth	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private function stringWidth(string $string): int$/;"	f
terminalDimensions	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    private $terminalDimensions;$/;"	v
title	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $title = sprintf('  [%s]  ', get_class($e));$/;"	v
trace	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                $trace = $e->getTrace();$/;"	v
type	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                    $type     = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';$/;"	v
utf8String	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);$/;"	v
width	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^                $width = 1 << 31;$/;"	v
width	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^            $width = $this->getTerminalWidth() ? $this->getTerminalWidth() - 1 : PHP_INT_MAX;$/;"	v
write	vendor\topthink\framework\src\think\console\output\driver\Console.php	/^    public function write($messages, bool $newline = false, int $type = 0, $stream = null)$/;"	f
Nothing	vendor\topthink\framework\src\think\console\output\driver\Nothing.php	/^class Nothing$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\driver\Nothing.php	/^    public function __construct(Output $output)$/;"	f
newline	vendor\topthink\framework\src\think\console\output\driver\Nothing.php	/^    public function write($messages, bool $newline = false, int $options = 0)$/;"	v
renderException	vendor\topthink\framework\src\think\console\output\driver\Nothing.php	/^    public function renderException(\\Throwable $e)$/;"	f
write	vendor\topthink\framework\src\think\console\output\driver\Nothing.php	/^    public function write($messages, bool $newline = false, int $options = 0)$/;"	f
Stack	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^class Stack$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function __construct(Style $emptyStyle = null)$/;"	f
emptyStyle	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^        $this->emptyStyle = $emptyStyle ?: new Style();$/;"	v
emptyStyle	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^        $this->emptyStyle = $emptyStyle;$/;"	v
emptyStyle	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    private $emptyStyle;$/;"	v
emptyStyle	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function __construct(Style $emptyStyle = null)$/;"	v
getCurrent	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function getCurrent(): Style$/;"	f
getEmptyStyle	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function getEmptyStyle(): Style$/;"	f
index	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^        foreach (array_reverse($this->styles, true) as $index => $stackedStyle) {$/;"	v
pop	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function pop(Style $style = null): Style$/;"	f
push	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function push(Style $style): void$/;"	f
reset	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function reset(): void$/;"	f
setEmptyStyle	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function setEmptyStyle(Style $emptyStyle)$/;"	f
style	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    public function pop(Style $style = null): Style$/;"	v
styles	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^                $this->styles = array_slice($this->styles, 0, $index);$/;"	v
styles	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^        $this->styles = [];$/;"	v
styles	vendor\topthink\framework\src\think\console\output\formatter\Stack.php	/^    private $styles;$/;"	v
Style	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^class Style$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function __construct($foreground = null, $background = null, array $options = [])$/;"	f
apply	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function apply(string $text): string$/;"	f
availableBackgroundColors	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    protected static $availableBackgroundColors = [$/;"	v
availableForegroundColors	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    protected static $availableForegroundColors = [$/;"	v
availableOptions	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    protected static $availableOptions = [$/;"	v
background	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^            $this->background = null;$/;"	v
background	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^        $this->background = static::$availableBackgroundColors[$color];$/;"	v
background	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    private $background;$/;"	v
background	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function __construct($foreground = null, $background = null, array $options = [])$/;"	v
foreground	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^            $this->foreground = null;$/;"	v
foreground	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^        $this->foreground = static::$availableForegroundColors[$color];$/;"	v
foreground	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    private $foreground;$/;"	v
options	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^        $this->options = [];$/;"	v
options	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    private $options = [];$/;"	v
pos	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^        $pos = array_search(static::$availableOptions[$option], $this->options);$/;"	v
setBackground	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function setBackground($color = null)$/;"	f
setCodes	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^        $setCodes   = [];$/;"	v
setForeground	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function setForeground($color = null)$/;"	f
setOption	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function setOption(string $option): void$/;"	f
setOptions	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function setOptions(array $options)$/;"	f
unsetCodes	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^        $unsetCodes = [];$/;"	v
unsetOption	vendor\topthink\framework\src\think\console\output\formatter\Style.php	/^    public function unsetOption(string $option): void$/;"	f
Choice	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^class Choice extends Question$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function __construct($question, array $choices, $default = null)$/;"	f
choices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $choices      = $this->choices;$/;"	v
choices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $this->choices = $choices;$/;"	v
choices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    private $choices;$/;"	v
default	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function __construct($question, array $choices, $default = null)$/;"	v
errorMessage	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $errorMessage = $this->errorMessage;$/;"	v
errorMessage	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $this->errorMessage = $errorMessage;$/;"	v
errorMessage	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    private $errorMessage = 'Value "%s" is invalid';$/;"	v
getChoices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function getChoices(): array$/;"	f
getDefaultValidator	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    private function getDefaultValidator()$/;"	f
getPrompt	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function getPrompt(): string$/;"	f
isAssoc	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $isAssoc      = $this->isAssoc($choices);$/;"	v
isMultiselect	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function isMultiselect(): bool$/;"	f
key	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                foreach ($choices as $key => $choice) {$/;"	v
multiselect	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $multiselect  = $this->multiselect;$/;"	v
multiselect	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $this->multiselect = $multiselect;$/;"	v
multiselect	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    private $multiselect  = false;$/;"	v
multiselectChoices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^            $multiselectChoices = [];$/;"	v
prompt	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^        $this->prompt = $prompt;$/;"	v
prompt	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    private $prompt       = ' > ';$/;"	v
result	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                        $result = $choices[$result];$/;"	v
result	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                        $result = $choices[$value];$/;"	v
result	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                    $result = $value;$/;"	v
result	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                $result = array_search($value, $choices);$/;"	v
results	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                $results = [];$/;"	v
selectedChoices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                $selectedChoices = [$selected];$/;"	v
selectedChoices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^                $selectedChoices = explode(',', $selectedChoices);$/;"	v
selectedChoices	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^            $selectedChoices = str_replace(' ', '', $selected);$/;"	v
setErrorMessage	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function setErrorMessage(string $errorMessage)$/;"	f
setMultiselect	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function setMultiselect(bool $multiselect)$/;"	f
setPrompt	vendor\topthink\framework\src\think\console\output\question\Choice.php	/^    public function setPrompt(string $prompt)$/;"	f
Confirmation	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^class Confirmation extends Question$/;"	c
__construct	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^    public function __construct(string $question, bool $default = true, string $trueAnswerRegex = '\/^y\/i')$/;"	f
answerIsTrue	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^            $answerIsTrue = (bool) preg_match($regex, $answer);$/;"	v
default	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^        $default = $this->getDefault();$/;"	v
default	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^    public function __construct(string $question, bool $default = true, string $trueAnswerRegex = '\/^y\/i')$/;"	v
getDefaultNormalizer	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^    private function getDefaultNormalizer()$/;"	f
regex	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^        $regex   = $this->trueAnswerRegex;$/;"	v
trueAnswerRegex	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^        $this->trueAnswerRegex = $trueAnswerRegex;$/;"	v
trueAnswerRegex	vendor\topthink\framework\src\think\console\output\question\Confirmation.php	/^    private $trueAnswerRegex;$/;"	v
CacheHandlerInterface	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^interface CacheHandlerInterface$/;"	i
clear	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function clear();$/;"	f
clearTag	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function clearTag(array $keys);$/;"	f
dec	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function dec(string $name, int $step = 1);$/;"	f
default	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function get($name, $default = null);$/;"	v
delete	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function delete($name);$/;"	f
expire	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function set($name, $value, $expire = null);$/;"	v
get	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function get($name, $default = null);$/;"	f
has	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function has($name);$/;"	f
inc	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function inc(string $name, int $step = 1);$/;"	f
set	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function set($name, $value, $expire = null);$/;"	f
step	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function dec(string $name, int $step = 1);$/;"	v
step	vendor\topthink\framework\src\think\contract\CacheHandlerInterface.php	/^    public function inc(string $name, int $step = 1);$/;"	v
LogHandlerInterface	vendor\topthink\framework\src\think\contract\LogHandlerInterface.php	/^interface LogHandlerInterface$/;"	i
save	vendor\topthink\framework\src\think\contract\LogHandlerInterface.php	/^    public function save(array $log): bool;$/;"	f
ModelRelationInterface	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^interface ModelRelationInterface$/;"	i
aggregate	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function relationCount(Model $result, Closure $closure, string $aggregate = 'count', string $field = '*', string &$name = null);$/;"	v
closure	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null): void;$/;"	v
closure	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string;$/;"	v
eagerlyResult	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null): void;$/;"	f
eagerlyResultSet	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null): void;$/;"	f
fields	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = ''): Query;$/;"	v
getRelation	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection;$/;"	f
getRelationCountQuery	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string;$/;"	f
has	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = 'INNER'): Query;$/;"	f
hasWhere	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = ''): Query;$/;"	f
operator	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = 'INNER'): Query;$/;"	v
relationCount	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function relationCount(Model $result, Closure $closure, string $aggregate = 'count', string $field = '*', string &$name = null);$/;"	f
subRelation	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null): void;$/;"	v
subRelation	vendor\topthink\framework\src\think\contract\ModelRelationInterface.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection;$/;"	v
SessionHandlerInterface	vendor\topthink\framework\src\think\contract\SessionHandlerInterface.php	/^interface SessionHandlerInterface$/;"	i
delete	vendor\topthink\framework\src\think\contract\SessionHandlerInterface.php	/^    public function delete(string $sessionId): bool;$/;"	f
read	vendor\topthink\framework\src\think\contract\SessionHandlerInterface.php	/^    public function read(string $sessionId): string;$/;"	f
write	vendor\topthink\framework\src\think\contract\SessionHandlerInterface.php	/^    public function write(string $sessionId, string $data): bool;$/;"	f
TemplateHandlerInterface	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^interface TemplateHandlerInterface$/;"	i
config	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function config(array $config): void;$/;"	f
data	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function display(string $content, array $data = []): void;$/;"	v
data	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function fetch(string $template, array $data = []): void;$/;"	v
display	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function display(string $content, array $data = []): void;$/;"	f
exists	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function exists(string $template): bool;$/;"	f
fetch	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function fetch(string $template, array $data = []): void;$/;"	f
getConfig	vendor\topthink\framework\src\think\contract\TemplateHandlerInterface.php	/^    public function getConfig(string $name);$/;"	f
AppInit	vendor\topthink\framework\src\think\event\AppInit.php	/^class AppInit$/;"	c
HttpEnd	vendor\topthink\framework\src\think\event\HttpEnd.php	/^class HttpEnd$/;"	c
HttpRun	vendor\topthink\framework\src\think\event\HttpRun.php	/^class HttpRun$/;"	c
LogWrite	vendor\topthink\framework\src\think\event\LogWrite.php	/^class LogWrite$/;"	c
__construct	vendor\topthink\framework\src\think\event\LogWrite.php	/^    public function __construct($channel, $log)$/;"	f
channel	vendor\topthink\framework\src\think\event\LogWrite.php	/^        $this->channel = $channel;$/;"	v
channel	vendor\topthink\framework\src\think\event\LogWrite.php	/^    public $channel;$/;"	v
log	vendor\topthink\framework\src\think\event\LogWrite.php	/^        $this->log     = $log;$/;"	v
log	vendor\topthink\framework\src\think\event\LogWrite.php	/^    public $log;$/;"	v
RouteLoaded	vendor\topthink\framework\src\think\event\RouteLoaded.php	/^class RouteLoaded$/;"	c
ClassNotFoundException	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^class ClassNotFoundException extends RuntimeException implements NotFoundExceptionInterface$/;"	c
__construct	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^    public function __construct(string $message, string $class = '', Throwable $previous = null)$/;"	f
class	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^        $this->class   = $class;$/;"	v
class	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^    protected $class;$/;"	v
class	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^    public function __construct(string $message, string $class = '', Throwable $previous = null)$/;"	v
getClass	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^    public function getClass()$/;"	f
message	vendor\topthink\framework\src\think\exception\ClassNotFoundException.php	/^        $this->message = $message;$/;"	v
ErrorException	vendor\topthink\framework\src\think\exception\ErrorException.php	/^class ErrorException extends Exception$/;"	c
__construct	vendor\topthink\framework\src\think\exception\ErrorException.php	/^    public function __construct(int $severity, string $message, string $file, int $line)$/;"	f
code	vendor\topthink\framework\src\think\exception\ErrorException.php	/^        $this->code     = 0;$/;"	v
file	vendor\topthink\framework\src\think\exception\ErrorException.php	/^        $this->file     = $file;$/;"	v
getSeverity	vendor\topthink\framework\src\think\exception\ErrorException.php	/^    final public function getSeverity()$/;"	f
line	vendor\topthink\framework\src\think\exception\ErrorException.php	/^        $this->line     = $line;$/;"	v
message	vendor\topthink\framework\src\think\exception\ErrorException.php	/^        $this->message  = $message;$/;"	v
severity	vendor\topthink\framework\src\think\exception\ErrorException.php	/^        $this->severity = $severity;$/;"	v
severity	vendor\topthink\framework\src\think\exception\ErrorException.php	/^    protected $severity;$/;"	v
FileException	vendor\topthink\framework\src\think\exception\FileException.php	/^class FileException extends \\RuntimeException$/;"	c
FuncNotFoundException	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^class FuncNotFoundException extends RuntimeException implements NotFoundExceptionInterface$/;"	c
__construct	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^    public function __construct(string $message, string $func = '', Throwable $previous = null)$/;"	f
func	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^        $this->func   = $func;$/;"	v
func	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^    protected $func;$/;"	v
func	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^    public function __construct(string $message, string $func = '', Throwable $previous = null)$/;"	v
getFunc	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^    public function getFunc()$/;"	f
message	vendor\topthink\framework\src\think\exception\FuncNotFoundException.php	/^        $this->message = $message;$/;"	v
Handle	vendor\topthink\framework\src\think\exception\Handle.php	/^class Handle$/;"	c
__construct	vendor\topthink\framework\src\think\exception\Handle.php	/^    public function __construct(App $app)$/;"	f
app	vendor\topthink\framework\src\think\exception\Handle.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected $app;$/;"	v
code	vendor\topthink\framework\src\think\exception\Handle.php	/^            $code = $exception->getSeverity();$/;"	v
code	vendor\topthink\framework\src\think\exception\Handle.php	/^        $code = $exception->getCode();$/;"	v
const	vendor\topthink\framework\src\think\exception\Handle.php	/^        $const = get_defined_constants(true);$/;"	v
contents	vendor\topthink\framework\src\think\exception\Handle.php	/^            $contents = file($exception->getFile()) ?: [];$/;"	v
convertExceptionToArray	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function convertExceptionToArray(Throwable $exception): array$/;"	f
convertExceptionToResponse	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function convertExceptionToResponse(Throwable $exception): Response$/;"	f
data	vendor\topthink\framework\src\think\exception\Handle.php	/^                $data = [$/;"	v
data	vendor\topthink\framework\src\think\exception\Handle.php	/^            $data = $exception->getData();$/;"	v
data	vendor\topthink\framework\src\think\exception\Handle.php	/^            $data = [$/;"	v
data	vendor\topthink\framework\src\think\exception\Handle.php	/^        $data = $this->convertExceptionToArray($exception);$/;"	v
data	vendor\topthink\framework\src\think\exception\Handle.php	/^        $data = [];$/;"	v
first	vendor\topthink\framework\src\think\exception\Handle.php	/^        $first = ($line - 9 > 0) ? $line - 9 : 1;$/;"	v
getCode	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function getCode(Throwable $exception)$/;"	f
getConst	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function getConst(): array$/;"	f
getExtendData	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function getExtendData(Throwable $exception): array$/;"	f
getMessage	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function getMessage(Throwable $exception): string$/;"	f
getSourceCode	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function getSourceCode(Throwable $exception): array$/;"	f
ignoreReport	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected $ignoreReport = [$/;"	v
isIgnoreReport	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function isIgnoreReport(Throwable $exception): bool$/;"	f
isJson	vendor\topthink\framework\src\think\exception\Handle.php	/^        $this->isJson = $request->isJson();$/;"	v
isJson	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected $isJson = false;$/;"	v
lang	vendor\topthink\framework\src\think\exception\Handle.php	/^        $lang = $this->app->lang;$/;"	v
line	vendor\topthink\framework\src\think\exception\Handle.php	/^        $line  = $exception->getLine();$/;"	v
log	vendor\topthink\framework\src\think\exception\Handle.php	/^                $log = "[{$data['code']}]{$data['message']}";$/;"	v
log	vendor\topthink\framework\src\think\exception\Handle.php	/^                $log = "[{$data['code']}]{$data['message']}[{$data['file']}:{$data['line']}]";$/;"	v
message	vendor\topthink\framework\src\think\exception\Handle.php	/^            $message = $lang->get($message);$/;"	v
message	vendor\topthink\framework\src\think\exception\Handle.php	/^            $message = $lang->has($name) ? $lang->get($name) . ':' . substr(strstr($message, ','), 1) : $message;$/;"	v
message	vendor\topthink\framework\src\think\exception\Handle.php	/^            $message = $lang->has($name) ? $lang->get($name) . strstr($message, ':') : $message;$/;"	v
message	vendor\topthink\framework\src\think\exception\Handle.php	/^        $message = $exception->getMessage();$/;"	v
name	vendor\topthink\framework\src\think\exception\Handle.php	/^            $name    = strstr($message, ',', true);$/;"	v
name	vendor\topthink\framework\src\think\exception\Handle.php	/^            $name    = strstr($message, ':', true);$/;"	v
render	vendor\topthink\framework\src\think\exception\Handle.php	/^    public function render($request, Throwable $e): Response$/;"	f
renderExceptionContent	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function renderExceptionContent(Throwable $exception): string$/;"	f
renderForConsole	vendor\topthink\framework\src\think\exception\Handle.php	/^    public function renderForConsole(Output $output, Throwable $e): void$/;"	f
renderHttpException	vendor\topthink\framework\src\think\exception\Handle.php	/^    protected function renderHttpException(HttpException $e): Response$/;"	f
report	vendor\topthink\framework\src\think\exception\Handle.php	/^    public function report(Throwable $exception): void$/;"	f
response	vendor\topthink\framework\src\think\exception\Handle.php	/^            $response = Response::create($this->convertExceptionToArray($exception), 'json');$/;"	v
response	vendor\topthink\framework\src\think\exception\Handle.php	/^            $response = Response::create($this->renderExceptionContent($exception));$/;"	v
source	vendor\topthink\framework\src\think\exception\Handle.php	/^            $source   = [$/;"	v
source	vendor\topthink\framework\src\think\exception\Handle.php	/^            $source = [];$/;"	v
status	vendor\topthink\framework\src\think\exception\Handle.php	/^        $status   = $e->getStatusCode();$/;"	v
statusCode	vendor\topthink\framework\src\think\exception\Handle.php	/^            $statusCode = $exception->getStatusCode();$/;"	v
template	vendor\topthink\framework\src\think\exception\Handle.php	/^        $template = $this->app->config->get('app.http_exception_template');$/;"	v
HttpException	vendor\topthink\framework\src\think\exception\HttpException.php	/^class HttpException extends \\RuntimeException$/;"	c
__construct	vendor\topthink\framework\src\think\exception\HttpException.php	/^    public function __construct(int $statusCode, string $message = '', Exception $previous = null, array $headers = [], $code = 0)$/;"	f
getHeaders	vendor\topthink\framework\src\think\exception\HttpException.php	/^    public function getHeaders()$/;"	f
getStatusCode	vendor\topthink\framework\src\think\exception\HttpException.php	/^    public function getStatusCode()$/;"	f
headers	vendor\topthink\framework\src\think\exception\HttpException.php	/^        $this->headers    = $headers;$/;"	v
headers	vendor\topthink\framework\src\think\exception\HttpException.php	/^    private $headers;$/;"	v
message	vendor\topthink\framework\src\think\exception\HttpException.php	/^    public function __construct(int $statusCode, string $message = '', Exception $previous = null, array $headers = [], $code = 0)$/;"	v
statusCode	vendor\topthink\framework\src\think\exception\HttpException.php	/^        $this->statusCode = $statusCode;$/;"	v
statusCode	vendor\topthink\framework\src\think\exception\HttpException.php	/^    private $statusCode;$/;"	v
HttpResponseException	vendor\topthink\framework\src\think\exception\HttpResponseException.php	/^class HttpResponseException extends \\RuntimeException$/;"	c
__construct	vendor\topthink\framework\src\think\exception\HttpResponseException.php	/^    public function __construct(Response $response)$/;"	f
getResponse	vendor\topthink\framework\src\think\exception\HttpResponseException.php	/^    public function getResponse()$/;"	f
response	vendor\topthink\framework\src\think\exception\HttpResponseException.php	/^        $this->response = $response;$/;"	v
response	vendor\topthink\framework\src\think\exception\HttpResponseException.php	/^    protected $response;$/;"	v
InvalidArgumentException	vendor\topthink\framework\src\think\exception\InvalidArgumentException.php	/^class InvalidArgumentException extends \\InvalidArgumentException implements Psr6CacheInvalidArgumentInterface, SimpleCacheInvalidArgumentInterface$/;"	c
RouteNotFoundException	vendor\topthink\framework\src\think\exception\RouteNotFoundException.php	/^class RouteNotFoundException extends HttpException$/;"	c
__construct	vendor\topthink\framework\src\think\exception\RouteNotFoundException.php	/^    public function __construct()$/;"	f
ValidateException	vendor\topthink\framework\src\think\exception\ValidateException.php	/^class ValidateException extends \\RuntimeException$/;"	c
__construct	vendor\topthink\framework\src\think\exception\ValidateException.php	/^    public function __construct($error)$/;"	f
error	vendor\topthink\framework\src\think\exception\ValidateException.php	/^        $this->error   = $error;$/;"	v
error	vendor\topthink\framework\src\think\exception\ValidateException.php	/^    protected $error;$/;"	v
getError	vendor\topthink\framework\src\think\exception\ValidateException.php	/^    public function getError()$/;"	f
message	vendor\topthink\framework\src\think\exception\ValidateException.php	/^        $this->message = is_array($error) ? implode(PHP_EOL, $error) : $error;$/;"	v
App	vendor\topthink\framework\src\think\facade\App.php	/^class App extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\App.php	/^    protected static function getFacadeClass()$/;"	f
Cache	vendor\topthink\framework\src\think\facade\Cache.php	/^class Cache extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Cache.php	/^    protected static function getFacadeClass()$/;"	f
Config	vendor\topthink\framework\src\think\facade\Config.php	/^class Config extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Config.php	/^    protected static function getFacadeClass()$/;"	f
Console	vendor\topthink\framework\src\think\facade\Console.php	/^class Console extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Console.php	/^    protected static function getFacadeClass()$/;"	f
Cookie	vendor\topthink\framework\src\think\facade\Cookie.php	/^class Cookie extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Cookie.php	/^    protected static function getFacadeClass()$/;"	f
Env	vendor\topthink\framework\src\think\facade\Env.php	/^class Env extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Env.php	/^    protected static function getFacadeClass()$/;"	f
Event	vendor\topthink\framework\src\think\facade\Event.php	/^class Event extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Event.php	/^    protected static function getFacadeClass()$/;"	f
Filesystem	vendor\topthink\framework\src\think\facade\Filesystem.php	/^class Filesystem extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Filesystem.php	/^    protected static function getFacadeClass()$/;"	f
Lang	vendor\topthink\framework\src\think\facade\Lang.php	/^class Lang extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Lang.php	/^    protected static function getFacadeClass()$/;"	f
Log	vendor\topthink\framework\src\think\facade\Log.php	/^class Log extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Log.php	/^    protected static function getFacadeClass()$/;"	f
Middleware	vendor\topthink\framework\src\think\facade\Middleware.php	/^class Middleware extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Middleware.php	/^    protected static function getFacadeClass()$/;"	f
Request	vendor\topthink\framework\src\think\facade\Request.php	/^class Request extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Request.php	/^    protected static function getFacadeClass()$/;"	f
Route	vendor\topthink\framework\src\think\facade\Route.php	/^class Route extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Route.php	/^    protected static function getFacadeClass()$/;"	f
Session	vendor\topthink\framework\src\think\facade\Session.php	/^class Session extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\Session.php	/^    protected static function getFacadeClass()$/;"	f
Validate	vendor\topthink\framework\src\think\facade\Validate.php	/^class Validate extends Facade$/;"	c
alwaysNewInstance	vendor\topthink\framework\src\think\facade\Validate.php	/^    protected static $alwaysNewInstance = true;$/;"	v
getFacadeClass	vendor\topthink\framework\src\think\facade\Validate.php	/^    protected static function getFacadeClass()$/;"	f
View	vendor\topthink\framework\src\think\facade\View.php	/^class View extends Facade$/;"	c
getFacadeClass	vendor\topthink\framework\src\think\facade\View.php	/^    protected static function getFacadeClass()$/;"	f
UploadedFile	vendor\topthink\framework\src\think\file\UploadedFile.php	/^class UploadedFile extends File$/;"	c
__construct	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function __construct(string $path, string $originalName, string $mimeType = null, int $error = null, bool $test = false)$/;"	f
error	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $error = $msg;$/;"	v
error	vendor\topthink\framework\src\think\file\UploadedFile.php	/^        $this->error        = $error ?: UPLOAD_ERR_OK;$/;"	v
error	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    private $error;$/;"	v
extension	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function extension(): string$/;"	f
getErrorMessage	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    protected function getErrorMessage(): string$/;"	f
getOriginalExtension	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function getOriginalExtension(): string$/;"	f
getOriginalMime	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function getOriginalMime(): string$/;"	f
getOriginalName	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function getOriginalName(): string$/;"	f
isOk	vendor\topthink\framework\src\think\file\UploadedFile.php	/^        $isOk = UPLOAD_ERR_OK === $this->error;$/;"	v
isValid	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function isValid(): bool$/;"	f
message	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $message = 'file write error';$/;"	v
message	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $message = 'no file to uploaded';$/;"	v
message	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $message = 'only the portion of file is uploaded';$/;"	v
message	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $message = 'unknown upload error';$/;"	v
message	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $message = 'upload File size exceeds the maximum value';$/;"	v
message	vendor\topthink\framework\src\think\file\UploadedFile.php	/^                $message = 'upload temp dir not found';$/;"	v
mimeType	vendor\topthink\framework\src\think\file\UploadedFile.php	/^        $this->mimeType     = $mimeType ?: 'application\/octet-stream';$/;"	v
mimeType	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    private $mimeType;$/;"	v
mimeType	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function __construct(string $path, string $originalName, string $mimeType = null, int $error = null, bool $test = false)$/;"	v
move	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function move(string $directory, string $name = null): File$/;"	f
moved	vendor\topthink\framework\src\think\file\UploadedFile.php	/^            $moved = move_uploaded_file($this->getPathname(), $target);$/;"	v
name	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    public function move(string $directory, string $name = null): File$/;"	v
originalName	vendor\topthink\framework\src\think\file\UploadedFile.php	/^        $this->originalName = $originalName;$/;"	v
originalName	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    private $originalName;$/;"	v
target	vendor\topthink\framework\src\think\file\UploadedFile.php	/^            $target = $this->getTargetFile($directory, $name);$/;"	v
test	vendor\topthink\framework\src\think\file\UploadedFile.php	/^        $this->test         = $test;$/;"	v
test	vendor\topthink\framework\src\think\file\UploadedFile.php	/^    private $test = false;$/;"	v
CacheStore	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^class CacheStore extends AbstractCache$/;"	c
__construct	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    public function __construct(CacheInterface $store, $key = 'flysystem', $expire = null)$/;"	f
contents	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^        $contents = $this->getForStorage();$/;"	v
contents	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^        $contents = $this->store->get($this->key);$/;"	v
expire	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    protected $expire;$/;"	v
key	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^        $this->key    = $key;$/;"	v
key	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    protected $key;$/;"	v
key	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    public function __construct(CacheInterface $store, $key = 'flysystem', $expire = null)$/;"	v
load	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    public function load()$/;"	f
save	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    public function save()$/;"	f
store	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^        $this->store  = $store;$/;"	v
store	vendor\topthink\framework\src\think\filesystem\CacheStore.php	/^    protected $store;$/;"	v
Driver	vendor\topthink\framework\src\think\filesystem\Driver.php	/^abstract class Driver$/;"	c
__call	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function __call($method, $parameters)$/;"	f
__construct	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function __construct(Cache $cache, array $config)$/;"	f
adapter	vendor\topthink\framework\src\think\filesystem\Driver.php	/^            $adapter = new CachedAdapter($adapter, $this->createCacheStore($this->config['cache']));$/;"	v
adapter	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $adapter          = $this->createAdapter();$/;"	v
adapter	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $adapter = $this->filesystem->getAdapter();$/;"	v
cache	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $this->cache  = $cache;$/;"	v
cache	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    protected $cache;$/;"	v
config	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $config = array_intersect_key($this->config, array_flip(['visibility', 'disable_asserts', 'url']));$/;"	v
config	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    protected $config = [];$/;"	v
createAdapter	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    abstract protected function createAdapter(): AdapterInterface;$/;"	f
createCacheStore	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    protected function createCacheStore($config)$/;"	f
createFilesystem	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    protected function createFilesystem(AdapterInterface $adapter): Filesystem$/;"	f
filesystem	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $this->filesystem = $this->createFilesystem($adapter);$/;"	v
filesystem	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    protected $filesystem;$/;"	v
options	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function putFileAs(string $path, File $file, string $name, array $options = [])$/;"	v
path	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $path = trim($path . '\/' . $name, '\/');$/;"	v
path	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function path(string $path): string$/;"	f
putFile	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function putFile(string $path, File $file, $rule = null, array $options = [])$/;"	f
putFileAs	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function putFileAs(string $path, File $file, string $name, array $options = [])$/;"	f
result	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $result = $this->putStream($path, $stream, $options);$/;"	v
rule	vendor\topthink\framework\src\think\filesystem\Driver.php	/^    public function putFile(string $path, File $file, $rule = null, array $options = [])$/;"	v
stream	vendor\topthink\framework\src\think\filesystem\Driver.php	/^        $stream = fopen($file->getRealPath(), 'r');$/;"	v
Local	vendor\topthink\framework\src\think\filesystem\driver\Local.php	/^class Local extends Driver$/;"	c
config	vendor\topthink\framework\src\think\filesystem\driver\Local.php	/^    protected $config = [$/;"	v
createAdapter	vendor\topthink\framework\src\think\filesystem\driver\Local.php	/^    protected function createAdapter(): AdapterInterface$/;"	f
links	vendor\topthink\framework\src\think\filesystem\driver\Local.php	/^        $links = ($this->config['links'] ?? null) === 'skip'$/;"	v
permissions	vendor\topthink\framework\src\think\filesystem\driver\Local.php	/^        $permissions = $this->config['permissions'] ?? [];$/;"	v
BootService	vendor\topthink\framework\src\think\initializer\BootService.php	/^class BootService$/;"	c
init	vendor\topthink\framework\src\think\initializer\BootService.php	/^    public function init(App $app)$/;"	f
Error	vendor\topthink\framework\src\think\initializer\Error.php	/^class Error$/;"	c
app	vendor\topthink\framework\src\think\initializer\Error.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\initializer\Error.php	/^    protected $app;$/;"	v
appError	vendor\topthink\framework\src\think\initializer\Error.php	/^    public function appError(int $errno, string $errstr, string $errfile = '', int $errline = 0): void$/;"	f
appException	vendor\topthink\framework\src\think\initializer\Error.php	/^    public function appException(Throwable $e): void$/;"	f
appShutdown	vendor\topthink\framework\src\think\initializer\Error.php	/^    public function appShutdown(): void$/;"	f
errfile	vendor\topthink\framework\src\think\initializer\Error.php	/^    public function appError(int $errno, string $errstr, string $errfile = '', int $errline = 0): void$/;"	v
exception	vendor\topthink\framework\src\think\initializer\Error.php	/^            $exception = new ErrorException($error['type'], $error['message'], $error['file'], $error['line']);$/;"	v
exception	vendor\topthink\framework\src\think\initializer\Error.php	/^        $exception = new ErrorException($errno, $errstr, $errfile, $errline);$/;"	v
getExceptionHandler	vendor\topthink\framework\src\think\initializer\Error.php	/^    protected function getExceptionHandler()$/;"	f
handler	vendor\topthink\framework\src\think\initializer\Error.php	/^        $handler = $this->getExceptionHandler();$/;"	v
init	vendor\topthink\framework\src\think\initializer\Error.php	/^    public function init(App $app)$/;"	f
isFatal	vendor\topthink\framework\src\think\initializer\Error.php	/^    protected function isFatal(int $type): bool$/;"	f
RegisterService	vendor\topthink\framework\src\think\initializer\RegisterService.php	/^class RegisterService$/;"	c
file	vendor\topthink\framework\src\think\initializer\RegisterService.php	/^        $file = $app->getRootPath() . 'vendor\/services.php';$/;"	v
init	vendor\topthink\framework\src\think\initializer\RegisterService.php	/^    public function init(App $app)$/;"	f
services	vendor\topthink\framework\src\think\initializer\RegisterService.php	/^            $services = array_merge($services, include $file);$/;"	v
services	vendor\topthink\framework\src\think\initializer\RegisterService.php	/^        $services = $this->services;$/;"	v
services	vendor\topthink\framework\src\think\initializer\RegisterService.php	/^    protected $services = [$/;"	v
Channel	vendor\topthink\framework\src\think\log\Channel.php	/^class Channel implements LoggerInterface$/;"	c
__call	vendor\topthink\framework\src\think\log\Channel.php	/^    public function __call($method, $parameters)$/;"	f
__construct	vendor\topthink\framework\src\think\log\Channel.php	/^    public function __construct(string $name, LogHandlerInterface $logger, array $allow, bool $lazy = true, Event $event = null)$/;"	f
alert	vendor\topthink\framework\src\think\log\Channel.php	/^    public function alert($message, array $context = [])$/;"	f
allow	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->allow  = $allow;$/;"	v
allow	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $allow = [];$/;"	v
clear	vendor\topthink\framework\src\think\log\Channel.php	/^    public function clear()$/;"	f
close	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->close = true;$/;"	v
close	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $close = false;$/;"	v
close	vendor\topthink\framework\src\think\log\Channel.php	/^    public function close()$/;"	f
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function alert($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function critical($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function debug($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function emergency($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function error($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function info($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function log($level, $message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function notice($message, array $context = [])$/;"	v
context	vendor\topthink\framework\src\think\log\Channel.php	/^    public function warning($message, array $context = [])$/;"	v
critical	vendor\topthink\framework\src\think\log\Channel.php	/^    public function critical($message, array $context = [])$/;"	f
debug	vendor\topthink\framework\src\think\log\Channel.php	/^    public function debug($message, array $context = [])$/;"	f
emergency	vendor\topthink\framework\src\think\log\Channel.php	/^    public function emergency($message, array $context = [])$/;"	f
error	vendor\topthink\framework\src\think\log\Channel.php	/^    public function error($message, array $context = [])$/;"	f
event	vendor\topthink\framework\src\think\log\Channel.php	/^            $event = new LogWrite($this->name, $log);$/;"	v
event	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->event  = $event;$/;"	v
event	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $event;$/;"	v
getLog	vendor\topthink\framework\src\think\log\Channel.php	/^    public function getLog(): array$/;"	f
info	vendor\topthink\framework\src\think\log\Channel.php	/^    public function info($message, array $context = [])$/;"	f
key	vendor\topthink\framework\src\think\log\Channel.php	/^            foreach ($context as $key => $val) {$/;"	v
lazy	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->lazy   = $lazy;$/;"	v
lazy	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $lazy = true;$/;"	v
lazy	vendor\topthink\framework\src\think\log\Channel.php	/^    public function __construct(string $name, LogHandlerInterface $logger, array $allow, bool $lazy = true, Event $event = null)$/;"	v
log	vendor\topthink\framework\src\think\log\Channel.php	/^            $log = $event->log;$/;"	v
log	vendor\topthink\framework\src\think\log\Channel.php	/^        $log = $this->log;$/;"	v
log	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->log = [];$/;"	v
log	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $log = [];$/;"	v
log	vendor\topthink\framework\src\think\log\Channel.php	/^    public function log($level, $message, array $context = [])$/;"	f
logger	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->logger = $logger;$/;"	v
logger	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $logger;$/;"	v
msg	vendor\topthink\framework\src\think\log\Channel.php	/^            $msg = strtr($msg, $replace);$/;"	v
name	vendor\topthink\framework\src\think\log\Channel.php	/^        $this->name   = $name;$/;"	v
name	vendor\topthink\framework\src\think\log\Channel.php	/^    protected $name;$/;"	v
notice	vendor\topthink\framework\src\think\log\Channel.php	/^    public function notice($message, array $context = [])$/;"	f
record	vendor\topthink\framework\src\think\log\Channel.php	/^    public function record($msg, string $type = 'info', array $context = [], bool $lazy = true)$/;"	f
replace	vendor\topthink\framework\src\think\log\Channel.php	/^            $replace = [];$/;"	v
save	vendor\topthink\framework\src\think\log\Channel.php	/^    public function save(): bool$/;"	f
type	vendor\topthink\framework\src\think\log\Channel.php	/^    public function record($msg, string $type = 'info', array $context = [], bool $lazy = true)$/;"	v
type	vendor\topthink\framework\src\think\log\Channel.php	/^    public function write($msg, string $type = 'info', array $context = [])$/;"	v
warning	vendor\topthink\framework\src\think\log\Channel.php	/^    public function warning($message, array $context = [])$/;"	f
write	vendor\topthink\framework\src\think\log\Channel.php	/^    public function write($msg, string $type = 'info', array $context = [])$/;"	f
ChannelSet	vendor\topthink\framework\src\think\log\ChannelSet.php	/^class ChannelSet$/;"	c
__call	vendor\topthink\framework\src\think\log\ChannelSet.php	/^    public function __call($method, $arguments)$/;"	f
__construct	vendor\topthink\framework\src\think\log\ChannelSet.php	/^    public function __construct(Log $log, array $channels)$/;"	f
channels	vendor\topthink\framework\src\think\log\ChannelSet.php	/^        $this->channels = $channels;$/;"	v
channels	vendor\topthink\framework\src\think\log\ChannelSet.php	/^    protected $channels;$/;"	v
log	vendor\topthink\framework\src\think\log\ChannelSet.php	/^        $this->log      = $log;$/;"	v
log	vendor\topthink\framework\src\think\log\ChannelSet.php	/^    protected $log;$/;"	v
File	vendor\topthink\framework\src\think\log\driver\File.php	/^class File implements LogHandlerInterface$/;"	c
__construct	vendor\topthink\framework\src\think\log\driver\File.php	/^    public function __construct(App $app, $config = [])$/;"	f
checkLogSize	vendor\topthink\framework\src\think\log\driver\File.php	/^    protected function checkLogSize(string $destination): void$/;"	f
config	vendor\topthink\framework\src\think\log\driver\File.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\framework\src\think\log\driver\File.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\log\driver\File.php	/^    public function __construct(App $app, $config = [])$/;"	v
destination	vendor\topthink\framework\src\think\log\driver\File.php	/^            $destination = $this->config['path'] . $filename;$/;"	v
destination	vendor\topthink\framework\src\think\log\driver\File.php	/^            $destination = $this->config['path'] . $name . '.log';$/;"	v
destination	vendor\topthink\framework\src\think\log\driver\File.php	/^        $destination = $this->getMasterLogFile();$/;"	v
filename	vendor\topthink\framework\src\think\log\driver\File.php	/^                $filename = $this->getApartLevelFile($path, $type);$/;"	v
filename	vendor\topthink\framework\src\think\log\driver\File.php	/^                $filename = date('Ym') . DIRECTORY_SEPARATOR . date('d') . '.log';$/;"	v
filename	vendor\topthink\framework\src\think\log\driver\File.php	/^                $filename = date('Ymd') . '.log';$/;"	v
files	vendor\topthink\framework\src\think\log\driver\File.php	/^            $files = glob($this->config['path'] . '*.log');$/;"	v
getApartLevelFile	vendor\topthink\framework\src\think\log\driver\File.php	/^    protected function getApartLevelFile(string $path, string $type): string$/;"	f
getMasterLogFile	vendor\topthink\framework\src\think\log\driver\File.php	/^    protected function getMasterLogFile(): string$/;"	f
info	vendor\topthink\framework\src\think\log\driver\File.php	/^        $info = [];$/;"	v
message	vendor\topthink\framework\src\think\log\driver\File.php	/^            $message = [];$/;"	v
message	vendor\topthink\framework\src\think\log\driver\File.php	/^        $message = implode(PHP_EOL, $info) . PHP_EOL;$/;"	v
msg	vendor\topthink\framework\src\think\log\driver\File.php	/^                    $msg = var_export($msg, true);$/;"	v
name	vendor\topthink\framework\src\think\log\driver\File.php	/^            $name        = is_string($this->config['single']) ? $this->config['single'] : 'single';$/;"	v
name	vendor\topthink\framework\src\think\log\driver\File.php	/^            $name = date('Ymd') . '_' . $type;$/;"	v
name	vendor\topthink\framework\src\think\log\driver\File.php	/^            $name = date('d') . '_' . $type;$/;"	v
name	vendor\topthink\framework\src\think\log\driver\File.php	/^            $name = is_string($this->config['single']) ? $this->config['single'] : 'single';$/;"	v
path	vendor\topthink\framework\src\think\log\driver\File.php	/^        $path = dirname($destination);$/;"	v
save	vendor\topthink\framework\src\think\log\driver\File.php	/^    public function save(array $log): bool$/;"	f
time	vendor\topthink\framework\src\think\log\driver\File.php	/^        $time = date($this->config['time_format']);$/;"	v
type	vendor\topthink\framework\src\think\log\driver\File.php	/^        foreach ($log as $type => $val) {$/;"	v
type	vendor\topthink\framework\src\think\log\driver\File.php	/^        foreach ($message as $type => $msg) {$/;"	v
write	vendor\topthink\framework\src\think\log\driver\File.php	/^    protected function write(array $message, string $destination): bool$/;"	f
Socket	vendor\topthink\framework\src\think\log\driver\Socket.php	/^class Socket implements LogHandlerInterface$/;"	c
__construct	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    public function __construct(array $config = [])$/;"	f
address	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $address = '\/' . $client_id; \/\/将client_id作为地址， server端通过地址判断将日志发布给谁$/;"	v
allowForceClientIds	vendor\topthink\framework\src\think\log\driver\Socket.php	/^            $this->allowForceClientIds = $this->config['force_client_ids'];$/;"	v
allowForceClientIds	vendor\topthink\framework\src\think\log\driver\Socket.php	/^            $this->allowForceClientIds = array_intersect($allow_client_ids, $this->config['force_client_ids']);$/;"	v
allowForceClientIds	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected $allowForceClientIds = []; \/\/配置强制推送且被授权的client_id$/;"	v
allow_client_ids	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $allow_client_ids = $this->config['allow_client_ids'];$/;"	v
args	vendor\topthink\framework\src\think\log\driver\Socket.php	/^                $args = ['tabid' => null];$/;"	v
args	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        static $args = [];$/;"	v
ch	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $ch  = curl_init();$/;"	v
check	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected function check()$/;"	f
client_id	vendor\topthink\framework\src\think\log\driver\Socket.php	/^                $client_id = $force_client_id;$/;"	v
client_id	vendor\topthink\framework\src\think\log\driver\Socket.php	/^            $client_id = $this->getClientArg('client_id');$/;"	v
client_id	vendor\topthink\framework\src\think\log\driver\Socket.php	/^            $client_id = '';$/;"	v
config	vendor\topthink\framework\src\think\log\driver\Socket.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    public function __construct(array $config = [])$/;"	v
css	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected $css = [$/;"	v
current_uri	vendor\topthink\framework\src\think\log\driver\Socket.php	/^                $current_uri = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
current_uri	vendor\topthink\framework\src\think\log\driver\Socket.php	/^                $current_uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
getClientArg	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected function getClientArg($name)$/;"	f
headers	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $headers = [$/;"	v
key	vendor\topthink\framework\src\think\log\driver\Socket.php	/^            $key = 'HTTP_SOCKETLOG';$/;"	v
key	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $key = 'HTTP_USER_AGENT';$/;"	v
log	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    public function save(array $log = []): bool$/;"	v
logs	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $logs = [$/;"	v
message	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected function send($host, $message = '', $address = '\/')$/;"	v
msg	vendor\topthink\framework\src\think\log\driver\Socket.php	/^                    $msg = var_export($msg, true);$/;"	v
msg	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $msg     = @json_encode($logs);$/;"	v
port	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    public $port = 1116; \/\/SocketLog 服务的http的端口号$/;"	v
save	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    public function save(array $log = []): bool$/;"	f
send	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected function send($host, $message = '', $address = '\/')$/;"	f
sendToClient	vendor\topthink\framework\src\think\log\driver\Socket.php	/^    protected function sendToClient($tabid, $client_id, $logs, $force_client_id)$/;"	f
tabid	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $tabid = $this->getClientArg('tabid');$/;"	v
trace	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $trace = [];$/;"	v
type	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        foreach ($log as $type => $val) {$/;"	v
url	vendor\topthink\framework\src\think\log\driver\Socket.php	/^        $url = 'http:\/\/' . $host . ':' . $this->port . $address;$/;"	v
AllowCrossDomain	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^class AllowCrossDomain$/;"	c
__construct	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^    public function __construct(Config $config)$/;"	f
cookieDomain	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^        $this->cookieDomain = $config->get('cookie.domain', '');$/;"	v
cookieDomain	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^    protected $cookieDomain;$/;"	v
handle	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^    public function handle($request, Closure $next, ?array $header = [])$/;"	f
header	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^        $header = !empty($header) ? array_merge($this->header, $header) : $this->header;$/;"	v
header	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^    protected $header = [$/;"	v
header	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^    public function handle($request, Closure $next, ?array $header = [])$/;"	v
origin	vendor\topthink\framework\src\think\middleware\AllowCrossDomain.php	/^            $origin = $request->header('origin');$/;"	v
CheckRequestCache	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^class CheckRequestCache$/;"	c
__construct	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^    public function __construct(Cache $cache, Config $config)$/;"	f
cache	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $cache = $cache ?: $this->getRequestCache($request);$/;"	v
cache	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $this->cache  = $cache;$/;"	v
cache	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^    protected $cache;$/;"	v
cache	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^    public function handle($request, Closure $next, $cache = null)$/;"	v
config	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $this->config = array_merge($this->config, $config->get('route'));$/;"	v
config	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^    protected $config = [$/;"	v
except	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $except = $this->config['request_cache_except'];$/;"	v
expire	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^                    $expire = $cache;$/;"	v
expire	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $expire = $this->config['request_cache_expire'];$/;"	v
getRequestCache	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^    protected function getRequestCache($request)$/;"	f
handle	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^    public function handle($request, Closure $next, $cache = null)$/;"	f
header	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $header                  = $response->getHeader();$/;"	v
item	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            foreach ($param as $item => $val) {$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^                    $key    = str_replace('|', '\/', $request->url());$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^                    $key = str_replace(':' . $item, $val, $key);$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^                $key = md5($request->url());$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $key = $fun($key);$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $key = '__URL__';$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $key = call_user_func($key, $request);$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $key = str_replace(['__CONTROLLER__', '__ACTION__', '__URL__'], [$request->controller(), $request->action(), md5($request->url(true))], $key);$/;"	v
key	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $key    = $this->config['request_cache_key'];$/;"	v
param	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^            $param = $request->param();$/;"	v
response	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $response = $next($request);$/;"	v
tag	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^                    $tag    = null;$/;"	v
tag	vendor\topthink\framework\src\think\middleware\CheckRequestCache.php	/^        $tag    = $this->config['request_cache_tag'];$/;"	v
FormTokenCheck	vendor\topthink\framework\src\think\middleware\FormTokenCheck.php	/^class FormTokenCheck$/;"	c
check	vendor\topthink\framework\src\think\middleware\FormTokenCheck.php	/^        $check = $request->checkToken($token ?: '__token__');$/;"	v
handle	vendor\topthink\framework\src\think\middleware\FormTokenCheck.php	/^    public function handle(Request $request, Closure $next, string $token = null)$/;"	f
token	vendor\topthink\framework\src\think\middleware\FormTokenCheck.php	/^    public function handle(Request $request, Closure $next, string $token = null)$/;"	v
LoadLangPack	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^class LoadLangPack$/;"	c
__construct	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^    public function __construct(App $app, Lang $lang)$/;"	f
app	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^        $this->app  = $app;$/;"	v
app	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^    protected $app;$/;"	v
handle	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^    public function handle($request, Closure $next)$/;"	f
lang	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^        $this->lang = $lang;$/;"	v
lang	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^    protected $lang;$/;"	v
langset	vendor\topthink\framework\src\think\middleware\LoadLangPack.php	/^        $langset = $this->lang->detect($request);$/;"	v
SessionInit	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^class SessionInit$/;"	c
__construct	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^    public function __construct(App $app, Session $session)$/;"	f
app	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^        $this->app     = $app;$/;"	v
app	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^    protected $app;$/;"	v
cookieName	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^        $cookieName   = $this->session->getName();$/;"	v
end	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^    public function end(Response $response)$/;"	f
handle	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^    public function handle($request, Closure $next)$/;"	f
response	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^        $response = $next($request);$/;"	v
session	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^        $this->session = $session;$/;"	v
session	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^    protected $session;$/;"	v
sessionId	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^            $sessionId = $request->cookie($cookieName);$/;"	v
sessionId	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^            $sessionId = $request->request($varSessionId);$/;"	v
varSessionId	vendor\topthink\framework\src\think\middleware\SessionInit.php	/^        $varSessionId = $this->app->config->get('session.var_session_id');$/;"	v
File	vendor\topthink\framework\src\think\response\File.php	/^class File extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\File.php	/^    public function __construct($data = '', int $code = 200)$/;"	f
code	vendor\topthink\framework\src\think\response\File.php	/^    public function __construct($data = '', int $code = 200)$/;"	v
content	vendor\topthink\framework\src\think\response\File.php	/^    public function isContent(bool $content = true)$/;"	v
expire	vendor\topthink\framework\src\think\response\File.php	/^        $this->expire = $expire;$/;"	v
expire	vendor\topthink\framework\src\think\response\File.php	/^    protected $expire = 360;$/;"	v
expire	vendor\topthink\framework\src\think\response\File.php	/^    public function expire(int $expire)$/;"	f
extension	vendor\topthink\framework\src\think\response\File.php	/^    public function name(string $filename, bool $extension = true)$/;"	v
finfo	vendor\topthink\framework\src\think\response\File.php	/^        $finfo = finfo_open(FILEINFO_MIME_TYPE);$/;"	v
getMimeType	vendor\topthink\framework\src\think\response\File.php	/^    protected function getMimeType(string $filename): string$/;"	f
isContent	vendor\topthink\framework\src\think\response\File.php	/^        $this->isContent = $content;$/;"	v
isContent	vendor\topthink\framework\src\think\response\File.php	/^    protected $isContent = false;$/;"	v
isContent	vendor\topthink\framework\src\think\response\File.php	/^    public function isContent(bool $content = true)$/;"	f
mimeType	vendor\topthink\framework\src\think\response\File.php	/^            $mimeType = $this->getMimeType($data);$/;"	v
mimeType	vendor\topthink\framework\src\think\response\File.php	/^            $mimeType = $this->mimeType;$/;"	v
mimeType	vendor\topthink\framework\src\think\response\File.php	/^        $this->mimeType = $mimeType;$/;"	v
mimeType	vendor\topthink\framework\src\think\response\File.php	/^    protected $mimeType;$/;"	v
mimeType	vendor\topthink\framework\src\think\response\File.php	/^    public function mimeType(string $mimeType)$/;"	f
name	vendor\topthink\framework\src\think\response\File.php	/^            $name = !$this->isContent ? pathinfo($data, PATHINFO_BASENAME) : '';$/;"	v
name	vendor\topthink\framework\src\think\response\File.php	/^            $name = $this->name;$/;"	v
name	vendor\topthink\framework\src\think\response\File.php	/^        $this->name = $filename;$/;"	v
name	vendor\topthink\framework\src\think\response\File.php	/^    protected $name;$/;"	v
name	vendor\topthink\framework\src\think\response\File.php	/^    public function name(string $filename, bool $extension = true)$/;"	f
output	vendor\topthink\framework\src\think\response\File.php	/^    protected function output($data)$/;"	f
size	vendor\topthink\framework\src\think\response\File.php	/^            $size     = filesize($data);$/;"	v
size	vendor\topthink\framework\src\think\response\File.php	/^            $size     = strlen($data);$/;"	v
Html	vendor\topthink\framework\src\think\response\Html.php	/^class Html extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\Html.php	/^    public function __construct(Cookie $cookie, $data = '', int $code = 200)$/;"	f
contentType	vendor\topthink\framework\src\think\response\Html.php	/^    protected $contentType = 'text\/html';$/;"	v
cookie	vendor\topthink\framework\src\think\response\Html.php	/^        $this->cookie = $cookie;$/;"	v
data	vendor\topthink\framework\src\think\response\Html.php	/^    public function __construct(Cookie $cookie, $data = '', int $code = 200)$/;"	v
Json	vendor\topthink\framework\src\think\response\Json.php	/^class Json extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\Json.php	/^    public function __construct(Cookie $cookie, $data = '', int $code = 200)$/;"	f
contentType	vendor\topthink\framework\src\think\response\Json.php	/^    protected $contentType = 'application\/json';$/;"	v
cookie	vendor\topthink\framework\src\think\response\Json.php	/^        $this->cookie = $cookie;$/;"	v
data	vendor\topthink\framework\src\think\response\Json.php	/^            $data = json_encode($data, $this->options['json_encode_param']);$/;"	v
data	vendor\topthink\framework\src\think\response\Json.php	/^    public function __construct(Cookie $cookie, $data = '', int $code = 200)$/;"	v
options	vendor\topthink\framework\src\think\response\Json.php	/^    protected $options = [$/;"	v
output	vendor\topthink\framework\src\think\response\Json.php	/^    protected function output($data): string$/;"	f
Jsonp	vendor\topthink\framework\src\think\response\Jsonp.php	/^class Jsonp extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\Jsonp.php	/^    public function __construct(Cookie $cookie, Request $request, $data = '', int $code = 200)$/;"	f
contentType	vendor\topthink\framework\src\think\response\Jsonp.php	/^    protected $contentType = 'application\/javascript';$/;"	v
cookie	vendor\topthink\framework\src\think\response\Jsonp.php	/^        $this->cookie  = $cookie;$/;"	v
data	vendor\topthink\framework\src\think\response\Jsonp.php	/^            $data = $handler . '(' . $data . ');';$/;"	v
data	vendor\topthink\framework\src\think\response\Jsonp.php	/^            $data = json_encode($data, $this->options['json_encode_param']);$/;"	v
data	vendor\topthink\framework\src\think\response\Jsonp.php	/^    public function __construct(Cookie $cookie, Request $request, $data = '', int $code = 200)$/;"	v
handler	vendor\topthink\framework\src\think\response\Jsonp.php	/^            $handler           = !empty($var_jsonp_handler) ? $var_jsonp_handler : $this->options['default_jsonp_handler'];$/;"	v
options	vendor\topthink\framework\src\think\response\Jsonp.php	/^    protected $options = [$/;"	v
output	vendor\topthink\framework\src\think\response\Jsonp.php	/^    protected function output($data): string$/;"	f
request	vendor\topthink\framework\src\think\response\Jsonp.php	/^        $this->request = $request;$/;"	v
request	vendor\topthink\framework\src\think\response\Jsonp.php	/^    protected $request;$/;"	v
var_jsonp_handler	vendor\topthink\framework\src\think\response\Jsonp.php	/^            $var_jsonp_handler = $this->request->param($this->options['var_jsonp_handler'], "");$/;"	v
Redirect	vendor\topthink\framework\src\think\response\Redirect.php	/^class Redirect extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\Redirect.php	/^    public function __construct(Cookie $cookie, Request $request, Session $session, $data = '', int $code = 302)$/;"	f
cookie	vendor\topthink\framework\src\think\response\Redirect.php	/^        $this->cookie  = $cookie;$/;"	v
data	vendor\topthink\framework\src\think\response\Redirect.php	/^            $this->data = $this->session->get('redirect_url');$/;"	v
data	vendor\topthink\framework\src\think\response\Redirect.php	/^    public function __construct(Cookie $cookie, Request $request, Session $session, $data = '', int $code = 302)$/;"	v
key	vendor\topthink\framework\src\think\response\Redirect.php	/^            foreach ($name as $key => $val) {$/;"	v
output	vendor\topthink\framework\src\think\response\Redirect.php	/^    protected function output($data): string$/;"	f
remember	vendor\topthink\framework\src\think\response\Redirect.php	/^    public function remember()$/;"	f
request	vendor\topthink\framework\src\think\response\Redirect.php	/^        $this->request = $request;$/;"	v
request	vendor\topthink\framework\src\think\response\Redirect.php	/^    protected $request;$/;"	v
restore	vendor\topthink\framework\src\think\response\Redirect.php	/^    public function restore()$/;"	f
session	vendor\topthink\framework\src\think\response\Redirect.php	/^        $this->session = $session;$/;"	v
value	vendor\topthink\framework\src\think\response\Redirect.php	/^    public function with($name, $value = null)$/;"	v
with	vendor\topthink\framework\src\think\response\Redirect.php	/^    public function with($name, $value = null)$/;"	f
View	vendor\topthink\framework\src\think\response\View.php	/^class View extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\View.php	/^    public function __construct(Cookie $cookie, BaseView $view, $data = '', int $code = 200)$/;"	f
assign	vendor\topthink\framework\src\think\response\View.php	/^    public function assign($name, $value = null)$/;"	f
content	vendor\topthink\framework\src\think\response\View.php	/^    public function isContent(bool $content = true)$/;"	v
contentType	vendor\topthink\framework\src\think\response\View.php	/^    protected $contentType = 'text\/html';$/;"	v
cookie	vendor\topthink\framework\src\think\response\View.php	/^        $this->cookie = $cookie;$/;"	v
data	vendor\topthink\framework\src\think\response\View.php	/^    public function __construct(Cookie $cookie, BaseView $view, $data = '', int $code = 200)$/;"	v
exists	vendor\topthink\framework\src\think\response\View.php	/^    public function exists(string $name): bool$/;"	f
filter	vendor\topthink\framework\src\think\response\View.php	/^        $this->filter = $filter;$/;"	v
filter	vendor\topthink\framework\src\think\response\View.php	/^    protected $filter;$/;"	v
filter	vendor\topthink\framework\src\think\response\View.php	/^    public function filter(callable $filter = null)$/;"	f
filter	vendor\topthink\framework\src\think\response\View.php	/^    public function filter(callable $filter = null)$/;"	v
getVars	vendor\topthink\framework\src\think\response\View.php	/^    public function getVars(string $name = null)$/;"	f
isContent	vendor\topthink\framework\src\think\response\View.php	/^        $this->isContent = $content;$/;"	v
isContent	vendor\topthink\framework\src\think\response\View.php	/^    protected $isContent = false;$/;"	v
isContent	vendor\topthink\framework\src\think\response\View.php	/^    public function isContent(bool $content = true)$/;"	f
name	vendor\topthink\framework\src\think\response\View.php	/^    public function getVars(string $name = null)$/;"	v
options	vendor\topthink\framework\src\think\response\View.php	/^    protected $options = [];$/;"	v
output	vendor\topthink\framework\src\think\response\View.php	/^    protected function output($data): string$/;"	f
value	vendor\topthink\framework\src\think\response\View.php	/^    public function assign($name, $value = null)$/;"	v
vars	vendor\topthink\framework\src\think\response\View.php	/^            $this->vars = array_merge($this->vars, $name);$/;"	v
vars	vendor\topthink\framework\src\think\response\View.php	/^    protected $vars = [];$/;"	v
view	vendor\topthink\framework\src\think\response\View.php	/^        $this->view   = $view;$/;"	v
view	vendor\topthink\framework\src\think\response\View.php	/^    protected $view;$/;"	v
Xml	vendor\topthink\framework\src\think\response\Xml.php	/^class Xml extends Response$/;"	c
__construct	vendor\topthink\framework\src\think\response\Xml.php	/^    public function __construct(Cookie $cookie, $data = '', int $code = 200)$/;"	f
array	vendor\topthink\framework\src\think\response\Xml.php	/^            $array = [];$/;"	v
attr	vendor\topthink\framework\src\think\response\Xml.php	/^                $id && $attr = " {$id}=\\"{$key}\\"";$/;"	v
attr	vendor\topthink\framework\src\think\response\Xml.php	/^            $attr = implode(' ', $array);$/;"	v
attr	vendor\topthink\framework\src\think\response\Xml.php	/^        $attr = empty($attr) ? '' : " {$attr}";$/;"	v
attr	vendor\topthink\framework\src\think\response\Xml.php	/^        $attr = trim($attr);$/;"	v
contentType	vendor\topthink\framework\src\think\response\Xml.php	/^    protected $contentType = 'text\/xml';$/;"	v
cookie	vendor\topthink\framework\src\think\response\Xml.php	/^        $this->cookie = $cookie;$/;"	v
data	vendor\topthink\framework\src\think\response\Xml.php	/^                $data     = $xml . $data;$/;"	v
data	vendor\topthink\framework\src\think\response\Xml.php	/^            $data = $data->toArray();$/;"	v
data	vendor\topthink\framework\src\think\response\Xml.php	/^    public function __construct(Cookie $cookie, $data = '', int $code = 200)$/;"	v
dataToXml	vendor\topthink\framework\src\think\response\Xml.php	/^    protected function dataToXml($data, string $item, string $id): string$/;"	f
encoding	vendor\topthink\framework\src\think\response\Xml.php	/^                $encoding = $this->options['encoding'];$/;"	v
key	vendor\topthink\framework\src\think\response\Xml.php	/^                $key         = $item;$/;"	v
key	vendor\topthink\framework\src\think\response\Xml.php	/^            foreach ($attr as $key => $value) {$/;"	v
key	vendor\topthink\framework\src\think\response\Xml.php	/^        foreach ($data as $key => $val) {$/;"	v
options	vendor\topthink\framework\src\think\response\Xml.php	/^    protected $options = [$/;"	v
output	vendor\topthink\framework\src\think\response\Xml.php	/^    protected function output($data): string$/;"	f
xml	vendor\topthink\framework\src\think\response\Xml.php	/^                $xml      = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>";$/;"	v
xml	vendor\topthink\framework\src\think\response\Xml.php	/^        $xml  = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>";$/;"	v
xml	vendor\topthink\framework\src\think\response\Xml.php	/^        $xml = $attr = '';$/;"	v
xmlEncode	vendor\topthink\framework\src\think\response\Xml.php	/^    protected function xmlEncode($data, string $root, string $item, $attr, string $id, string $encoding): string$/;"	f
Dispatch	vendor\topthink\framework\src\think\route\Dispatch.php	/^abstract class Dispatch$/;"	c
__construct	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function __construct(Request $request, Rule $rule, $dispatch, array $param = [], int $code = null)$/;"	f
__debugInfo	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function __debugInfo()$/;"	f
__sleep	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function __sleep()$/;"	f
__wakeup	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function __wakeup()$/;"	f
allow	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $allow = [];$/;"	v
app	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->app     = Container::pull('app');$/;"	v
app	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->app = $app;$/;"	v
app	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected $app;$/;"	v
autoResponse	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected function autoResponse($data): Response$/;"	f
autoValidate	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected function autoValidate(array $option): void$/;"	f
class	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $class = false !== strpos($validate, '\\\\') ? $validate : $this->app->parseClass('validate', $validate);$/;"	v
code	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->code     = $code;$/;"	v
code	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected $code;$/;"	v
content	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $content  = false === $data ? '' : $data;$/;"	v
createBindModel	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected function createBindModel(array $bindModel, array $matches): void$/;"	f
data	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $data = ob_get_clean();$/;"	v
data	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $data = $this->exec();$/;"	v
dispatch	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->dispatch = $dispatch;$/;"	v
dispatch	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected $dispatch;$/;"	v
doRouteAfter	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected function doRouteAfter(): void$/;"	f
exception	vendor\topthink\framework\src\think\route\Dispatch.php	/^                    $exception = true;$/;"	v
exec	vendor\topthink\framework\src\think\route\Dispatch.php	/^    abstract public function exec();$/;"	f
fields	vendor\topthink\framework\src\think\route\Dispatch.php	/^                $fields = explode('&', $key);$/;"	v
getDispatch	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function getDispatch()$/;"	f
getParam	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function getParam(): array$/;"	f
init	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function init(App $app)$/;"	f
key	vendor\topthink\framework\src\think\route\Dispatch.php	/^        foreach ($bindModel as $key => $val) {$/;"	v
match	vendor\topthink\framework\src\think\route\Dispatch.php	/^                        $match = false;$/;"	v
match	vendor\topthink\framework\src\think\route\Dispatch.php	/^                $match = true;$/;"	v
model	vendor\topthink\framework\src\think\route\Dispatch.php	/^                    $model     = $val;$/;"	v
option	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $option = $this->rule->getOption();$/;"	v
param	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $this->param = array_merge($this->param, $option['append']);$/;"	v
param	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->param    = $param;$/;"	v
param	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected $param;$/;"	v
param	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function __construct(Request $request, Rule $rule, $dispatch, array $param = [], int $code = null)$/;"	v
request	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->request  = $request;$/;"	v
request	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->request = $this->app->request;$/;"	v
request	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected $request;$/;"	v
response	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $response = $data;$/;"	v
response	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $response = Response::create($content, 'html', $status);$/;"	v
response	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $response = Response::create($data, $type);$/;"	v
result	vendor\topthink\framework\src\think\route\Dispatch.php	/^                    $result = $model::where($where)->failException($exception)->find();$/;"	v
result	vendor\topthink\framework\src\think\route\Dispatch.php	/^                $result = $this->app->invokeFunction($val, $matches);$/;"	v
rule	vendor\topthink\framework\src\think\route\Dispatch.php	/^        $this->rule     = $rule;$/;"	v
rule	vendor\topthink\framework\src\think\route\Dispatch.php	/^    protected $rule;$/;"	v
rules	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $rules = $this->rule->getRouter()->getRule($this->rule->getRule());$/;"	v
run	vendor\topthink\framework\src\think\route\Dispatch.php	/^    public function run(): Response$/;"	f
status	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $status   = '' === $content && $this->request->isJson() ? 204 : 200;$/;"	v
type	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $type     = $this->request->isJson() ? 'json' : 'html';$/;"	v
v	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $v = new $class();$/;"	v
v	vendor\topthink\framework\src\think\route\Dispatch.php	/^            $v = new Validate();$/;"	v
where	vendor\topthink\framework\src\think\route\Dispatch.php	/^                $where = [];$/;"	v
Domain	vendor\topthink\framework\src\think\route\Domain.php	/^class Domain extends RuleGroup$/;"	c
__construct	vendor\topthink\framework\src\think\route\Domain.php	/^    public function __construct(Route $router, string $name = null, $rule = null)$/;"	f
action	vendor\topthink\framework\src\think\route\Domain.php	/^        $action = !empty($array[0]) ? $array[0] : $this->router->config('default_action');$/;"	v
array	vendor\topthink\framework\src\think\route\Domain.php	/^        $array  = explode('|', $url, 2);$/;"	v
array	vendor\topthink\framework\src\think\route\Domain.php	/^        $array  = explode('|', $url, 3);$/;"	v
bind	vendor\topthink\framework\src\think\route\Domain.php	/^            $bind = substr($bind, 1);$/;"	v
bind	vendor\topthink\framework\src\think\route\Domain.php	/^        $bind = $this->router->getDomainBind($this->domain);$/;"	v
bind	vendor\topthink\framework\src\think\route\Domain.php	/^    public function bind(string $bind)$/;"	f
bindTo	vendor\topthink\framework\src\think\route\Domain.php	/^            $bindTo = [$/;"	v
bindToClass	vendor\topthink\framework\src\think\route\Domain.php	/^    protected function bindToClass(Request $request, string $url, string $class): CallbackDispatch$/;"	f
bindToController	vendor\topthink\framework\src\think\route\Domain.php	/^    protected function bindToController(Request $request, string $url, string $controller): ControllerDispatch$/;"	f
bindToNamespace	vendor\topthink\framework\src\think\route\Domain.php	/^    protected function bindToNamespace(Request $request, string $url, string $namespace): CallbackDispatch$/;"	f
check	vendor\topthink\framework\src\think\route\Domain.php	/^    public function check(Request $request, string $url, bool $completeMatch = false)$/;"	f
checkUrlBind	vendor\topthink\framework\src\think\route\Domain.php	/^    private function checkUrlBind(Request $request, string $url)$/;"	f
class	vendor\topthink\framework\src\think\route\Domain.php	/^        $class  = !empty($array[0]) ? $array[0] : $this->router->config('default_controller');$/;"	v
completeMatch	vendor\topthink\framework\src\think\route\Domain.php	/^    public function check(Request $request, string $url, bool $completeMatch = false)$/;"	v
domain	vendor\topthink\framework\src\think\route\Domain.php	/^        $this->domain = $name;$/;"	v
method	vendor\topthink\framework\src\think\route\Domain.php	/^        $method = !empty($array[1]) ? $array[1] : $this->router->config('default_action');$/;"	v
name	vendor\topthink\framework\src\think\route\Domain.php	/^    public function __construct(Route $router, string $name = null, $rule = null)$/;"	v
param	vendor\topthink\framework\src\think\route\Domain.php	/^        $param  = [];$/;"	v
parseBindAppendParam	vendor\topthink\framework\src\think\route\Domain.php	/^    protected function parseBindAppendParam(string &$bind): void$/;"	f
result	vendor\topthink\framework\src\think\route\Domain.php	/^        $result = $this->checkUrlBind($request, $url);$/;"	v
router	vendor\topthink\framework\src\think\route\Domain.php	/^        $this->router = $router;$/;"	v
rule	vendor\topthink\framework\src\think\route\Domain.php	/^        $this->rule   = $rule;$/;"	v
type	vendor\topthink\framework\src\think\route\Domain.php	/^            $type = substr($bind, 0, 1);$/;"	v
Resource	vendor\topthink\framework\src\think\route\Resource.php	/^class Resource extends RuleGroup$/;"	c
__construct	vendor\topthink\framework\src\think\route\Resource.php	/^    public function __construct(Route $router, RuleGroup $parent = null, string $name = '', string $route = '', array $rest = [])$/;"	f
array	vendor\topthink\framework\src\think\route\Resource.php	/^            $array = explode('.', $rule);$/;"	v
buildResourceRule	vendor\topthink\framework\src\think\route\Resource.php	/^    protected function buildResourceRule(): void$/;"	f
domain	vendor\topthink\framework\src\think\route\Resource.php	/^            $this->domain = $this->parent->getDomain();$/;"	v
except	vendor\topthink\framework\src\think\route\Resource.php	/^    public function except(array $except)$/;"	f
item	vendor\topthink\framework\src\think\route\Resource.php	/^            $item  = [];$/;"	v
key	vendor\topthink\framework\src\think\route\Resource.php	/^        foreach ($this->rest as $key => $val) {$/;"	v
last	vendor\topthink\framework\src\think\route\Resource.php	/^            $last  = array_pop($array);$/;"	v
middleware	vendor\topthink\framework\src\think\route\Resource.php	/^            $this->middleware = array_merge($this->middleware, $name);$/;"	v
middleware	vendor\topthink\framework\src\think\route\Resource.php	/^    protected $middleware = [];$/;"	v
middleware	vendor\topthink\framework\src\think\route\Resource.php	/^    public function withMiddleware($name, $middleware = [])$/;"	v
model	vendor\topthink\framework\src\think\route\Resource.php	/^            $this->model = array_merge($this->model, $name);$/;"	v
model	vendor\topthink\framework\src\think\route\Resource.php	/^    protected $model = [];$/;"	v
model	vendor\topthink\framework\src\think\route\Resource.php	/^    public function withModel($name, $model = [])$/;"	v
name	vendor\topthink\framework\src\think\route\Resource.php	/^        $name           = ltrim($name, '\/');$/;"	v
name	vendor\topthink\framework\src\think\route\Resource.php	/^        $this->name     = strpos($name, '.') ? strstr($name, '.', true) : $name;$/;"	v
only	vendor\topthink\framework\src\think\route\Resource.php	/^    public function only(array $only)$/;"	f
option	vendor\topthink\framework\src\think\route\Resource.php	/^        $option = $this->option;$/;"	v
origin	vendor\topthink\framework\src\think\route\Resource.php	/^        $origin = $this->router->getGroup();$/;"	v
parent	vendor\topthink\framework\src\think\route\Resource.php	/^        $this->parent   = $parent;$/;"	v
parent	vendor\topthink\framework\src\think\route\Resource.php	/^    public function __construct(Route $router, RuleGroup $parent = null, string $name = '', string $route = '', array $rest = [])$/;"	v
prefix	vendor\topthink\framework\src\think\route\Resource.php	/^        $prefix = substr($rule, strlen($this->name) + 1);$/;"	v
resource	vendor\topthink\framework\src\think\route\Resource.php	/^        $this->resource = $name;$/;"	v
resource	vendor\topthink\framework\src\think\route\Resource.php	/^    protected $resource;$/;"	v
resource	vendor\topthink\framework\src\think\route\Resource.php	/^    public function rest($name, $resource = [])$/;"	v
rest	vendor\topthink\framework\src\think\route\Resource.php	/^            $this->rest = $resource ? $name : array_merge($this->rest, $name);$/;"	v
rest	vendor\topthink\framework\src\think\route\Resource.php	/^        $this->rest = $rest;$/;"	v
rest	vendor\topthink\framework\src\think\route\Resource.php	/^    protected $rest = [];$/;"	v
rest	vendor\topthink\framework\src\think\route\Resource.php	/^    public function rest($name, $resource = [])$/;"	f
route	vendor\topthink\framework\src\think\route\Resource.php	/^        $this->route    = $route;$/;"	v
route	vendor\topthink\framework\src\think\route\Resource.php	/^    protected $route;$/;"	v
router	vendor\topthink\framework\src\think\route\Resource.php	/^        $this->router   = $router;$/;"	v
rule	vendor\topthink\framework\src\think\route\Resource.php	/^            $rule = implode('\/', $item) . '\/' . $last;$/;"	v
rule	vendor\topthink\framework\src\think\route\Resource.php	/^        $rule   = $this->resource;$/;"	v
ruleItem	vendor\topthink\framework\src\think\route\Resource.php	/^            $ruleItem = $this->addRule(trim($prefix . $val[1], '\/'), $this->route . '\/' . $val[2], $val[0]);$/;"	v
validate	vendor\topthink\framework\src\think\route\Resource.php	/^            $this->validate = array_merge($this->validate, $name);$/;"	v
validate	vendor\topthink\framework\src\think\route\Resource.php	/^    protected $validate = [];$/;"	v
validate	vendor\topthink\framework\src\think\route\Resource.php	/^    public function withValidate($name, $validate = [])$/;"	v
vars	vendor\topthink\framework\src\think\route\Resource.php	/^    public function vars(array $vars)$/;"	f
withMiddleware	vendor\topthink\framework\src\think\route\Resource.php	/^    public function withMiddleware($name, $middleware = [])$/;"	f
withModel	vendor\topthink\framework\src\think\route\Resource.php	/^    public function withModel($name, $model = [])$/;"	f
withValidate	vendor\topthink\framework\src\think\route\Resource.php	/^    public function withValidate($name, $validate = [])$/;"	f
Rule	vendor\topthink\framework\src\think\route\Rule.php	/^abstract class Rule$/;"	c
__call	vendor\topthink\framework\src\think\route\Rule.php	/^    public function __call($method, $args)$/;"	f
__debugInfo	vendor\topthink\framework\src\think\route\Rule.php	/^    public function __debugInfo()$/;"	f
__sleep	vendor\topthink\framework\src\think\route\Rule.php	/^    public function __sleep()$/;"	f
__wakeup	vendor\topthink\framework\src\think\route\Rule.php	/^    public function __wakeup()$/;"	f
action	vendor\topthink\framework\src\think\route\Rule.php	/^        $action     = array_pop($path);$/;"	v
ajax	vendor\topthink\framework\src\think\route\Rule.php	/^    public function ajax(bool $ajax = true)$/;"	f
ajax	vendor\topthink\framework\src\think\route\Rule.php	/^    public function ajax(bool $ajax = true)$/;"	v
allowCrossDomain	vendor\topthink\framework\src\think\route\Rule.php	/^    public function allowCrossDomain(array $header = [])$/;"	f
append	vendor\topthink\framework\src\think\route\Rule.php	/^    public function append(array $append = [])$/;"	f
append	vendor\topthink\framework\src\think\route\Rule.php	/^    public function append(array $append = [])$/;"	v
buildNameRegex	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function buildNameRegex(string $name, array $pattern, string $suffix): string$/;"	f
buildRuleRegex	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function buildRuleRegex(string $rule, array $match, array $pattern = [], array $option = [], bool $completeMatch = false, string $suffix = ''): string$/;"	f
cache	vendor\topthink\framework\src\think\route\Rule.php	/^    public function cache($cache)$/;"	f
call	vendor\topthink\framework\src\think\route\Rule.php	/^                $call = 'is' . $item;$/;"	v
check	vendor\topthink\framework\src\think\route\Rule.php	/^    abstract public function check(Request $request, string $url, bool $completeMatch = false);$/;"	f
checkOption	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function checkOption(array $option, Request $request): bool$/;"	f
completeMatch	vendor\topthink\framework\src\think\route\Rule.php	/^    abstract public function check(Request $request, string $url, bool $completeMatch = false);$/;"	v
completeMatch	vendor\topthink\framework\src\think\route\Rule.php	/^    public function completeMatch(bool $match = true)$/;"	f
config	vendor\topthink\framework\src\think\route\Rule.php	/^    public function config(string $name = '')$/;"	f
controller	vendor\topthink\framework\src\think\route\Rule.php	/^        $controller = !empty($path) ? array_pop($path) : null;$/;"	v
count	vendor\topthink\framework\src\think\route\Rule.php	/^        $count = substr_count($rule, '\/');$/;"	v
crossDomainRule	vendor\topthink\framework\src\think\route\Rule.php	/^    public function crossDomainRule()$/;"	f
denyExt	vendor\topthink\framework\src\think\route\Rule.php	/^    public function denyExt(string $ext = '')$/;"	f
depr	vendor\topthink\framework\src\think\route\Rule.php	/^    public function depr(string $depr)$/;"	f
dispatch	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function dispatch(Request $request, $route, array $option): Dispatch$/;"	f
dispatchController	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function dispatchController(Request $request, string $route): ControllerDispatch$/;"	f
dispatchMethod	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function dispatchMethod(Request $request, string $route): CallbackDispatch$/;"	f
domain	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->domain = $domain;$/;"	v
domain	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $domain;$/;"	v
domain	vendor\topthink\framework\src\think\route\Rule.php	/^    public function domain(string $domain)$/;"	f
ext	vendor\topthink\framework\src\think\route\Rule.php	/^    public function denyExt(string $ext = '')$/;"	v
ext	vendor\topthink\framework\src\think\route\Rule.php	/^    public function ext(string $ext = '')$/;"	f
ext	vendor\topthink\framework\src\think\route\Rule.php	/^    public function ext(string $ext = '')$/;"	v
filter	vendor\topthink\framework\src\think\route\Rule.php	/^    public function filter(array $filter)$/;"	f
getDomain	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getDomain(): string$/;"	f
getMethod	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getMethod(): string$/;"	f
getName	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getName(): string$/;"	f
getOption	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getOption(string $name = '', $default = null)$/;"	f
getParent	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getParent()$/;"	f
getPattern	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getPattern(string $name = '')$/;"	f
getRoute	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getRoute()$/;"	f
getRouter	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getRouter(): Route$/;"	f
getRule	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getRule()$/;"	f
getVars	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getVars(): array$/;"	f
hasSlash	vendor\topthink\framework\src\think\route\Rule.php	/^                $hasSlash = true;$/;"	v
header	vendor\topthink\framework\src\think\route\Rule.php	/^    public function allowCrossDomain(array $header = [])$/;"	v
https	vendor\topthink\framework\src\think\route\Rule.php	/^    public function https(bool $https = true)$/;"	f
https	vendor\topthink\framework\src\think\route\Rule.php	/^    public function https(bool $https = true)$/;"	v
json	vendor\topthink\framework\src\think\route\Rule.php	/^    public function json(bool $json = true)$/;"	f
json	vendor\topthink\framework\src\think\route\Rule.php	/^    public function json(bool $json = true)$/;"	v
key	vendor\topthink\framework\src\think\route\Rule.php	/^            foreach ($matches as $key => $value) {$/;"	v
match	vendor\topthink\framework\src\think\route\Rule.php	/^    public function completeMatch(bool $match = true)$/;"	v
mergeGroupOptions	vendor\topthink\framework\src\think\route\Rule.php	/^    public function mergeGroupOptions(): array$/;"	f
mergeOptions	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->mergeOptions = array_merge($this->mergeOptions, $option);$/;"	v
mergeOptions	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $mergeOptions = ['model', 'append', 'middleware'];$/;"	v
mergeOptions	vendor\topthink\framework\src\think\route\Rule.php	/^    public function mergeOptions(array $option = [])$/;"	f
method	vendor\topthink\framework\src\think\route\Rule.php	/^            $method = $this->method;$/;"	v
method	vendor\topthink\framework\src\think\route\Rule.php	/^            $method = '*';$/;"	v
method	vendor\topthink\framework\src\think\route\Rule.php	/^        $method = strpos($route, '@') ? explode('@', $route) : $route;$/;"	v
method	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $method;$/;"	v
method	vendor\topthink\framework\src\think\route\Rule.php	/^    public function method(string $method)$/;"	f
middleware	vendor\topthink\framework\src\think\route\Rule.php	/^    public function middleware($middleware, $param = null)$/;"	f
model	vendor\topthink\framework\src\think\route\Rule.php	/^    public function model($var, $model = null, bool $exception = true)$/;"	f
model	vendor\topthink\framework\src\think\route\Rule.php	/^    public function model($var, $model = null, bool $exception = true)$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^            $name     = substr($name, 1, -2);$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^            $name   = substr($name, 1);$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^            $name = substr($name, 1, -1);$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^            foreach ($option['filter'] as $name => $value) {$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $name;$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^    public function config(string $name = '')$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getOption(string $name = '', $default = null)$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^    public function getPattern(string $name = '')$/;"	v
name	vendor\topthink\framework\src\think\route\Rule.php	/^    public function name(string $name)$/;"	f
nameRule	vendor\topthink\framework\src\think\route\Rule.php	/^                $nameRule = substr($nameRule, 1, -1);$/;"	v
nameRule	vendor\topthink\framework\src\think\route\Rule.php	/^            $nameRule = $pattern[$name];$/;"	v
nameRule	vendor\topthink\framework\src\think\route\Rule.php	/^            $nameRule = $this->router->config('default_route_pattern');$/;"	v
option	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->option = array_merge($parentOption, $this->option);$/;"	v
option	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->option = array_merge($this->option, $option);$/;"	v
option	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $option = [];$/;"	v
option	vendor\topthink\framework\src\think\route\Rule.php	/^    public function mergeOptions(array $option = [])$/;"	v
option	vendor\topthink\framework\src\think\route\Rule.php	/^    public function option(array $option)$/;"	f
option	vendor\topthink\framework\src\think\route\Rule.php	/^    public function parseRule(Request $request, string $rule, $route, string $url, array $option = [], array $matches = []): Dispatch$/;"	v
optional	vendor\topthink\framework\src\think\route\Rule.php	/^            $optional = '?';$/;"	v
optional	vendor\topthink\framework\src\think\route\Rule.php	/^        $optional = '';$/;"	v
param	vendor\topthink\framework\src\think\route\Rule.php	/^    public function middleware($middleware, $param = null)$/;"	v
parent	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $parent;$/;"	v
parentOption	vendor\topthink\framework\src\think\route\Rule.php	/^        $parentOption = $this->parent->getOption();$/;"	v
parseRule	vendor\topthink\framework\src\think\route\Rule.php	/^    public function parseRule(Request $request, string $rule, $route, string $url, array $option = [], array $matches = []): Dispatch$/;"	f
parseUrlParams	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function parseUrlParams(string $url, array &$var = []): void$/;"	f
parseUrlPath	vendor\topthink\framework\src\think\route\Rule.php	/^    public function parseUrlPath(string $url): array$/;"	f
path	vendor\topthink\framework\src\think\route\Rule.php	/^            $path = [$url];$/;"	v
path	vendor\topthink\framework\src\think\route\Rule.php	/^            $path = explode('\/', $url);$/;"	v
path	vendor\topthink\framework\src\think\route\Rule.php	/^        $path = $this->parseUrlPath($route);$/;"	v
pattern	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->pattern = array_merge($this->pattern, $pattern);$/;"	v
pattern	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $pattern = [];$/;"	v
pattern	vendor\topthink\framework\src\think\route\Rule.php	/^    protected function buildRuleRegex(string $rule, array $match, array $pattern = [], array $option = [], bool $completeMatch = false, string $suffix = ''): string$/;"	v
pattern	vendor\topthink\framework\src\think\route\Rule.php	/^    public function pattern(array $pattern)$/;"	f
pjax	vendor\topthink\framework\src\think\route\Rule.php	/^    public function pjax(bool $pjax = true)$/;"	f
pjax	vendor\topthink\framework\src\think\route\Rule.php	/^    public function pjax(bool $pjax = true)$/;"	v
prefix	vendor\topthink\framework\src\think\route\Rule.php	/^            $prefix = '';$/;"	v
prefix	vendor\topthink\framework\src\think\route\Rule.php	/^            $prefix = '\\\\' . $slash;$/;"	v
redirect	vendor\topthink\framework\src\think\route\Rule.php	/^    public function redirect(bool $redirect = true)$/;"	f
redirect	vendor\topthink\framework\src\think\route\Rule.php	/^    public function redirect(bool $redirect = true)$/;"	v
regex	vendor\topthink\framework\src\think\route\Rule.php	/^        $regex = str_replace([')?\/', ')\/', ')?-', ')-', '\\\\\\\\\/'], [')\\\/', ')\\\/', ')\\-', ')\\-', '\\\/'], $regex);$/;"	v
regex	vendor\topthink\framework\src\think\route\Rule.php	/^        $regex = str_replace(array_unique($match), array_unique($replace), $rule);$/;"	v
remove	vendor\topthink\framework\src\think\route\Rule.php	/^    public function removeSlash(bool $remove = true)$/;"	v
removeSlash	vendor\topthink\framework\src\think\route\Rule.php	/^    public function removeSlash(bool $remove = true)$/;"	f
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = $route;$/;"	v
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = $this->dispatchController($request, $route);$/;"	v
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = $this->dispatchMethod($request, $route);$/;"	v
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = new CallbackDispatch($request, $this, $route, $this->vars);$/;"	v
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = new RedirectDispatch($request, $this, $route, $this->vars, $option['status'] ?? 301);$/;"	v
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = new ResponseDispatch($request, $this, $route);$/;"	v
result	vendor\topthink\framework\src\think\route\Rule.php	/^            $result = new ViewDispatch($request, $this, $route, is_array($option['view']) ? $option['view'] : $this->vars);$/;"	v
route	vendor\topthink\framework\src\think\route\Rule.php	/^            $route = $option['prefix'] . $route;$/;"	v
route	vendor\topthink\framework\src\think\route\Rule.php	/^            $route = str_replace($search, $replace, $route);$/;"	v
route	vendor\topthink\framework\src\think\route\Rule.php	/^        $route  = str_replace('\/', '@', implode('\/', $path));$/;"	v
route	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $route;$/;"	v
router	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->router = Container::pull('route');$/;"	v
router	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $router;$/;"	v
rule	vendor\topthink\framework\src\think\route\Rule.php	/^                $rule     = rtrim($rule, '\/');$/;"	v
rule	vendor\topthink\framework\src\think\route\Rule.php	/^                $rule = rtrim($rule, '\/');$/;"	v
rule	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $rule;$/;"	v
scene	vendor\topthink\framework\src\think\route\Rule.php	/^    public function validate($validate, string $scene = null, array $message = [], bool $batch = false)$/;"	v
search	vendor\topthink\framework\src\think\route\Rule.php	/^            $search = $replace = [];$/;"	v
setOption	vendor\topthink\framework\src\think\route\Rule.php	/^    public function setOption(string $name, $value)$/;"	f
slash	vendor\topthink\framework\src\think\route\Rule.php	/^            $slash  = substr($name, 0, 1);$/;"	v
slash	vendor\topthink\framework\src\think\route\Rule.php	/^        $slash    = substr($name, 0, 1);$/;"	v
status	vendor\topthink\framework\src\think\route\Rule.php	/^    public function status(int $status)$/;"	f
token	vendor\topthink\framework\src\think\route\Rule.php	/^    public function token(string $token = '__token__')$/;"	f
token	vendor\topthink\framework\src\think\route\Rule.php	/^    public function token(string $token = '__token__')$/;"	v
url	vendor\topthink\framework\src\think\route\Rule.php	/^        $url   = array_slice(explode('|', $url), $count + 1);$/;"	v
url	vendor\topthink\framework\src\think\route\Rule.php	/^        $url = str_replace('|', '\/', $url);$/;"	v
url	vendor\topthink\framework\src\think\route\Rule.php	/^        $url = trim($url, '\/');$/;"	v
validate	vendor\topthink\framework\src\think\route\Rule.php	/^    public function validate($validate, string $scene = null, array $message = [], bool $batch = false)$/;"	f
vars	vendor\topthink\framework\src\think\route\Rule.php	/^        $this->vars = $matches;$/;"	v
vars	vendor\topthink\framework\src\think\route\Rule.php	/^    protected $vars = [];$/;"	v
view	vendor\topthink\framework\src\think\route\Rule.php	/^    public function view($view = true)$/;"	f
RuleGroup	vendor\topthink\framework\src\think\route\RuleGroup.php	/^class RuleGroup extends Rule$/;"	c
__construct	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function __construct(Route $router, RuleGroup $parent = null, string $name = '', $rule = null)$/;"	f
addRule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function addRule(string $rule, $route = null, string $method = '*'): RuleItem$/;"	f
addRuleItem	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function addRuleItem(Rule $rule, string $method = '*')$/;"	f
alias	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->alias = $alias;$/;"	v
alias	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected $alias;$/;"	v
alias	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function alias(string $alias)$/;"	f
array	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $array = $this->router->getRule($rule);$/;"	v
check	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function check(Request $request, string $url, bool $completeMatch = false)$/;"	f
checkMergeRuleRegex	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected function checkMergeRuleRegex(Request $request, array &$rules, string $url, bool $completeMatch)$/;"	f
checkUrl	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected function checkUrl(string $url): bool$/;"	f
clear	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function clear(): void$/;"	f
complete	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                $complete = $item->getOption('complete_match', $completeMatch);$/;"	v
completeMatch	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $completeMatch = $this->option['complete_match'];$/;"	v
completeMatch	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function check(Request $request, string $url, bool $completeMatch = false)$/;"	v
depr	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $depr  = $this->router->config('pathinfo_depr');$/;"	v
domain	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $this->domain = $this->parent->getDomain();$/;"	v
fullName	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $this->fullName = $this->name;$/;"	v
fullName	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $this->fullName = $this->parent->getFullName() . ($this->name ? '\/' . $this->name : '');$/;"	v
fullName	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected $fullName;$/;"	v
getAlias	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function getAlias(): string$/;"	f
getDomain	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function getDomain(): string$/;"	f
getFullName	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function getFullName(): string$/;"	f
getMethodRules	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected function getMethodRules(string $method): array$/;"	f
getMissRule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function getMissRule():  ? RuleItem$/;"	f
getRules	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function getRules(string $method = ''): array$/;"	f
items	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $items = [];$/;"	v
key	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                foreach ($regex as $key => $item) {$/;"	v
key	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            foreach ($match as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        foreach ($rules as $key => $item) {$/;"	v
lazy	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function lazy(bool $lazy = true)$/;"	f
lazy	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function lazy(bool $lazy = true)$/;"	v
merge	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function mergeRuleRegex(bool $merge = true)$/;"	v
mergeRuleRegex	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function mergeRuleRegex(bool $merge = true)$/;"	f
method	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $method = '*';$/;"	v
method	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $method = strtolower($method);$/;"	v
method	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $method = strtolower($request->method());$/;"	v
method	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function addRuleItem(Rule $rule, string $method = '*')$/;"	v
method	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function getRules(string $method = ''): array$/;"	v
method	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function miss($route, string $method = '*') : RuleItem$/;"	v
miss	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->miss = $ruleItem;$/;"	v
miss	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected $miss;$/;"	v
miss	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function miss($route, string $method = '*') : RuleItem$/;"	f
name	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $name = $route;$/;"	v
name	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $name = null;$/;"	v
name	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $this->name = preg_replace(['\/\\[\\:(\\w+)\\]\/', '\/\\:(\\w+)\/'], ['<\\1?>', '<\\1>'], $this->name);$/;"	v
name	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->name   = trim($name, '\/');$/;"	v
option	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                    $option  = array_merge($this->getOption(), $item->getOption());$/;"	v
origin	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $origin = $this->router->getGroup();$/;"	v
parent	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->parent = $parent;$/;"	v
parent	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function __construct(Route $router, RuleGroup $parent = null, string $name = '', $rule = null)$/;"	v
parseGroupRule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function parseGroupRule($rule): void$/;"	f
pattern	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                    $pattern = array_merge($this->getPattern(), $item->getPattern());$/;"	v
pattern	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $this->pattern = array_merge($this->parent->getPattern(), $this->pattern);$/;"	v
pos	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                        $pos = $key;$/;"	v
pos	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $pos = strpos($this->fullName, '<');$/;"	v
prefix	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $prefix = $this->parent->getOption('prefix') . $prefix;$/;"	v
prefix	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function prefix(string $prefix)$/;"	f
regex	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $regex = [];$/;"	v
result	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                    $result = $item->checkRule($request, $url, $var);$/;"	v
result	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $result = $item->check($request, $url, $completeMatch);$/;"	v
result	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $result = $this->checkMergeRuleRegex($request, $rules, $url, $completeMatch);$/;"	v
result	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $result = $this->parseRule($request, '', $this->miss->getRoute(), $url, $this->miss->mergeGroupOptions());$/;"	v
result	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $result = false;$/;"	v
result	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $result = preg_match('\/^(?:' . implode('|', $regex) . ')\/u', $url, $match);$/;"	v
route	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    public function addRule(string $rule, $route = null, string $method = '*'): RuleItem$/;"	v
router	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->router = $router;$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                $rule = $depr . str_replace('\/', $depr, $item->getRule());$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $rule  = $items[$pos]->getRule();$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $this->rule = null;$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->rule   = $rule;$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected $rule;$/;"	v
ruleItem	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $ruleItem = new RuleItem($this->router, $this, $name, $rule, $route, $method);$/;"	v
ruleItem	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $ruleItem = new RuleItem($this->router, $this, null, '', $route, strtolower($method));$/;"	v
rules	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $rules  = $this->getMethodRules($method);$/;"	v
rules	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $this->rules = [$/;"	v
rules	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected $rules = [$/;"	v
setFullName	vendor\topthink\framework\src\think\route\RuleGroup.php	/^    protected function setFullName(): void$/;"	f
slash	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                $slash = preg_quote('\/-' . $depr, '\/');$/;"	v
str	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                $str = $this->fullName;$/;"	v
str	vendor\topthink\framework\src\think\route\RuleGroup.php	/^                $str = substr($this->fullName, 0, $pos);$/;"	v
url	vendor\topthink\framework\src\think\route\RuleGroup.php	/^        $url   = $depr . str_replace('|', $depr, $url);$/;"	v
var	vendor\topthink\framework\src\think\route\RuleGroup.php	/^            $var = [];$/;"	v
RuleItem	vendor\topthink\framework\src\think\route\RuleItem.php	/^class RuleItem extends Rule$/;"	c
__construct	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function __construct(Route $router, RuleGroup $parent, string $name = null, string $rule = '', $route = null, string $method = '*')$/;"	f
autoOption	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->autoOption = true;$/;"	v
autoOption	vendor\topthink\framework\src\think\route\RuleItem.php	/^    protected $autoOption = false;$/;"	v
check	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function check(Request $request, string $url, bool $completeMatch = false)$/;"	f
checkRule	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function checkRule(Request $request, string $url, $match = null, bool $completeMatch = false)$/;"	f
completeMatch	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $completeMatch = $option['complete_match'];$/;"	v
completeMatch	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function check(Request $request, string $url, bool $completeMatch = false)$/;"	v
depr	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $depr    = $this->router->config('pathinfo_depr');$/;"	v
first	vendor\topthink\framework\src\think\route\RuleItem.php	/^    protected function setRuleName(bool $first = false): void$/;"	v
getSuffix	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function getSuffix()$/;"	f
group	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $group = $this->router->getRuleName()->getGroup($name);$/;"	v
group	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function group(string $name)$/;"	f
isAutoOptions	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function isAutoOptions(): bool$/;"	f
isMiss	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function isMiss(): bool$/;"	f
key	vendor\topthink\framework\src\think\route\RuleItem.php	/^            foreach ($match as $key => $val) {$/;"	v
match	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $match = $this->match($url, $option, $completeMatch);$/;"	v
match	vendor\topthink\framework\src\think\route\RuleItem.php	/^    private function match(string $url, array $option, bool $completeMatch)$/;"	f
match	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function checkRule(Request $request, string $url, $match = null, bool $completeMatch = false)$/;"	v
method	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->method = $method;$/;"	v
miss	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->miss = true;$/;"	v
miss	vendor\topthink\framework\src\think\route\RuleItem.php	/^    protected $miss = false;$/;"	v
name	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->name   = $name;$/;"	v
name	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function __construct(Route $router, RuleGroup $parent, string $name = null, string $rule = '', $route = null, string $method = '*')$/;"	v
name	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function name(string $name)$/;"	f
option	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $option = $this->mergeGroupOptions();$/;"	v
option	vendor\topthink\framework\src\think\route\RuleItem.php	/^    protected function urlSuffixCheck(Request $request, string $url, array $option = []): string$/;"	v
parent	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $this->parent = $group;$/;"	v
parent	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->parent = $parent;$/;"	v
pattern	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $pattern = array_merge($this->parent->getPattern(), $this->pattern);$/;"	v
prefix	vendor\topthink\framework\src\think\route\RuleItem.php	/^        if ($this->parent && $prefix = $this->parent->getFullName()) {$/;"	v
regex	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $regex = $this->buildRuleRegex($rule, $matches[0], $pattern, $option, $completeMatch);$/;"	v
route	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->route  = $route;$/;"	v
router	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $this->router = $router;$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $rule = $prefix . ($rule ? '\/' . ltrim($rule, '\/') : '');$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $rule = substr($rule, 0, -1);$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $this->rule = $rule;$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $this->rule = preg_replace(['\/\\[\\:(\\w+)\\]\/', '\/\\:(\\w+)\/'], ['<\\1?>', '<\\1>'], $rule);$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $this->rule = rtrim($this->rule, '\/');$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $rule = $depr . str_replace('\/', $depr, $this->rule);$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $rule = '\/' != $rule ? ltrim($rule, '\/') : '';$/;"	v
setAutoOptions	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function setAutoOptions()$/;"	f
setMiss	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function setMiss()$/;"	f
setRule	vendor\topthink\framework\src\think\route\RuleItem.php	/^    public function setRule(string $rule): void$/;"	f
setRuleName	vendor\topthink\framework\src\think\route\RuleItem.php	/^    protected function setRuleName(bool $first = false): void$/;"	f
slash	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $slash = preg_quote('\/-' . $depr, '\/');$/;"	v
suffix	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $suffix = $this->option['ext'];$/;"	v
suffix	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $suffix = $this->parent->getOption('ext');$/;"	v
suffix	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $suffix = null;$/;"	v
url	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $url        = rtrim($url, '|');$/;"	v
url	vendor\topthink\framework\src\think\route\RuleItem.php	/^            $url = preg_replace('\/\\.(' . $request->ext() . ')$\/i', '', $url);$/;"	v
url	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $url  = $depr . str_replace('|', $depr, $url);$/;"	v
url	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $url = $this->urlSuffixCheck($request, $url, $option);$/;"	v
urlSuffixCheck	vendor\topthink\framework\src\think\route\RuleItem.php	/^    protected function urlSuffixCheck(Request $request, string $url, array $option = []): string$/;"	f
var	vendor\topthink\framework\src\think\route\RuleItem.php	/^        $var  = [];$/;"	v
RuleName	vendor\topthink\framework\src\think\route\RuleName.php	/^class RuleName$/;"	c
call	vendor\topthink\framework\src\think\route\RuleName.php	/^                    $call        = 'get' . $param;$/;"	v
clear	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function clear(): void$/;"	f
first	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function setName(string $name, RuleItem $ruleItem, bool $first = false): void$/;"	v
getGroup	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function getGroup(string $name)$/;"	f
getName	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function getName(string $name = null, string $domain = null, string $method = '*'): array$/;"	f
getRule	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function getRule(string $rule): array$/;"	f
getRuleList	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function getRuleList(): array$/;"	f
group	vendor\topthink\framework\src\think\route\RuleName.php	/^    protected $group = [];$/;"	v
import	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function import(array $item): void$/;"	f
item	vendor\topthink\framework\src\think\route\RuleName.php	/^        $this->item = $item;$/;"	v
item	vendor\topthink\framework\src\think\route\RuleName.php	/^        $this->item = [];$/;"	v
item	vendor\topthink\framework\src\think\route\RuleName.php	/^    protected $item = [];$/;"	v
itemDomain	vendor\topthink\framework\src\think\route\RuleName.php	/^                    $itemDomain = $item->getDomain();$/;"	v
itemMethod	vendor\topthink\framework\src\think\route\RuleName.php	/^                    $itemMethod = $item->getMethod();$/;"	v
list	vendor\topthink\framework\src\think\route\RuleName.php	/^        $list = [];$/;"	v
method	vendor\topthink\framework\src\think\route\RuleName.php	/^                    if (($itemDomain == $domain || '-' == $itemDomain) && ('*' == $itemMethod || '*' == $method || $method == $itemMethod)) {$/;"	v
method	vendor\topthink\framework\src\think\route\RuleName.php	/^        $method = strtolower($method);$/;"	v
name	vendor\topthink\framework\src\think\route\RuleName.php	/^        $name   = strtolower($name);$/;"	v
name	vendor\topthink\framework\src\think\route\RuleName.php	/^        $name = strtolower($name);$/;"	v
name	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function getName(string $name = null, string $domain = null, string $method = '*'): array$/;"	v
result	vendor\topthink\framework\src\think\route\RuleName.php	/^                $result = $this->item[$name];$/;"	v
result	vendor\topthink\framework\src\think\route\RuleName.php	/^        $result = [];$/;"	v
route	vendor\topthink\framework\src\think\route\RuleName.php	/^        $route = $ruleItem->getRoute();$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleName.php	/^        $this->rule = [];$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleName.php	/^        foreach ($this->rule as $rule => $rules) {$/;"	v
rule	vendor\topthink\framework\src\think\route\RuleName.php	/^    protected $rule = [];$/;"	v
setGroup	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function setGroup(string $name, RuleGroup $group): void$/;"	f
setName	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function setName(string $name, RuleItem $ruleItem, bool $first = false): void$/;"	f
setRule	vendor\topthink\framework\src\think\route\RuleName.php	/^    public function setRule(string $rule, RuleItem $ruleItem): void$/;"	f
val	vendor\topthink\framework\src\think\route\RuleName.php	/^                $val = [];$/;"	v
Url	vendor\topthink\framework\src\think\route\Url.php	/^class Url$/;"	c
__construct	vendor\topthink\framework\src\think\route\Url.php	/^    public function __construct(Route $route, App $app, string $url = '', array $vars = [])$/;"	f
__debugInfo	vendor\topthink\framework\src\think\route\Url.php	/^    public function __debugInfo()$/;"	f
__toString	vendor\topthink\framework\src\think\route\Url.php	/^    public function __toString()$/;"	f
action	vendor\topthink\framework\src\think\route\Url.php	/^            $action     = array_pop($path);$/;"	v
allowDomain	vendor\topthink\framework\src\think\route\Url.php	/^    protected function getRuleUrl(array $rule, array &$vars = [], $allowDomain = ''): array$/;"	v
anchor	vendor\topthink\framework\src\think\route\Url.php	/^                $anchor = $info['fragment'];$/;"	v
anchor	vendor\topthink\framework\src\think\route\Url.php	/^        $anchor = !empty($anchor) ? '#' . $anchor : '';$/;"	v
app	vendor\topthink\framework\src\think\route\Url.php	/^        $this->app   = $app;$/;"	v
app	vendor\topthink\framework\src\think\route\Url.php	/^    protected $app;$/;"	v
bind	vendor\topthink\framework\src\think\route\Url.php	/^            $bind = $this->route->getDomainBind($domain && is_string($domain) ? $domain : null);$/;"	v
binds	vendor\topthink\framework\src\think\route\Url.php	/^                $binds = $this->route->getBind();$/;"	v
build	vendor\topthink\framework\src\think\route\Url.php	/^    public function build()$/;"	f
checkDomain	vendor\topthink\framework\src\think\route\Url.php	/^            $checkDomain = $domain && is_string($domain) ? $domain : null;$/;"	v
checkName	vendor\topthink\framework\src\think\route\Url.php	/^            $checkName   = isset($name) ? $name : $url . (isset($info['query']) ? '?' . $info['query'] : '');$/;"	v
controller	vendor\topthink\framework\src\think\route\Url.php	/^            $controller = $request->controller();$/;"	v
controller	vendor\topthink\framework\src\think\route\Url.php	/^            $controller = empty($path) ? $controller : array_pop($path);$/;"	v
depr	vendor\topthink\framework\src\think\route\Url.php	/^        $depr = $this->route->config('pathinfo_depr');$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^                                $domain = $key;$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^                        $domain = $key;$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^                $domain = $match[1];$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^                $domain = is_string($allowDomain) ? $allowDomain : $request->host(true);$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^            $domain  = $item->getDomain();$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^            $domain  = $request->host();$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^        $domain  = $this->domain;$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^        $domain = $this->parseDomain($url, $domain);$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^        $this->domain = $domain;$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^    protected $domain = false;$/;"	v
domain	vendor\topthink\framework\src\think\route\Url.php	/^    public function domain($domain)$/;"	f
domains	vendor\topthink\framework\src\think\route\Url.php	/^            $domains = $this->route->getDomains();$/;"	v
file	vendor\topthink\framework\src\think\route\Url.php	/^            $file = str_replace('\\\\', '\/', dirname($file));$/;"	v
file	vendor\topthink\framework\src\think\route\Url.php	/^        $file = $request->baseFile();$/;"	v
getRuleUrl	vendor\topthink\framework\src\think\route\Url.php	/^    protected function getRuleUrl(array $rule, array &$vars = [], $allowDomain = ''): array$/;"	f
https	vendor\topthink\framework\src\think\route\Url.php	/^        $this->https = $https;$/;"	v
https	vendor\topthink\framework\src\think\route\Url.php	/^    protected $https;$/;"	v
https	vendor\topthink\framework\src\think\route\Url.php	/^    public function https(bool $https = true)$/;"	f
https	vendor\topthink\framework\src\think\route\Url.php	/^    public function https(bool $https = true)$/;"	v
info	vendor\topthink\framework\src\think\route\Url.php	/^            $info = parse_url($url);$/;"	v
key	vendor\topthink\framework\src\think\route\Url.php	/^                        foreach ($domains as $key => $rule) {$/;"	v
key	vendor\topthink\framework\src\think\route\Url.php	/^                foreach ($binds as $key => $val) {$/;"	v
key	vendor\topthink\framework\src\think\route\Url.php	/^            foreach ($pattern as $key => $val) {$/;"	v
match	vendor\topthink\framework\src\think\route\Url.php	/^        if (!empty($rule) && $match = $this->getRuleUrl($rule, $vars, $domain)) {$/;"	v
name	vendor\topthink\framework\src\think\route\Url.php	/^                    $name     = substr($name, 1, -2);$/;"	v
name	vendor\topthink\framework\src\think\route\Url.php	/^                    $name = substr($name, 1, -1);$/;"	v
name	vendor\topthink\framework\src\think\route\Url.php	/^            $name = substr($url, 1, $pos - 1);$/;"	v
optional	vendor\topthink\framework\src\think\route\Url.php	/^                    $optional = true;$/;"	v
optional	vendor\topthink\framework\src\think\route\Url.php	/^                $optional = false;$/;"	v
parseDomain	vendor\topthink\framework\src\think\route\Url.php	/^    protected function parseDomain(string &$url, $domain): string$/;"	f
parseSuffix	vendor\topthink\framework\src\think\route\Url.php	/^    protected function parseSuffix($suffix): string$/;"	f
parseUrl	vendor\topthink\framework\src\think\route\Url.php	/^    protected function parseUrl(string $url, &$domain): string$/;"	f
parseVar	vendor\topthink\framework\src\think\route\Url.php	/^    protected function parseVar(string $rule): array$/;"	f
path	vendor\topthink\framework\src\think\route\Url.php	/^            $path       = explode('\/', $url);$/;"	v
pattern	vendor\topthink\framework\src\think\route\Url.php	/^            $pattern = $this->parseVar($url);$/;"	v
port	vendor\topthink\framework\src\think\route\Url.php	/^        $port = $request->port();$/;"	v
pos	vendor\topthink\framework\src\think\route\Url.php	/^        if (0 === strpos($url, '[') && $pos = strpos($url, ']')) {$/;"	v
request	vendor\topthink\framework\src\think\route\Url.php	/^        $request    = $this->app->request;$/;"	v
request	vendor\topthink\framework\src\think\route\Url.php	/^        $request = $this->app->request;$/;"	v
result	vendor\topthink\framework\src\think\route\Url.php	/^                    $result = [rtrim($url, '?\/-'), $domain, $suffix];$/;"	v
root	vendor\topthink\framework\src\think\route\Url.php	/^        $this->root = $root;$/;"	v
root	vendor\topthink\framework\src\think\route\Url.php	/^    protected $root = '';$/;"	v
root	vendor\topthink\framework\src\think\route\Url.php	/^    public function root(string $root)$/;"	f
rootDomain	vendor\topthink\framework\src\think\route\Url.php	/^        $rootDomain = $request->rootDomain();$/;"	v
route	vendor\topthink\framework\src\think\route\Url.php	/^        $this->route = $route;$/;"	v
route	vendor\topthink\framework\src\think\route\Url.php	/^    protected $route;$/;"	v
route_domain	vendor\topthink\framework\src\think\route\Url.php	/^                $route_domain = array_keys($domains);$/;"	v
rule	vendor\topthink\framework\src\think\route\Url.php	/^                            $rule = is_array($rule) ? $rule[0] : $rule;$/;"	v
rule	vendor\topthink\framework\src\think\route\Url.php	/^                $rule = $this->route->getName($url, $checkDomain);$/;"	v
rule	vendor\topthink\framework\src\think\route\Url.php	/^            $rule = $this->route->getName($checkName, $checkDomain);$/;"	v
scheme	vendor\topthink\framework\src\think\route\Url.php	/^            $scheme = $this->https || $request->isSsl() ? 'https:\/\/' : 'http:\/\/';$/;"	v
scheme	vendor\topthink\framework\src\think\route\Url.php	/^            $scheme = '';$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^                $suffix = $match[2];$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^                $suffix = substr($suffix, 0, $pos);$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^            $suffix  = $item->getSuffix();$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^            $suffix = $this->parseSuffix($suffix);$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^            $suffix = '';$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^            $suffix = true === $suffix ? $this->route->config('url_html_suffix') : $suffix;$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^        $suffix  = $this->suffix;$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^        $this->suffix = $suffix;$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^    protected $suffix = true;$/;"	v
suffix	vendor\topthink\framework\src\think\route\Url.php	/^    public function suffix($suffix)$/;"	f
type	vendor\topthink\framework\src\think\route\Url.php	/^            $type = $this->route->config('url_common_param');$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^                                $url    = ltrim($url, $rule);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^                        $url    = substr($url, strlen($val) + 1);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^                    $url    = str_replace(['\/?', '-?'], ['\/', '-'], $url);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^                    $url    = str_replace(['\/[:' . $key . ']', '[:' . $key . ']', '<' . $key . '?>'], '', $url);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^                    $url = str_replace(['[:' . $key . ']', '<' . $key . '?>', ':' . $key, '<' . $key . '>'], $type ? $vars[$key] : urlencode((string) $vars[$key]), $url);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^                $url = substr($url, strlen($bind) + 1);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url     = $item->getRule();$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url  = !empty($info['path']) ? $info['path'] : '';$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url  = 'name' . substr($url, $pos + 1);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url = $controller . '\/' . $action;$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url = $match[0];$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url = $request->controller() . '\/' . $request->action();$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url = $this->parseUrl($url, $domain);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url = ltrim(str_replace('\\\\', '\/', $url), '\/');$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^            $url = substr($url, 1);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^        $this->url   = $url;$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^        $url     = $this->url;$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^        $url  = str_replace('\/', $depr, $url);$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^        $url = rtrim($file, '\/') . '\/' . $url;$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^    protected $url;$/;"	v
url	vendor\topthink\framework\src\think\route\Url.php	/^    public function __construct(Route $route, App $app, string $url = '', array $vars = [])$/;"	v
val	vendor\topthink\framework\src\think\route\Url.php	/^                    $val = (string) $val;$/;"	v
var	vendor\topthink\framework\src\think\route\Url.php	/^                foreach ($vars as $var => $val) {$/;"	v
var	vendor\topthink\framework\src\think\route\Url.php	/^        $var = [];$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^                $vars = array_merge($params, $vars);$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^                $vars = http_build_query($vars);$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^        $this->vars  = $vars;$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^        $this->vars = $vars;$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^        $vars    = $this->vars;$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^    protected $vars = [];$/;"	v
vars	vendor\topthink\framework\src\think\route\Url.php	/^    public function vars(array $vars = [])$/;"	f
vars	vendor\topthink\framework\src\think\route\Url.php	/^    public function vars(array $vars = [])$/;"	v
Callback	vendor\topthink\framework\src\think\route\dispatch\Callback.php	/^class Callback extends Dispatch$/;"	c
exec	vendor\topthink\framework\src\think\route\dispatch\Callback.php	/^    public function exec()$/;"	f
vars	vendor\topthink\framework\src\think\route\dispatch\Callback.php	/^        $vars = array_merge($this->request->param(), $this->param);$/;"	v
Controller	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^class Controller extends Dispatch$/;"	c
action	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                $action = $this->actionName . $this->rule->config('action_suffix');$/;"	v
actionName	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                        $actionName = $reflect->getName();$/;"	v
actionName	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $this->actionName = strip_tags($result[1] ?: $this->rule->config('default_action'));$/;"	v
actionName	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^    protected $actionName;$/;"	v
class	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $class = $this->app->parseClass($controllerLayer, $name . $suffix);$/;"	v
class	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $class = new ReflectionClass($controller);$/;"	v
controller	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $this->controller = Str::studly($controller);$/;"	v
controller	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $this->controller = substr($controller, 0, $pos) . '.' . Str::studly(substr($controller, $pos + 1));$/;"	v
controller	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $controller = strip_tags($result[0] ?: $this->rule->config('default_controller'));$/;"	v
controller	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^    protected $controller;$/;"	v
controller	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^    public function controller(string $name)$/;"	f
controllerLayer	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $controllerLayer = $this->rule->config('controller_layer') ?: 'controller';$/;"	v
data	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                $data = $this->app->invokeReflectMethod($instance, $reflect, $vars);$/;"	v
emptyController	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $emptyController = $this->rule->config('empty_controller') ?: 'Error';$/;"	v
exec	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^    public function exec()$/;"	f
init	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^    public function init(App $app)$/;"	f
instance	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $instance = $this->controller($this->controller);$/;"	v
key	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            foreach ($middlewares as $key => $val) {$/;"	v
middlewares	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $middlewares = $reflectionProperty->getValue($controller);$/;"	v
pos	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $pos              = strrpos($controller, '.');$/;"	v
reflect	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                        $reflect = new ReflectionMethod($instance, $action);$/;"	v
reflect	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                        $reflect = new ReflectionMethod($instance, '__call');$/;"	v
reflectionProperty	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $reflectionProperty = $class->getProperty('middleware');$/;"	v
registerControllerMiddleware	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^    protected function registerControllerMiddleware($controller): void$/;"	f
result	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^            $result = explode('\/', $result);$/;"	v
result	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $result = $this->dispatch;$/;"	v
suffix	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^        $suffix = $this->rule->config('controller_suffix') ? 'Controller' : '';$/;"	v
val	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                        $val = $key;$/;"	v
val	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                    $val = explode(':', $val, 2);$/;"	v
vars	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                        $vars    = [$action, $vars];$/;"	v
vars	vendor\topthink\framework\src\think\route\dispatch\Controller.php	/^                    $vars = $this->request->param();$/;"	v
Redirect	vendor\topthink\framework\src\think\route\dispatch\Redirect.php	/^class Redirect extends Dispatch$/;"	c
exec	vendor\topthink\framework\src\think\route\dispatch\Redirect.php	/^    public function exec()$/;"	f
Response	vendor\topthink\framework\src\think\route\dispatch\Response.php	/^class Response extends Dispatch$/;"	c
exec	vendor\topthink\framework\src\think\route\dispatch\Response.php	/^    public function exec()$/;"	f
Url	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^class Url extends Controller$/;"	c
__construct	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^    public function __construct(Request $request, Rule $rule, $dispatch, array $param = [], int $code = null)$/;"	f
action	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $action = !empty($path) ? array_shift($path) : null;$/;"	v
bind	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^            $bind = str_replace('\/', $depr, $bind);$/;"	v
bind	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $bind = $this->rule->getRouter()->getDomainBind();$/;"	v
controller	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $controller = !empty($path) ? array_shift($path) : null;$/;"	v
depr	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $depr = $this->rule->config('pathinfo_depr');$/;"	v
dispatch	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $dispatch = $this->parseUrl($dispatch);$/;"	v
hasDefinedRoute	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^    protected function hasDefinedRoute(array $route): bool$/;"	f
host	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $host   = $this->request->host(true);$/;"	v
key	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        if ($panDomain && $key = array_search('*', $var)) {$/;"	v
method	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $method = $this->request->method();$/;"	v
name	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $name = strtolower(Str::studly($controller) . '\/' . $action);$/;"	v
panDomain	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $panDomain = $this->request->panDomain();$/;"	v
param	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $this->param = $var;$/;"	v
param	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^    public function __construct(Request $request, Rule $rule, $dispatch, array $param = [], int $code = null)$/;"	v
parseUrl	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^    protected function parseUrl(string $url): array$/;"	f
path	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $path = $this->rule->parseUrlPath($url);$/;"	v
request	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $this->request = $request;$/;"	v
route	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $route = [$controller, $action];$/;"	v
rule	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $this->rule    = $rule;$/;"	v
url	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^            $url = $bind . ('.' != substr($bind, -1) ? $depr : '') . ltrim($url, $depr);$/;"	v
var	vendor\topthink\framework\src\think\route\dispatch\Url.php	/^        $var    = [];$/;"	v
View	vendor\topthink\framework\src\think\route\dispatch\View.php	/^class View extends Dispatch$/;"	c
exec	vendor\topthink\framework\src\think\route\dispatch\View.php	/^    public function exec()$/;"	f
ModelService	vendor\topthink\framework\src\think\service\ModelService.php	/^class ModelService extends Service$/;"	c
boot	vendor\topthink\framework\src\think\service\ModelService.php	/^    public function boot()$/;"	f
config	vendor\topthink\framework\src\think\service\ModelService.php	/^            $config = $this->app->config;$/;"	v
dateFormat	vendor\topthink\framework\src\think\service\ModelService.php	/^            $dateFormat = $model->getDateFormat();$/;"	v
isAutoWriteTimestamp	vendor\topthink\framework\src\think\service\ModelService.php	/^            $isAutoWriteTimestamp = $model->getAutoWriteTimestamp();$/;"	v
PaginatorService	vendor\topthink\framework\src\think\service\PaginatorService.php	/^class PaginatorService extends Service$/;"	c
boot	vendor\topthink\framework\src\think\service\PaginatorService.php	/^    public function boot()$/;"	f
page	vendor\topthink\framework\src\think\service\PaginatorService.php	/^            $page = $this->app->request->param($varPage);$/;"	v
register	vendor\topthink\framework\src\think\service\PaginatorService.php	/^    public function register()$/;"	f
ValidateService	vendor\topthink\framework\src\think\service\ValidateService.php	/^class ValidateService extends Service$/;"	c
boot	vendor\topthink\framework\src\think\service\ValidateService.php	/^    public function boot()$/;"	f
Store	vendor\topthink\framework\src\think\session\Store.php	/^class Store$/;"	c
__construct	vendor\topthink\framework\src\think\session\Store.php	/^    public function __construct($name, SessionHandlerInterface $handler, array $serialize = null)$/;"	f
all	vendor\topthink\framework\src\think\session\Store.php	/^    public function all(): array$/;"	f
array	vendor\topthink\framework\src\think\session\Store.php	/^        $array = $this->get($key, []);$/;"	v
clear	vendor\topthink\framework\src\think\session\Store.php	/^    public function clear(): void$/;"	f
clearFlashData	vendor\topthink\framework\src\think\session\Store.php	/^    public function clearFlashData(): void$/;"	f
data	vendor\topthink\framework\src\think\session\Store.php	/^            $data = $this->serialize($this->data);$/;"	v
data	vendor\topthink\framework\src\think\session\Store.php	/^            $this->data = array_merge($this->data, $this->unserialize($data));$/;"	v
data	vendor\topthink\framework\src\think\session\Store.php	/^        $data = $this->handler->read($this->getId());$/;"	v
data	vendor\topthink\framework\src\think\session\Store.php	/^        $this->data = $data;$/;"	v
data	vendor\topthink\framework\src\think\session\Store.php	/^        $this->data = [];$/;"	v
data	vendor\topthink\framework\src\think\session\Store.php	/^    protected $data = [];$/;"	v
default	vendor\topthink\framework\src\think\session\Store.php	/^    public function get(string $name, $default = null)$/;"	v
delete	vendor\topthink\framework\src\think\session\Store.php	/^    public function delete(string $name): void$/;"	f
destroy	vendor\topthink\framework\src\think\session\Store.php	/^    public function destroy(): void$/;"	f
destroy	vendor\topthink\framework\src\think\session\Store.php	/^    public function regenerate(bool $destroy = false): void$/;"	v
flash	vendor\topthink\framework\src\think\session\Store.php	/^    public function flash(string $name, $value): void$/;"	f
get	vendor\topthink\framework\src\think\session\Store.php	/^    public function get(string $name, $default = null)$/;"	f
getId	vendor\topthink\framework\src\think\session\Store.php	/^    public function getId(): string$/;"	f
getName	vendor\topthink\framework\src\think\session\Store.php	/^    public function getName(): string$/;"	f
handler	vendor\topthink\framework\src\think\session\Store.php	/^        $this->handler = $handler;$/;"	v
handler	vendor\topthink\framework\src\think\session\Store.php	/^    protected $handler;$/;"	v
has	vendor\topthink\framework\src\think\session\Store.php	/^    public function has(string $name): bool$/;"	f
id	vendor\topthink\framework\src\think\session\Store.php	/^        $this->id = is_string($id) && strlen($id) === 32 ? $id : md5(microtime(true) . session_create_id());$/;"	v
id	vendor\topthink\framework\src\think\session\Store.php	/^    protected $id;$/;"	v
init	vendor\topthink\framework\src\think\session\Store.php	/^        $this->init = false;$/;"	v
init	vendor\topthink\framework\src\think\session\Store.php	/^        $this->init = true;$/;"	v
init	vendor\topthink\framework\src\think\session\Store.php	/^    protected $init = null;$/;"	v
init	vendor\topthink\framework\src\think\session\Store.php	/^    public function init(): void$/;"	f
keys	vendor\topthink\framework\src\think\session\Store.php	/^        $keys   = $this->get('__flash__.__current__', []);$/;"	v
name	vendor\topthink\framework\src\think\session\Store.php	/^        $this->name    = $name;$/;"	v
name	vendor\topthink\framework\src\think\session\Store.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\framework\src\think\session\Store.php	/^    protected $name = 'PHPSESSID';$/;"	v
pull	vendor\topthink\framework\src\think\session\Store.php	/^    public function pull(string $name)$/;"	f
push	vendor\topthink\framework\src\think\session\Store.php	/^    public function push(string $key, $value): void$/;"	f
reflash	vendor\topthink\framework\src\think\session\Store.php	/^    public function reflash(): void$/;"	f
regenerate	vendor\topthink\framework\src\think\session\Store.php	/^    public function regenerate(bool $destroy = false): void$/;"	f
save	vendor\topthink\framework\src\think\session\Store.php	/^    public function save(): void$/;"	f
serialize	vendor\topthink\framework\src\think\session\Store.php	/^            $this->serialize = $serialize;$/;"	v
serialize	vendor\topthink\framework\src\think\session\Store.php	/^        $serialize = $this->serialize[0] ?? 'serialize';$/;"	v
serialize	vendor\topthink\framework\src\think\session\Store.php	/^    protected $serialize = [];$/;"	v
serialize	vendor\topthink\framework\src\think\session\Store.php	/^    protected function serialize($data): string$/;"	f
serialize	vendor\topthink\framework\src\think\session\Store.php	/^    public function __construct($name, SessionHandlerInterface $handler, array $serialize = null)$/;"	v
sessionId	vendor\topthink\framework\src\think\session\Store.php	/^        $sessionId = $this->getId();$/;"	v
set	vendor\topthink\framework\src\think\session\Store.php	/^    public function set(string $name, $value): void$/;"	f
setData	vendor\topthink\framework\src\think\session\Store.php	/^    public function setData(array $data): void$/;"	f
setId	vendor\topthink\framework\src\think\session\Store.php	/^    public function setId($id = null): void$/;"	f
setName	vendor\topthink\framework\src\think\session\Store.php	/^    public function setName(string $name): void$/;"	f
unserialize	vendor\topthink\framework\src\think\session\Store.php	/^        $unserialize = $this->serialize[1] ?? 'unserialize';$/;"	v
unserialize	vendor\topthink\framework\src\think\session\Store.php	/^    protected function unserialize(string $data): array$/;"	f
values	vendor\topthink\framework\src\think\session\Store.php	/^        $values = array_unique(array_merge($this->get('__flash__.__next__', []), $keys));$/;"	v
Cache	vendor\topthink\framework\src\think\session\driver\Cache.php	/^class Cache implements SessionHandlerInterface$/;"	c
__construct	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    public function __construct(\\think\\Cache $cache, array $config = [])$/;"	f
config	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    public function __construct(\\think\\Cache $cache, array $config = [])$/;"	v
delete	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    public function delete(string $sessionId): bool$/;"	f
expire	vendor\topthink\framework\src\think\session\driver\Cache.php	/^        $this->expire  = Arr::get($config, 'expire', 1440);$/;"	v
expire	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    protected $expire;$/;"	v
handler	vendor\topthink\framework\src\think\session\driver\Cache.php	/^        $this->handler = $cache->store(Arr::get($config, 'store'));$/;"	v
handler	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    protected $handler;$/;"	v
prefix	vendor\topthink\framework\src\think\session\driver\Cache.php	/^        $this->prefix  = Arr::get($config, 'prefix', '');$/;"	v
prefix	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    protected $prefix;$/;"	v
read	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    public function read(string $sessionId): string$/;"	f
write	vendor\topthink\framework\src\think\session\driver\Cache.php	/^    public function write(string $sessionId, string $data): bool$/;"	f
File	vendor\topthink\framework\src\think\session\driver\File.php	/^class File implements SessionHandlerInterface$/;"	c
__construct	vendor\topthink\framework\src\think\session\driver\File.php	/^    public function __construct(App $app, array $config = [])$/;"	f
auto	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected function getFileName(string $name, bool $auto = false): string$/;"	v
config	vendor\topthink\framework\src\think\session\driver\File.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\session\driver\File.php	/^    public function __construct(App $app, array $config = [])$/;"	v
content	vendor\topthink\framework\src\think\session\driver\File.php	/^                $content = gzuncompress($content);$/;"	v
content	vendor\topthink\framework\src\think\session\driver\File.php	/^            $content = $this->readFile($filename);$/;"	v
contents	vendor\topthink\framework\src\think\session\driver\File.php	/^                    $contents = fread($handle, filesize($path) ?: 1);$/;"	v
contents	vendor\topthink\framework\src\think\session\driver\File.php	/^        $contents = '';$/;"	v
data	vendor\topthink\framework\src\think\session\driver\File.php	/^            $data = gzcompress($data, 3);$/;"	v
data	vendor\topthink\framework\src\think\session\driver\File.php	/^        $data     = $sessData;$/;"	v
delete	vendor\topthink\framework\src\think\session\driver\File.php	/^    public function delete(string $sessID): bool$/;"	f
dir	vendor\topthink\framework\src\think\session\driver\File.php	/^        $dir      = dirname($filename);$/;"	v
filename	vendor\topthink\framework\src\think\session\driver\File.php	/^        $filename = $this->config['path'] . $name;$/;"	v
filename	vendor\topthink\framework\src\think\session\driver\File.php	/^        $filename = $this->getFileName($sessID);$/;"	v
filename	vendor\topthink\framework\src\think\session\driver\File.php	/^        $filename = $this->getFileName($sessID, true);$/;"	v
files	vendor\topthink\framework\src\think\session\driver\File.php	/^        $files = $this->findFiles($this->config['path'], function (SplFileInfo $item) use ($lifetime, $now) {$/;"	v
findFiles	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected function findFiles(string $root, Closure $filter)$/;"	f
gc	vendor\topthink\framework\src\think\session\driver\File.php	/^    public function gc(): void$/;"	f
getFileName	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected function getFileName(string $name, bool $auto = false): string$/;"	f
handle	vendor\topthink\framework\src\think\session\driver\File.php	/^        $handle = fopen($path, 'rb');$/;"	v
init	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected function init(): void$/;"	f
items	vendor\topthink\framework\src\think\session\driver\File.php	/^        $items = new FilesystemIterator($root);$/;"	v
lifetime	vendor\topthink\framework\src\think\session\driver\File.php	/^        $lifetime = $this->config['expire'];$/;"	v
name	vendor\topthink\framework\src\think\session\driver\File.php	/^            $name = $this->config['prefix'] . DIRECTORY_SEPARATOR . 'sess_' . $name;$/;"	v
name	vendor\topthink\framework\src\think\session\driver\File.php	/^            $name = 'sess_' . $name;$/;"	v
now	vendor\topthink\framework\src\think\session\driver\File.php	/^        $now      = time();$/;"	v
read	vendor\topthink\framework\src\think\session\driver\File.php	/^    public function read(string $sessID): string$/;"	f
readFile	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected function readFile($path): string$/;"	f
unlink	vendor\topthink\framework\src\think\session\driver\File.php	/^    private function unlink(string $file): bool$/;"	f
write	vendor\topthink\framework\src\think\session\driver\File.php	/^    public function write(string $sessID, string $sessData): bool$/;"	f
writeFile	vendor\topthink\framework\src\think\session\driver\File.php	/^    protected function writeFile($path, $content): bool$/;"	f
ValidateRule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^class ValidateRule$/;"	c
__call	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    public function __call($method, $args)$/;"	f
__callStatic	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    public static function __callStatic($method, $args)$/;"	f
addItem	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    protected function addItem(string $name, $rule = null, string $msg = '')$/;"	f
getMsg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    public function getMsg(): array$/;"	f
getRule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    public function getRule(): array$/;"	f
getTitle	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    public function getTitle(): string$/;"	f
message	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    protected $message = [];$/;"	v
method	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^            $method = substr($method, 2);$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule activeUrl(mixed $rule, string $msg = '') static 验证是否为合格的域名或者IP$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule after(mixed $rule, string $msg = '') static 验证日期$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule allowIp(mixed $rule, string $msg = '') static 验证IP许可$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule before(mixed $rule, string $msg = '') static 验证日期$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule behavior(mixed $rule, string $msg = '') static 使用行为类验证$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule between(mixed $rule, string $msg = '') static 验证是否在某个区间$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule confirm(mixed $rule, string $msg = '') static 验证是否和某个字段的值一致$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule dateFormat(mixed $rule, string $msg = '') static 验证时间和日期是否符合指定格式$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule denyIp(mixed $rule, string $msg = '') static 验证IP禁用$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule different(mixed $rule, string $msg = '') static 验证是否和某个字段的值是否不同$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule eg(mixed $rule, string $msg = '') static 验证是否等于某个值$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule egt(mixed $rule, string $msg = '') static 验证是否大于等于某个值$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule elt(mixed $rule, string $msg = '') static 验证是否小于等于某个值$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule expire(mixed $rule, string $msg = '') static 验证有效期$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule fileExt(mixed $rule, string $msg = '') static 验证文件后缀$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule fileMime(mixed $rule, string $msg = '') static 验证文件类型$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule fileSize(mixed $rule, string $msg = '') static 验证文件大小$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule filter(mixed $rule, string $msg = '') static 使用filter_var方式验证$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule gt(mixed $rule, string $msg = '') static 验证是否大于某个值$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule image(mixed $rule, string $msg = '') static 验证图像文件$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule in(mixed $rule, string $msg = '') static 验证是否在范围内$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule ip(mixed $rule, string $msg = '') static 验证是否有效IP$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule is(mixed $rule, string $msg = '') static 验证字段值是否为有效格式$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule length(mixed $rule, string $msg = '') static 验证数据长度$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule lt(mixed $rule, string $msg = '') static 验证是否小于某个值$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule max(mixed $rule, string $msg = '') static 验证数据最大长度$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule method(mixed $rule, string $msg = '') static 验证请求类型$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule min(mixed $rule, string $msg = '') static 验证数据最小长度$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule notBetween(mixed $rule, string $msg = '') static 验证是否不在某个区间$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule notIn(mixed $rule, string $msg = '') static 验证是否不在某个范围$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule regex(mixed $rule, string $msg = '') static 使用正则验证数据$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule requireCallback(mixed $rule, string $msg = '') static 通过回调方法验证某个字段是否必须$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule requireIf(mixed $rule, string $msg = '') static 验证某个字段等于某个值的时候必须$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule requireWith(mixed $rule, string $msg = '') static 验证某个字段有值的情况下必须$/;"	v
msg	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule unique(mixed $rule, string $msg = '') static 验证是否唯一$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^        $rule = new static();$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    protected $rule = [];$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    protected function addItem(string $name, $rule = null, string $msg = '')$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isAccepted(mixed $rule = null, string $msg = '') static 验证字段值是否为yes, on, 或是 1$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isAlpha(mixed $rule = null, string $msg = '') static 验证字段值是否为字母$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isAlphaDash(mixed $rule = null, string $msg = '') static 验证字段值是否为字母和下划线$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isAlphaNum(mixed $rule = null, string $msg = '') static 验证字段值是否为字母和数字$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isArray(mixed $rule = null, string $msg = '') static 验证字段值是否为数组$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isBool(mixed $rule = null, string $msg = '') static 验证字段值是否为布尔值$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isChs(mixed $rule = null, string $msg = '') static 验证字段值是否为中文$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isChsAlpha(mixed $rule = null, string $msg = '') static 验证字段值是否为中文和字母$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isChsAlphaNum(mixed $rule = null, string $msg = '') static 验证字段值是否为中文字母和数字$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isChsDash(mixed $rule = null, string $msg = '') static 验证字段值是否为中文字母及下划线$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isDate(mixed $rule = null, string $msg = '') static 验证字段值是否为有效格式$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isEmail(mixed $rule = null, string $msg = '') static 验证字段值是否为有效邮箱格式$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isFloat(mixed $rule = null, string $msg = '') static 验证字段值是否为浮点数$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isIdCard(mixed $rule = null, string $msg = '') static 验证字段值是否为身份证号码$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isInteger(mixed $rule = null, string $msg = '') static 验证字段值是否为整形$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isMobile(mixed $rule = null, string $msg = '') static 验证字段值是否为手机$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isNumber(mixed $rule = null, string $msg = '') static 验证字段值是否为数字$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isRequire(mixed $rule = null, string $msg = '') static 验证字段必须$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule isUrl(mixed $rule = null, string $msg = '') static 验证字段值是否为有效URL地址$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule must(mixed $rule = null, string $msg = '') static 必须验证$/;"	v
rule	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^ * @method ValidateRule token(mixed $rule='__token__', string $msg = '') static 验证表单令牌$/;"	v
title	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^        $this->title = $title;$/;"	v
title	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    protected $title;$/;"	v
title	vendor\topthink\framework\src\think\validate\ValidateRule.php	/^    public function title(string $title)$/;"	f
Php	vendor\topthink\framework\src\think\view\driver\Php.php	/^class Php implements TemplateHandlerInterface$/;"	c
__construct	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function __construct(App $app, array $config = [])$/;"	f
app	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $this->app    = $app;$/;"	v
app	vendor\topthink\framework\src\think\view\driver\Php.php	/^    protected $app;$/;"	v
appName	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $appName = isset($app) ? $app : $this->app->http->getName();$/;"	v
config	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $this->config = array_merge($this->config, (array) $config);$/;"	v
config	vendor\topthink\framework\src\think\view\driver\Php.php	/^    protected $config = [$/;"	v
config	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function __construct(App $app, array $config = [])$/;"	v
config	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function config(array $config): void$/;"	f
content	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $this->content = $content;$/;"	v
content	vendor\topthink\framework\src\think\view\driver\Php.php	/^    protected $content;$/;"	v
controller	vendor\topthink\framework\src\think\view\driver\Php.php	/^                $controller = Str::snake($controller);$/;"	v
controller	vendor\topthink\framework\src\think\view\driver\Php.php	/^                $controller = substr($controller, 0, $pos) . '.' . Str::snake(substr($controller, $pos + 1));$/;"	v
controller	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $controller = $request->controller();$/;"	v
data	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function display(string $content, array $data = []): void$/;"	v
data	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function fetch(string $template, array $data = []): void$/;"	v
depr	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $depr = $this->config['view_depr'];$/;"	v
display	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function display(string $content, array $data = []): void$/;"	f
exists	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function exists(string $template): bool$/;"	f
fetch	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function fetch(string $template, array $data = []): void$/;"	f
getConfig	vendor\topthink\framework\src\think\view\driver\Php.php	/^    public function getConfig(string $name)$/;"	f
parseTemplate	vendor\topthink\framework\src\think\view\driver\Php.php	/^    private function parseTemplate(string $template): string$/;"	f
path	vendor\topthink\framework\src\think\view\driver\Php.php	/^                $path = $this->app->getRootPath() . $view . DIRECTORY_SEPARATOR . ($appName ? $appName . DIRECTORY_SEPARATOR : '');$/;"	v
path	vendor\topthink\framework\src\think\view\driver\Php.php	/^                $path = isset($app) ? $this->app->getBasePath() . ($appName ? $appName . DIRECTORY_SEPARATOR : '') . $view . DIRECTORY_SEPARATOR : $this->app->getAppPath() . $view . DIRECTORY_SEPARATOR;$/;"	v
path	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $path = $this->config['view_path'];$/;"	v
pos	vendor\topthink\framework\src\think\view\driver\Php.php	/^                $pos        = strrpos($controller, '.');$/;"	v
request	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $request = $this->app->request;$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^                        $template = $request->action();$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^                        $template = $request->action(true);$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^                        $template = Str::snake($request->action());$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^                    $template = str_replace('.', DIRECTORY_SEPARATOR, $controller) . $depr . $template;$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $template   = str_replace(['\/', ':'], $depr, $template);$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $template = $this->parseTemplate($template);$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $template = str_replace(['\/', ':'], $depr, substr($template, 1));$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^        $this->template = $template;$/;"	v
template	vendor\topthink\framework\src\think\view\driver\Php.php	/^    protected $template;$/;"	v
view	vendor\topthink\framework\src\think\view\driver\Php.php	/^            $view    = $this->config['view_dir_name'];$/;"	v
AppTest	vendor\topthink\framework\tests\AppTest.php	/^class AppTest extends TestCase$/;"	c
SomeService	vendor\topthink\framework\tests\AppTest.php	/^class SomeService extends Service$/;"	c
app	vendor\topthink\framework\tests\AppTest.php	/^        $app = $this->prepareAppForInitialize($root, true);$/;"	v
app	vendor\topthink\framework\tests\AppTest.php	/^        $app = new App($rootPath);$/;"	v
app	vendor\topthink\framework\tests\AppTest.php	/^        $this->app = new App();$/;"	v
app	vendor\topthink\framework\tests\AppTest.php	/^    protected $app;$/;"	v
appPath	vendor\topthink\framework\tests\AppTest.php	/^        $appPath = $rootPath . 'app' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR;$/;"	v
bind	vendor\topthink\framework\tests\AppTest.php	/^    public $bind = [$/;"	v
boot	vendor\topthink\framework\tests\AppTest.php	/^    public function boot()$/;"	f
debug	vendor\topthink\framework\tests\AppTest.php	/^    protected function prepareAppForInitialize(vfsStreamDirectory $root, $debug = true)$/;"	v
env	vendor\topthink\framework\tests\AppTest.php	/^        $env = m::mock(Env::class);$/;"	v
event	vendor\topthink\framework\tests\AppTest.php	/^        $event = m::mock(Event::class);$/;"	v
initializer	vendor\topthink\framework\tests\AppTest.php	/^        $initializer = m::mock();$/;"	v
initializers	vendor\topthink\framework\tests\AppTest.php	/^            $this->initializers = [$initializer->mockery_getName()];$/;"	v
namespace	vendor\topthink\framework\tests\AppTest.php	/^        $namespace = 'test';$/;"	v
prepareAppForInitialize	vendor\topthink\framework\tests\AppTest.php	/^    protected function prepareAppForInitialize(vfsStreamDirectory $root, $debug = true)$/;"	f
register	vendor\topthink\framework\tests\AppTest.php	/^    public function register()$/;"	f
root	vendor\topthink\framework\tests\AppTest.php	/^        $root = vfsStream::setup('rootDir', null, [$/;"	v
rootPath	vendor\topthink\framework\tests\AppTest.php	/^        $rootPath = $root->url() . DIRECTORY_SEPARATOR;$/;"	v
rootPath	vendor\topthink\framework\tests\AppTest.php	/^        $rootPath = __DIR__ . DIRECTORY_SEPARATOR;$/;"	v
runtimePath	vendor\topthink\framework\tests\AppTest.php	/^        $runtimePath = $rootPath . 'runtime' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR;$/;"	v
service	vendor\topthink\framework\tests\AppTest.php	/^        $service = m::mock(SomeService::class);$/;"	v
service2	vendor\topthink\framework\tests\AppTest.php	/^        $service2 = m::mock(SomeService::class);$/;"	v
setUp	vendor\topthink\framework\tests\AppTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\AppTest.php	/^    protected function tearDown(): void$/;"	f
testDebug	vendor\topthink\framework\tests\AppTest.php	/^    public function testDebug()$/;"	f
testFactory	vendor\topthink\framework\tests\AppTest.php	/^    public function testFactory()$/;"	f
testInitialize	vendor\topthink\framework\tests\AppTest.php	/^    public function testInitialize()$/;"	f
testNamespace	vendor\topthink\framework\tests\AppTest.php	/^    public function testNamespace()$/;"	f
testParseClass	vendor\topthink\framework\tests\AppTest.php	/^    public function testParseClass()$/;"	f
testPath	vendor\topthink\framework\tests\AppTest.php	/^    public function testPath()$/;"	f
testService	vendor\topthink\framework\tests\AppTest.php	/^    public function testService()$/;"	f
testVersion	vendor\topthink\framework\tests\AppTest.php	/^    public function testVersion()$/;"	f
CacheTest	vendor\topthink\framework\tests\CacheTest.php	/^class CacheTest extends TestCase$/;"	c
app	vendor\topthink\framework\tests\CacheTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\CacheTest.php	/^    protected $app;$/;"	v
cache	vendor\topthink\framework\tests\CacheTest.php	/^        $this->cache = new Cache($this->app);$/;"	v
cache	vendor\topthink\framework\tests\CacheTest.php	/^    protected $cache;$/;"	v
channel1	vendor\topthink\framework\tests\CacheTest.php	/^        $channel1 = $this->cache->store('single');$/;"	v
channel2	vendor\topthink\framework\tests\CacheTest.php	/^        $channel2 = $this->cache->store('single');$/;"	v
config	vendor\topthink\framework\tests\CacheTest.php	/^        $config = [$/;"	v
config	vendor\topthink\framework\tests\CacheTest.php	/^        $this->config = m::mock(Config::class)->makePartial();$/;"	v
config	vendor\topthink\framework\tests\CacheTest.php	/^    protected $config;$/;"	v
redis	vendor\topthink\framework\tests\CacheTest.php	/^        $redis = m::mock('overload:\\Predis\\Client');$/;"	v
root	vendor\topthink\framework\tests\CacheTest.php	/^        $root = vfsStream::setup();$/;"	v
setUp	vendor\topthink\framework\tests\CacheTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\CacheTest.php	/^    protected function tearDown(): void$/;"	f
testCacheManagerInstances	vendor\topthink\framework\tests\CacheTest.php	/^    public function testCacheManagerInstances()$/;"	f
testFileCache	vendor\topthink\framework\tests\CacheTest.php	/^    public function testFileCache()$/;"	f
testGetConfig	vendor\topthink\framework\tests\CacheTest.php	/^    public function testGetConfig()$/;"	f
testRedisCache	vendor\topthink\framework\tests\CacheTest.php	/^    public function testRedisCache()$/;"	f
ConfigTest	vendor\topthink\framework\tests\ConfigTest.php	/^class ConfigTest extends TestCase$/;"	c
config	vendor\topthink\framework\tests\ConfigTest.php	/^        $config = new Config();$/;"	v
file	vendor\topthink\framework\tests\ConfigTest.php	/^        $file = vfsStream::newFile('test.php')->setContent("<?php return ['key1'=> 'value1','key2'=>'value2'];");$/;"	v
root	vendor\topthink\framework\tests\ConfigTest.php	/^        $root = vfsStream::setup();$/;"	v
testLoad	vendor\topthink\framework\tests\ConfigTest.php	/^    public function testLoad()$/;"	f
testSetAndGet	vendor\topthink\framework\tests\ConfigTest.php	/^    public function testSetAndGet()$/;"	f
ContainerTest	vendor\topthink\framework\tests\ContainerTest.php	/^class ContainerTest extends TestCase$/;"	c
SomeClass	vendor\topthink\framework\tests\ContainerTest.php	/^class SomeClass$/;"	c
Taylor	vendor\topthink\framework\tests\ContainerTest.php	/^class Taylor$/;"	c
__construct	vendor\topthink\framework\tests\ContainerTest.php	/^    public function __construct($name)$/;"	f
__construct	vendor\topthink\framework\tests\ContainerTest.php	/^    public function __construct(Container $container)$/;"	f
__make	vendor\topthink\framework\tests\ContainerTest.php	/^    public static function __make()$/;"	f
class	vendor\topthink\framework\tests\ContainerTest.php	/^        foreach ($container as $class => $instance) {$/;"	v
container	vendor\topthink\framework\tests\ContainerTest.php	/^        $container = $this->resolveContainer();$/;"	v
container	vendor\topthink\framework\tests\ContainerTest.php	/^        $container = new Container();$/;"	v
container	vendor\topthink\framework\tests\ContainerTest.php	/^        $container = new Container;$/;"	v
container	vendor\topthink\framework\tests\ContainerTest.php	/^        $this->container = $container;$/;"	v
container	vendor\topthink\framework\tests\ContainerTest.php	/^    public $container;$/;"	v
count	vendor\topthink\framework\tests\ContainerTest.php	/^    public $count = 0;$/;"	v
key2	vendor\topthink\framework\tests\ContainerTest.php	/^        $container->invoke(function (Container $container, stdClass $stdObject, $key1, $lowKey, $key2 = 'default') use ($stdClass) {$/;"	v
name	vendor\topthink\framework\tests\ContainerTest.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\framework\tests\ContainerTest.php	/^    public $name;$/;"	v
object	vendor\topthink\framework\tests\ContainerTest.php	/^        $object = $container->invokeClass(SomeClass::class);$/;"	v
object	vendor\topthink\framework\tests\ContainerTest.php	/^        $object = new stdClass();$/;"	v
protectionFun	vendor\topthink\framework\tests\ContainerTest.php	/^    protected function protectionFun()$/;"	f
reflect	vendor\topthink\framework\tests\ContainerTest.php	/^        $reflect = new ReflectionMethod($container, 'exists');$/;"	v
resolveContainer	vendor\topthink\framework\tests\ContainerTest.php	/^    protected function resolveContainer()$/;"	f
some	vendor\topthink\framework\tests\ContainerTest.php	/^    public function some(Container $container)$/;"	f
someClass	vendor\topthink\framework\tests\ContainerTest.php	/^        $someClass = $container->invokeClass(SomeClass::class);$/;"	v
stdClass	vendor\topthink\framework\tests\ContainerTest.php	/^        $stdClass = new stdClass();$/;"	v
stub	vendor\topthink\framework\tests\ContainerTest.php	/^        $stub = $this->createMock(Taylor::class);$/;"	v
taylor	vendor\topthink\framework\tests\ContainerTest.php	/^        $taylor = $container->make(Taylor::class);$/;"	v
tearDown	vendor\topthink\framework\tests\ContainerTest.php	/^    protected function tearDown(): void$/;"	f
test	vendor\topthink\framework\tests\ContainerTest.php	/^    public static function test(Container $container)$/;"	f
testAutoConcreteResolution	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testAutoConcreteResolution()$/;"	f
testBind	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testBind()$/;"	f
testClosureResolution	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testClosureResolution()$/;"	f
testExist	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testExist()$/;"	f
testGet	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testGet()$/;"	f
testGetAndSetInstance	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testGetAndSetInstance()$/;"	f
testInstance	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testInstance()$/;"	f
testInvoke	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testInvoke()$/;"	f
testInvokeClassNotExists	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testInvokeClassNotExists()$/;"	f
testInvokeFunctionWithoutMethodThrowsException	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testInvokeFunctionWithoutMethodThrowsException()$/;"	f
testInvokeMethodNotExists	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testInvokeMethodNotExists()$/;"	f
testInvokeProtectionMethod	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testInvokeProtectionMethod()$/;"	f
testResolving	vendor\topthink\framework\tests\ContainerTest.php	/^    public function testResolving()$/;"	f
DbTest	vendor\topthink\framework\tests\DbTest.php	/^class DbTest extends TestCase$/;"	c
cache	vendor\topthink\framework\tests\DbTest.php	/^        $cache  = m::mock(Cache::class);$/;"	v
callback	vendor\topthink\framework\tests\DbTest.php	/^        $callback = function () {$/;"	v
config	vendor\topthink\framework\tests\DbTest.php	/^        $config = m::mock(Config::class);$/;"	v
db	vendor\topthink\framework\tests\DbTest.php	/^        $db = Db::__make($event, $config, $log, $cache);$/;"	v
event	vendor\topthink\framework\tests\DbTest.php	/^        $event  = m::mock(Event::class);$/;"	v
log	vendor\topthink\framework\tests\DbTest.php	/^        $log    = m::mock(Log::class);$/;"	v
tearDown	vendor\topthink\framework\tests\DbTest.php	/^    protected function tearDown(): void$/;"	f
testMake	vendor\topthink\framework\tests\DbTest.php	/^    public function testMake()$/;"	f
EnvTest	vendor\topthink\framework\tests\EnvTest.php	/^class EnvTest extends TestCase$/;"	c
env	vendor\topthink\framework\tests\EnvTest.php	/^        $env = new Env();$/;"	v
envFile	vendor\topthink\framework\tests\EnvTest.php	/^        $envFile = vfsStream::newFile('.env')->setContent("key1=value1\\nkey2=value2");$/;"	v
root	vendor\topthink\framework\tests\EnvTest.php	/^        $root    = vfsStream::setup();$/;"	v
testEnvFile	vendor\topthink\framework\tests\EnvTest.php	/^    public function testEnvFile()$/;"	f
testHasEnv	vendor\topthink\framework\tests\EnvTest.php	/^    public function testHasEnv()$/;"	f
testServerEnv	vendor\topthink\framework\tests\EnvTest.php	/^    public function testServerEnv()$/;"	f
testSetEnv	vendor\topthink\framework\tests\EnvTest.php	/^    public function testSetEnv()$/;"	f
EventTest	vendor\topthink\framework\tests\EventTest.php	/^class EventTest extends TestCase$/;"	c
TestListener	vendor\topthink\framework\tests\EventTest.php	/^class TestListener$/;"	c
app	vendor\topthink\framework\tests\EventTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\EventTest.php	/^    protected $app;$/;"	v
config	vendor\topthink\framework\tests\EventTest.php	/^        $this->config = m::mock(Config::class)->makePartial();$/;"	v
config	vendor\topthink\framework\tests\EventTest.php	/^    protected $config;$/;"	v
event	vendor\topthink\framework\tests\EventTest.php	/^        $this->event = new Event($this->app);$/;"	v
event	vendor\topthink\framework\tests\EventTest.php	/^    protected $event;$/;"	v
handle	vendor\topthink\framework\tests\EventTest.php	/^    public function handle()$/;"	f
listener	vendor\topthink\framework\tests\EventTest.php	/^        $listener = m::mock("overload:SomeListener", TestListener::class);$/;"	v
onBar	vendor\topthink\framework\tests\EventTest.php	/^    public function onBar()$/;"	f
onFoo	vendor\topthink\framework\tests\EventTest.php	/^    public function onFoo()$/;"	f
setUp	vendor\topthink\framework\tests\EventTest.php	/^    protected function setUp()$/;"	f
subscribe	vendor\topthink\framework\tests\EventTest.php	/^    public function subscribe()$/;"	f
tearDown	vendor\topthink\framework\tests\EventTest.php	/^    protected function tearDown(): void$/;"	f
testAutoObserve	vendor\topthink\framework\tests\EventTest.php	/^    public function testAutoObserve()$/;"	f
testBasic	vendor\topthink\framework\tests\EventTest.php	/^    public function testBasic()$/;"	f
testClassListener	vendor\topthink\framework\tests\EventTest.php	/^    public function testClassListener()$/;"	f
testOnceEvent	vendor\topthink\framework\tests\EventTest.php	/^    public function testOnceEvent()$/;"	f
testSubscribe	vendor\topthink\framework\tests\EventTest.php	/^    public function testSubscribe()$/;"	f
testWithoutEvent	vendor\topthink\framework\tests\EventTest.php	/^    public function testWithoutEvent()$/;"	f
FilesystemTest	vendor\topthink\framework\tests\FilesystemTest.php	/^class FilesystemTest extends TestCase$/;"	c
NullDriver	vendor\topthink\framework\tests\FilesystemTest.php	/^class NullDriver extends Driver$/;"	c
app	vendor\topthink\framework\tests\FilesystemTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected $app;$/;"	v
cache	vendor\topthink\framework\tests\FilesystemTest.php	/^        $cache = m::mock(Cache::class);$/;"	v
cacheDriver	vendor\topthink\framework\tests\FilesystemTest.php	/^        $cacheDriver = m::mock(File::class);$/;"	v
config	vendor\topthink\framework\tests\FilesystemTest.php	/^        $this->config = m::mock(Config::class);$/;"	v
config	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected $config;$/;"	v
createAdapter	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected function createAdapter(): AdapterInterface$/;"	f
file	vendor\topthink\framework\tests\FilesystemTest.php	/^        $file = m::mock(\\think\\File::class);$/;"	v
filesystem	vendor\topthink\framework\tests\FilesystemTest.php	/^        $this->filesystem = new Filesystem($this->app);$/;"	v
filesystem	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected $filesystem;$/;"	v
root	vendor\topthink\framework\tests\FilesystemTest.php	/^        $root = vfsStream::setup('rootDir', null, [$/;"	v
root	vendor\topthink\framework\tests\FilesystemTest.php	/^        $this->root = vfsStream::setup('rootDir');$/;"	v
root	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected $root;$/;"	v
setUp	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\FilesystemTest.php	/^    protected function tearDown(): void$/;"	f
testCache	vendor\topthink\framework\tests\FilesystemTest.php	/^    public function testCache()$/;"	f
testDisk	vendor\topthink\framework\tests\FilesystemTest.php	/^    public function testDisk()$/;"	f
testPutFile	vendor\topthink\framework\tests\FilesystemTest.php	/^    public function testPutFile()$/;"	f
HttpTest	vendor\topthink\framework\tests\HttpTest.php	/^class HttpTest extends TestCase$/;"	c
app	vendor\topthink\framework\tests\HttpTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\HttpTest.php	/^    protected $app;$/;"	v
console	vendor\topthink\framework\tests\HttpTest.php	/^        $console = m::mock(Console::class);$/;"	v
event	vendor\topthink\framework\tests\HttpTest.php	/^        $event    = m::mock(Event::class);$/;"	v
exception	vendor\topthink\framework\tests\HttpTest.php	/^        $exception = new Exception();$/;"	v
handle	vendor\topthink\framework\tests\HttpTest.php	/^        $handle = m::mock(Handle::class);$/;"	v
http	vendor\topthink\framework\tests\HttpTest.php	/^        $this->http = m::mock(Http::class, [$this->app])->shouldAllowMockingProtectedMethods()->makePartial();$/;"	v
http	vendor\topthink\framework\tests\HttpTest.php	/^    protected $http;$/;"	v
log	vendor\topthink\framework\tests\HttpTest.php	/^        $log = m::mock(Log::class);$/;"	v
multiAppRunProvider	vendor\topthink\framework\tests\HttpTest.php	/^    public function multiAppRunProvider()$/;"	f
prepareApp	vendor\topthink\framework\tests\HttpTest.php	/^    protected function prepareApp($request, $response)$/;"	f
req	vendor\topthink\framework\tests\HttpTest.php	/^            return $req === $request;$/;"	v
request	vendor\topthink\framework\tests\HttpTest.php	/^        $request  = m::mock(Request::class)->makePartial();$/;"	v
request	vendor\topthink\framework\tests\HttpTest.php	/^        $request  = m::mock(Request::class);$/;"	v
request1	vendor\topthink\framework\tests\HttpTest.php	/^        $request1 = m::mock(Request::class)->makePartial();$/;"	v
request2	vendor\topthink\framework\tests\HttpTest.php	/^        $request2 = m::mock(Request::class)->makePartial();$/;"	v
request3	vendor\topthink\framework\tests\HttpTest.php	/^        $request3 = m::mock(Request::class)->makePartial();$/;"	v
request4	vendor\topthink\framework\tests\HttpTest.php	/^        $request4 = m::mock(Request::class)->makePartial();$/;"	v
request5	vendor\topthink\framework\tests\HttpTest.php	/^        $request5 = m::mock(Request::class)->makePartial();$/;"	v
response	vendor\topthink\framework\tests\HttpTest.php	/^        $response = m::mock(Response::class)->makePartial();$/;"	v
response	vendor\topthink\framework\tests\HttpTest.php	/^        $response = m::mock(Response::class);$/;"	v
root	vendor\topthink\framework\tests\HttpTest.php	/^        $root = vfsStream::setup('rootDir', null, [$/;"	v
route	vendor\topthink\framework\tests\HttpTest.php	/^        $route = m::mock(Route::class);$/;"	v
setUp	vendor\topthink\framework\tests\HttpTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\HttpTest.php	/^    protected function tearDown(): void$/;"	f
testEnd	vendor\topthink\framework\tests\HttpTest.php	/^    public function testEnd()$/;"	f
testRun	vendor\topthink\framework\tests\HttpTest.php	/^    public function testRun()$/;"	f
testRunWithException	vendor\topthink\framework\tests\HttpTest.php	/^    public function testRunWithException()$/;"	f
LogTest	vendor\topthink\framework\tests\LogTest.php	/^class LogTest extends TestCase$/;"	c
app	vendor\topthink\framework\tests\LogTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\LogTest.php	/^    protected $app;$/;"	v
channel1	vendor\topthink\framework\tests\LogTest.php	/^        $channel1 = $this->log->channel('single');$/;"	v
channel2	vendor\topthink\framework\tests\LogTest.php	/^        $channel2 = $this->log->channel('single');$/;"	v
config	vendor\topthink\framework\tests\LogTest.php	/^        $config = [$/;"	v
config	vendor\topthink\framework\tests\LogTest.php	/^        $this->config = m::mock(Config::class)->makePartial();$/;"	v
config	vendor\topthink\framework\tests\LogTest.php	/^    protected $config;$/;"	v
log	vendor\topthink\framework\tests\LogTest.php	/^        $this->log = new Log($this->app);$/;"	v
log	vendor\topthink\framework\tests\LogTest.php	/^    protected $log;$/;"	v
root	vendor\topthink\framework\tests\LogTest.php	/^        $root = vfsStream::setup();$/;"	v
setUp	vendor\topthink\framework\tests\LogTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\LogTest.php	/^    protected function tearDown(): void$/;"	f
testChannel	vendor\topthink\framework\tests\LogTest.php	/^    public function testChannel()$/;"	f
testFileLog	vendor\topthink\framework\tests\LogTest.php	/^    public function testFileLog()$/;"	f
testGetConfig	vendor\topthink\framework\tests\LogTest.php	/^    public function testGetConfig()$/;"	f
testLogManagerInstances	vendor\topthink\framework\tests\LogTest.php	/^    public function testLogManagerInstances()$/;"	f
testSave	vendor\topthink\framework\tests\LogTest.php	/^    public function testSave()$/;"	f
Foo	vendor\topthink\framework\tests\MiddlewareTest.php	/^class Foo$/;"	c
MiddlewareTest	vendor\topthink\framework\tests\MiddlewareTest.php	/^class MiddlewareTest extends TestCase$/;"	c
app	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\MiddlewareTest.php	/^    protected $app;$/;"	v
bar	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $bar = m::mock("overload:BarMiddleware");$/;"	v
config	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $this->config = m::mock(Config::class)->makePartial();$/;"	v
config	vendor\topthink\framework\tests\MiddlewareTest.php	/^    protected $config;$/;"	v
e	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $e = new Exception();$/;"	v
end	vendor\topthink\framework\tests\MiddlewareTest.php	/^    public function end(Response $response)$/;"	f
foo	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $foo = m::mock("overload:FooMiddleware", Foo::class);$/;"	v
handle	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $handle = m::mock(Handle::class);$/;"	v
middleware	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $this->middleware = new Middleware($this->app);$/;"	v
middleware	vendor\topthink\framework\tests\MiddlewareTest.php	/^    protected $middleware;$/;"	v
pipeline	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $this->assertInstanceOf(Pipeline::class, $pipeline = $this->middleware->pipeline());$/;"	v
request	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $request  = m::mock(Request::class);$/;"	v
response	vendor\topthink\framework\tests\MiddlewareTest.php	/^        $response = m::mock(Response::class);$/;"	v
setUp	vendor\topthink\framework\tests\MiddlewareTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\MiddlewareTest.php	/^    protected function tearDown(): void$/;"	f
testPipelineAndEnd	vendor\topthink\framework\tests\MiddlewareTest.php	/^    public function testPipelineAndEnd()$/;"	f
testSetMiddleware	vendor\topthink\framework\tests\MiddlewareTest.php	/^    public function testSetMiddleware()$/;"	f
SessionTest	vendor\topthink\framework\tests\SessionTest.php	/^class SessionTest extends TestCase$/;"	c
TestFileHandle	vendor\topthink\framework\tests\SessionTest.php	/^class TestFileHandle extends File$/;"	c
app	vendor\topthink\framework\tests\SessionTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\SessionTest.php	/^    protected $app;$/;"	v
cache	vendor\topthink\framework\tests\SessionTest.php	/^        $cache = m::mock(\\think\\Cache::class);$/;"	v
config	vendor\topthink\framework\tests\SessionTest.php	/^        $this->config = m::mock(Config::class)->makePartial();$/;"	v
config	vendor\topthink\framework\tests\SessionTest.php	/^    protected $config;$/;"	v
data	vendor\topthink\framework\tests\SessionTest.php	/^        $data = [$/;"	v
handler	vendor\topthink\framework\tests\SessionTest.php	/^        $handler = new Cache($cache, ['store' => 'redis']);$/;"	v
handler	vendor\topthink\framework\tests\SessionTest.php	/^        $handler = new TestFileHandle($this->app, [$/;"	v
handler	vendor\topthink\framework\tests\SessionTest.php	/^        $this->handler = m::mock('overload:' . $handlerClass, SessionHandlerInterface::class);$/;"	v
handler	vendor\topthink\framework\tests\SessionTest.php	/^    protected $handler;$/;"	v
handlerClass	vendor\topthink\framework\tests\SessionTest.php	/^        $handlerClass = "\\\\think\\\\session\\\\driver\\\\Test" . Str::random(10);$/;"	v
id	vendor\topthink\framework\tests\SessionTest.php	/^        $id = md5(uniqid());$/;"	v
root	vendor\topthink\framework\tests\SessionTest.php	/^        $root = vfsStream::setup();$/;"	v
session	vendor\topthink\framework\tests\SessionTest.php	/^        $this->session = new Session($this->app);$/;"	v
session	vendor\topthink\framework\tests\SessionTest.php	/^    protected $session;$/;"	v
setUp	vendor\topthink\framework\tests\SessionTest.php	/^    protected function setUp()$/;"	f
store	vendor\topthink\framework\tests\SessionTest.php	/^        $store = m::mock(Driver::class);$/;"	v
tearDown	vendor\topthink\framework\tests\SessionTest.php	/^    protected function tearDown(): void$/;"	f
testCacheHandler	vendor\topthink\framework\tests\SessionTest.php	/^    public function testCacheHandler()$/;"	f
testClear	vendor\topthink\framework\tests\SessionTest.php	/^    public function testClear()$/;"	f
testDestroy	vendor\topthink\framework\tests\SessionTest.php	/^    public function testDestroy()$/;"	f
testFileHandler	vendor\topthink\framework\tests\SessionTest.php	/^    public function testFileHandler()$/;"	f
testFlash	vendor\topthink\framework\tests\SessionTest.php	/^    public function testFlash()$/;"	f
testLoadData	vendor\topthink\framework\tests\SessionTest.php	/^    public function testLoadData()$/;"	f
testSave	vendor\topthink\framework\tests\SessionTest.php	/^    public function testSave()$/;"	f
testSetName	vendor\topthink\framework\tests\SessionTest.php	/^    public function testSetName()$/;"	f
writeFile	vendor\topthink\framework\tests\SessionTest.php	/^    protected function writeFile($path, $content): bool$/;"	f
TestTemplate	vendor\topthink\framework\tests\ViewTest.php	/^class TestTemplate implements TemplateHandlerInterface$/;"	c
ViewTest	vendor\topthink\framework\tests\ViewTest.php	/^class ViewTest extends TestCase$/;"	c
app	vendor\topthink\framework\tests\ViewTest.php	/^        $this->app = m::mock(App::class)->makePartial();$/;"	v
app	vendor\topthink\framework\tests\ViewTest.php	/^    protected $app;$/;"	v
config	vendor\topthink\framework\tests\ViewTest.php	/^        $this->config = m::mock(Config::class)->makePartial();$/;"	v
config	vendor\topthink\framework\tests\ViewTest.php	/^    protected $config;$/;"	v
config	vendor\topthink\framework\tests\ViewTest.php	/^    public function config(array $config): void$/;"	f
data	vendor\topthink\framework\tests\ViewTest.php	/^    public function display(string $content, array $data = []): void$/;"	v
data	vendor\topthink\framework\tests\ViewTest.php	/^    public function fetch(string $template, array $data = []): void$/;"	v
display	vendor\topthink\framework\tests\ViewTest.php	/^    public function display(string $content, array $data = []): void$/;"	f
exists	vendor\topthink\framework\tests\ViewTest.php	/^    public function exists(string $template): bool$/;"	f
fetch	vendor\topthink\framework\tests\ViewTest.php	/^    public function fetch(string $template, array $data = []): void$/;"	f
getConfig	vendor\topthink\framework\tests\ViewTest.php	/^    public function getConfig(string $name)$/;"	f
setUp	vendor\topthink\framework\tests\ViewTest.php	/^    protected function setUp()$/;"	f
tearDown	vendor\topthink\framework\tests\ViewTest.php	/^    protected function tearDown(): void$/;"	f
testAssignData	vendor\topthink\framework\tests\ViewTest.php	/^    public function testAssignData()$/;"	f
testRender	vendor\topthink\framework\tests\ViewTest.php	/^    public function testRender()$/;"	f
view	vendor\topthink\framework\tests\ViewTest.php	/^        $this->view = new View($this->app);$/;"	v
view	vendor\topthink\framework\tests\ViewTest.php	/^    protected $view;$/;"	v
Collection	vendor\topthink\think-helper\src\Collection.php	/^class Collection implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable, Arrayable, Jsonable$/;"	c
__construct	vendor\topthink\think-helper\src\Collection.php	/^    public function __construct($items = [])$/;"	f
__toString	vendor\topthink\think-helper\src\Collection.php	/^    public function __toString()$/;"	f
a	vendor\topthink\think-helper\src\Collection.php	/^            return $a == $b ? 0 : (($a < $b) ? -1 : 1);$/;"	v
all	vendor\topthink\think-helper\src\Collection.php	/^    public function all(): array$/;"	f
callback	vendor\topthink\think-helper\src\Collection.php	/^        $callback = $callback ?: function ($a, $b) {$/;"	v
callback	vendor\topthink\think-helper\src\Collection.php	/^    public function filter(callable $callback = null)$/;"	v
callback	vendor\topthink\think-helper\src\Collection.php	/^    public function first(callable $callback = null, $default = null)$/;"	v
callback	vendor\topthink\think-helper\src\Collection.php	/^    public function last(callable $callback = null, $default = null)$/;"	v
callback	vendor\topthink\think-helper\src\Collection.php	/^    public function sort(callable $callback = null)$/;"	v
chunk	vendor\topthink\think-helper\src\Collection.php	/^    public function chunk(int $size, bool $preserveKeys = false)$/;"	f
chunks	vendor\topthink\think-helper\src\Collection.php	/^        $chunks = [];$/;"	v
column	vendor\topthink\think-helper\src\Collection.php	/^    public function column(string $columnKey, string $indexKey = null)$/;"	f
convertToArray	vendor\topthink\think-helper\src\Collection.php	/^    protected function convertToArray($items): array$/;"	f
count	vendor\topthink\think-helper\src\Collection.php	/^    public function count()$/;"	f
dictionary	vendor\topthink\think-helper\src\Collection.php	/^        $dictionary = $this->dictionary($items, $indexKey);$/;"	v
dictionary	vendor\topthink\think-helper\src\Collection.php	/^    public function dictionary($items = null, string &$indexKey = null)$/;"	f
diff	vendor\topthink\think-helper\src\Collection.php	/^        $diff       = [];$/;"	v
diff	vendor\topthink\think-helper\src\Collection.php	/^    public function diff($items, string $indexKey = null)$/;"	f
each	vendor\topthink\think-helper\src\Collection.php	/^    public function each(callable $callback)$/;"	f
fieldA	vendor\topthink\think-helper\src\Collection.php	/^            $fieldA = $a[$field] ?? null;$/;"	v
fieldB	vendor\topthink\think-helper\src\Collection.php	/^            $fieldB = $b[$field] ?? null;$/;"	v
filter	vendor\topthink\think-helper\src\Collection.php	/^    public function filter(callable $callback = null)$/;"	f
first	vendor\topthink\think-helper\src\Collection.php	/^    public function first(callable $callback = null, $default = null)$/;"	f
flip	vendor\topthink\think-helper\src\Collection.php	/^    public function flip()$/;"	f
getIterator	vendor\topthink\think-helper\src\Collection.php	/^    public function getIterator()$/;"	f
indexKey	vendor\topthink\think-helper\src\Collection.php	/^            $indexKey = is_array($items[0]) ? 'id' : $items[0]->getPk();$/;"	v
indexKey	vendor\topthink\think-helper\src\Collection.php	/^    public function column(string $columnKey, string $indexKey = null)$/;"	v
indexKey	vendor\topthink\think-helper\src\Collection.php	/^    public function diff($items, string $indexKey = null)$/;"	v
indexKey	vendor\topthink\think-helper\src\Collection.php	/^    public function intersect($items, string $indexKey = null)$/;"	v
initial	vendor\topthink\think-helper\src\Collection.php	/^    public function reduce(callable $callback, $initial = null)$/;"	v
intersect	vendor\topthink\think-helper\src\Collection.php	/^        $intersect  = [];$/;"	v
intersect	vendor\topthink\think-helper\src\Collection.php	/^    public function intersect($items, string $indexKey = null)$/;"	f
isEmpty	vendor\topthink\think-helper\src\Collection.php	/^    public function isEmpty(): bool$/;"	f
items	vendor\topthink\think-helper\src\Collection.php	/^            $items = $items->all();$/;"	v
items	vendor\topthink\think-helper\src\Collection.php	/^            $this->items = [$key => $value] + $this->items;$/;"	v
items	vendor\topthink\think-helper\src\Collection.php	/^        $items = $this->items;$/;"	v
items	vendor\topthink\think-helper\src\Collection.php	/^        $items = is_null($items) ? $this->items : $items;$/;"	v
items	vendor\topthink\think-helper\src\Collection.php	/^        $this->items = $this->convertToArray($items);$/;"	v
items	vendor\topthink\think-helper\src\Collection.php	/^    protected $items = [];$/;"	v
jsonSerialize	vendor\topthink\think-helper\src\Collection.php	/^    public function jsonSerialize()$/;"	f
key	vendor\topthink\think-helper\src\Collection.php	/^        foreach ($this->items as $key => $item) {$/;"	v
key	vendor\topthink\think-helper\src\Collection.php	/^    public function push($value, string $key = null): void$/;"	v
key	vendor\topthink\think-helper\src\Collection.php	/^    public function unshift($value, string $key = null): void$/;"	v
keys	vendor\topthink\think-helper\src\Collection.php	/^    public function keys()$/;"	f
last	vendor\topthink\think-helper\src\Collection.php	/^    public function last(callable $callback = null, $default = null)$/;"	f
length	vendor\topthink\think-helper\src\Collection.php	/^    public function slice(int $offset, int $length = null, bool $preserveKeys = false)$/;"	v
make	vendor\topthink\think-helper\src\Collection.php	/^    public static function make($items = [])$/;"	f
map	vendor\topthink\think-helper\src\Collection.php	/^    public function map(callable $callback)$/;"	f
merge	vendor\topthink\think-helper\src\Collection.php	/^    public function merge($items)$/;"	f
offsetExists	vendor\topthink\think-helper\src\Collection.php	/^    public function offsetExists($offset)$/;"	f
offsetGet	vendor\topthink\think-helper\src\Collection.php	/^    public function offsetGet($offset)$/;"	f
offsetSet	vendor\topthink\think-helper\src\Collection.php	/^    public function offsetSet($offset, $value)$/;"	f
offsetUnset	vendor\topthink\think-helper\src\Collection.php	/^    public function offsetUnset($offset)$/;"	f
operator	vendor\topthink\think-helper\src\Collection.php	/^            $operator = '=';$/;"	v
options	vendor\topthink\think-helper\src\Collection.php	/^    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string$/;"	v
order	vendor\topthink\think-helper\src\Collection.php	/^    public function order(string $field, string $order = null)$/;"	f
order	vendor\topthink\think-helper\src\Collection.php	/^    public function order(string $field, string $order = null)$/;"	v
pop	vendor\topthink\think-helper\src\Collection.php	/^    public function pop()$/;"	f
preserveKeys	vendor\topthink\think-helper\src\Collection.php	/^    public function chunk(int $size, bool $preserveKeys = false)$/;"	v
push	vendor\topthink\think-helper\src\Collection.php	/^    public function push($value, string $key = null): void$/;"	f
reduce	vendor\topthink\think-helper\src\Collection.php	/^    public function reduce(callable $callback, $initial = null)$/;"	f
result	vendor\topthink\think-helper\src\Collection.php	/^                    return $result == $value;$/;"	v
result	vendor\topthink\think-helper\src\Collection.php	/^                    return $result === $value;$/;"	v
result	vendor\topthink\think-helper\src\Collection.php	/^                $result = $data[$field] ?? null;$/;"	v
result	vendor\topthink\think-helper\src\Collection.php	/^                $result = $data[$field][$relation] ?? null;$/;"	v
result	vendor\topthink\think-helper\src\Collection.php	/^            $result = $callback($item, $key);$/;"	v
reverse	vendor\topthink\think-helper\src\Collection.php	/^    public function reverse()$/;"	f
shift	vendor\topthink\think-helper\src\Collection.php	/^    public function shift()$/;"	f
shuffle	vendor\topthink\think-helper\src\Collection.php	/^    public function shuffle()$/;"	f
slice	vendor\topthink\think-helper\src\Collection.php	/^    public function slice(int $offset, int $length = null, bool $preserveKeys = false)$/;"	f
sort	vendor\topthink\think-helper\src\Collection.php	/^    public function sort(callable $callback = null)$/;"	f
toArray	vendor\topthink\think-helper\src\Collection.php	/^    public function toArray(): array$/;"	f
toJson	vendor\topthink\think-helper\src\Collection.php	/^    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string$/;"	f
unshift	vendor\topthink\think-helper\src\Collection.php	/^    public function unshift($value, string $key = null): void$/;"	f
value	vendor\topthink\think-helper\src\Collection.php	/^            $value    = $operator;$/;"	v
value	vendor\topthink\think-helper\src\Collection.php	/^    public function where(string $field, $operator, $value = null)$/;"	v
values	vendor\topthink\think-helper\src\Collection.php	/^    public function values()$/;"	f
where	vendor\topthink\think-helper\src\Collection.php	/^    public function where(string $field, $operator, $value = null)$/;"	f
whereBetween	vendor\topthink\think-helper\src\Collection.php	/^    public function whereBetween(string $field, $value)$/;"	f
whereIn	vendor\topthink\think-helper\src\Collection.php	/^    public function whereIn(string $field, array $value)$/;"	f
whereLike	vendor\topthink\think-helper\src\Collection.php	/^    public function whereLike(string $field, string $value)$/;"	f
whereNotBetween	vendor\topthink\think-helper\src\Collection.php	/^    public function whereNotBetween(string $field, $value)$/;"	f
whereNotIn	vendor\topthink\think-helper\src\Collection.php	/^    public function whereNotIn(string $field, array $value)$/;"	f
whereNotLike	vendor\topthink\think-helper\src\Collection.php	/^    public function whereNotLike(string $field, string $value)$/;"	f
Arrayable	vendor\topthink\think-helper\src\contract\Arrayable.php	/^interface Arrayable$/;"	i
toArray	vendor\topthink\think-helper\src\contract\Arrayable.php	/^    public function toArray(): array;$/;"	f
Jsonable	vendor\topthink\think-helper\src\contract\Jsonable.php	/^interface Jsonable$/;"	i
options	vendor\topthink\think-helper\src\contract\Jsonable.php	/^    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string;$/;"	v
toJson	vendor\topthink\think-helper\src\contract\Jsonable.php	/^    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string;$/;"	f
callback	vendor\topthink\think-helper\src\helper.php	/^    function tap($value, $callback = null)$/;"	v
class	vendor\topthink\think-helper\src\helper.php	/^            $class = get_class($class);$/;"	v
class	vendor\topthink\think-helper\src\helper.php	/^        $class = is_object($class) ? get_class($class) : $class;$/;"	v
class_basename	vendor\topthink\think-helper\src\helper.php	/^    function class_basename($class): string$/;"	f
class_uses_recursive	vendor\topthink\think-helper\src\helper.php	/^    function class_uses_recursive($class): array$/;"	f
classes	vendor\topthink\think-helper\src\helper.php	/^        $classes = array_merge([$class => $class], class_parents($class));$/;"	v
collect	vendor\topthink\think-helper\src\helper.php	/^    function collect($value = null)$/;"	f
data_fill	vendor\topthink\think-helper\src\helper.php	/^    function data_fill(&$target, $key, $value)$/;"	f
data_get	vendor\topthink\think-helper\src\helper.php	/^    function data_get($target, $key, $default = null)$/;"	f
data_set	vendor\topthink\think-helper\src\helper.php	/^    function data_set(&$target, $key, $value, $overwrite = true)$/;"	f
default	vendor\topthink\think-helper\src\helper.php	/^    function data_get($target, $key, $default = null)$/;"	v
inner	vendor\topthink\think-helper\src\helper.php	/^                    $inner = $value;$/;"	v
key	vendor\topthink\think-helper\src\helper.php	/^        $key = is_array($key) ? $key : explode('.', $key);$/;"	v
overwrite	vendor\topthink\think-helper\src\helper.php	/^    function data_set(&$target, $key, $value, $overwrite = true)$/;"	v
result	vendor\topthink\think-helper\src\helper.php	/^                $result = [];$/;"	v
results	vendor\topthink\think-helper\src\helper.php	/^        $results = [];$/;"	v
segments	vendor\topthink\think-helper\src\helper.php	/^        $segments = is_array($key) ? $key : explode('.', $key);$/;"	v
tap	vendor\topthink\think-helper\src\helper.php	/^    function tap($value, $callback = null)$/;"	f
target	vendor\topthink\think-helper\src\helper.php	/^                    $target = $target->all();$/;"	v
target	vendor\topthink\think-helper\src\helper.php	/^                $target = $target->{$segment};$/;"	v
target	vendor\topthink\think-helper\src\helper.php	/^                $target = $target[$segment];$/;"	v
target	vendor\topthink\think-helper\src\helper.php	/^                $target = [];$/;"	v
target	vendor\topthink\think-helper\src\helper.php	/^            $target = [];$/;"	v
throw_if	vendor\topthink\think-helper\src\helper.php	/^    function throw_if($condition, $exception, ...$parameters)$/;"	f
throw_unless	vendor\topthink\think-helper\src\helper.php	/^    function throw_unless($condition, $exception, ...$parameters)$/;"	f
trait_uses_recursive	vendor\topthink\think-helper\src\helper.php	/^    function trait_uses_recursive(string $trait): array$/;"	f
traits	vendor\topthink\think-helper\src\helper.php	/^        $traits = class_uses($trait);$/;"	v
value	vendor\topthink\think-helper\src\helper.php	/^    function value($value)$/;"	f
Arr	vendor\topthink\think-helper\src\helper\Arr.php	/^class Arr$/;"	c
accessible	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function accessible($value)$/;"	f
add	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function add($array, $key, $value)$/;"	f
append	vendor\topthink\think-helper\src\helper\Arr.php	/^            $append = [];$/;"	v
array	vendor\topthink\think-helper\src\helper\Arr.php	/^                    $array = &$array[$part];$/;"	v
array	vendor\topthink\think-helper\src\helper\Arr.php	/^                $array = $array[$segment];$/;"	v
array	vendor\topthink\think-helper\src\helper\Arr.php	/^            $array = &$array[$key];$/;"	v
array	vendor\topthink\think-helper\src\helper\Arr.php	/^            $array = &$original;$/;"	v
array	vendor\topthink\think-helper\src\helper\Arr.php	/^            $array = [$key => $value] + $array;$/;"	v
array	vendor\topthink\think-helper\src\helper\Arr.php	/^            return $array = $value;$/;"	v
callback	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function first($array, callable $callback = null, $default = null)$/;"	v
callback	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function last($array, callable $callback = null, $default = null)$/;"	v
callback	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function sort($array, $callback = null)$/;"	v
collapse	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function collapse($array)$/;"	f
count	vendor\topthink\think-helper\src\helper\Arr.php	/^        $count = count($array);$/;"	v
crossJoin	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function crossJoin(...$arrays)$/;"	f
default	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function get($array, $key, $default = null)$/;"	v
default	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function pull(&$array, $key, $default = null)$/;"	v
depth	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function flatten($array, $depth = INF)$/;"	v
divide	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function divide($array)$/;"	f
dot	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function dot($array, $prepend = '')$/;"	f
except	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function except($array, $keys)$/;"	f
exists	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function exists($array, $key)$/;"	f
explodePluckParameters	vendor\topthink\think-helper\src\helper\Arr.php	/^    protected static function explodePluckParameters($value, $key)$/;"	f
first	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function first($array, callable $callback = null, $default = null)$/;"	f
flatten	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function flatten($array, $depth = INF)$/;"	f
forget	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function forget(&$array, $keys)$/;"	f
get	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function get($array, $key, $default = null)$/;"	f
has	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function has($array, $keys)$/;"	f
index	vendor\topthink\think-helper\src\helper\Arr.php	/^        foreach ($arrays as $index => $array) {$/;"	v
isAssoc	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function isAssoc(array $array)$/;"	f
item	vendor\topthink\think-helper\src\helper\Arr.php	/^            $item = $item instanceof Collection ? $item->all() : $item;$/;"	v
itemKey	vendor\topthink\think-helper\src\helper\Arr.php	/^                    $itemKey = (string) $itemKey;$/;"	v
itemKey	vendor\topthink\think-helper\src\helper\Arr.php	/^                $itemKey = data_get($item, $key);$/;"	v
itemValue	vendor\topthink\think-helper\src\helper\Arr.php	/^            $itemValue = data_get($item, $value);$/;"	v
key	vendor\topthink\think-helper\src\helper\Arr.php	/^            $key = array_shift($keys);$/;"	v
key	vendor\topthink\think-helper\src\helper\Arr.php	/^        $key = is_null($key) || is_array($key) ? $key : explode('.', $key);$/;"	v
key	vendor\topthink\think-helper\src\helper\Arr.php	/^        foreach ($array as $key => $value) {$/;"	v
key	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function pluck($array, $value, $key = null)$/;"	v
key	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function prepend($array, $value, $key = null)$/;"	v
keys	vendor\topthink\think-helper\src\helper\Arr.php	/^        $keys = (array) $keys;$/;"	v
keys	vendor\topthink\think-helper\src\helper\Arr.php	/^        $keys = array_keys($array);$/;"	v
keys	vendor\topthink\think-helper\src\helper\Arr.php	/^        $keys = array_rand($array, $number);$/;"	v
keys	vendor\topthink\think-helper\src\helper\Arr.php	/^        $keys = explode('.', $key);$/;"	v
keys	vendor\topthink\think-helper\src\helper\Arr.php	/^        if (!$array || $keys === []) {$/;"	v
last	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function last($array, callable $callback = null, $default = null)$/;"	f
number	vendor\topthink\think-helper\src\helper\Arr.php	/^        if ((int) $number === 0) {$/;"	v
number	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function random($array, $number = null)$/;"	v
only	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function only($array, $keys)$/;"	f
original	vendor\topthink\think-helper\src\helper\Arr.php	/^        $original = &$array;$/;"	v
part	vendor\topthink\think-helper\src\helper\Arr.php	/^                $part = array_shift($parts);$/;"	v
parts	vendor\topthink\think-helper\src\helper\Arr.php	/^            $parts = explode('.', $key);$/;"	v
pluck	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function pluck($array, $value, $key = null)$/;"	f
prepend	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function dot($array, $prepend = '')$/;"	v
prepend	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function prepend($array, $value, $key = null)$/;"	f
pull	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function pull(&$array, $key, $default = null)$/;"	f
query	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function query($array)$/;"	f
random	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function random($array, $number = null)$/;"	f
requested	vendor\topthink\think-helper\src\helper\Arr.php	/^        $requested = is_null($number) ? 1 : $number;$/;"	v
result	vendor\topthink\think-helper\src\helper\Arr.php	/^                $result = array_merge($result, array_values($item));$/;"	v
result	vendor\topthink\think-helper\src\helper\Arr.php	/^                $result = array_merge($result, static::flatten($item, $depth - 1));$/;"	v
result	vendor\topthink\think-helper\src\helper\Arr.php	/^        $result = [];$/;"	v
results	vendor\topthink\think-helper\src\helper\Arr.php	/^                $results = array_merge($results, static::dot($value, $prepend . $key . '.'));$/;"	v
results	vendor\topthink\think-helper\src\helper\Arr.php	/^            $results = $append;$/;"	v
results	vendor\topthink\think-helper\src\helper\Arr.php	/^            $results = array_merge($results, $values);$/;"	v
results	vendor\topthink\think-helper\src\helper\Arr.php	/^        $results = [[]];$/;"	v
results	vendor\topthink\think-helper\src\helper\Arr.php	/^        $results = [];$/;"	v
seed	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function shuffle($array, $seed = null)$/;"	v
set	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function set(&$array, $key, $value)$/;"	f
shuffle	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function shuffle($array, $seed = null)$/;"	f
sort	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function sort($array, $callback = null)$/;"	f
sortRecursive	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function sortRecursive($array)$/;"	f
subKeyArray	vendor\topthink\think-helper\src\helper\Arr.php	/^                    $subKeyArray = $subKeyArray[$segment];$/;"	v
subKeyArray	vendor\topthink\think-helper\src\helper\Arr.php	/^            $subKeyArray = $array;$/;"	v
value	vendor\topthink\think-helper\src\helper\Arr.php	/^                $value = static::sortRecursive($value);$/;"	v
value	vendor\topthink\think-helper\src\helper\Arr.php	/^        $value = is_string($value) ? explode('.', $value) : $value;$/;"	v
value	vendor\topthink\think-helper\src\helper\Arr.php	/^        $value = static::get($array, $key, $default);$/;"	v
values	vendor\topthink\think-helper\src\helper\Arr.php	/^                $values = $values->all();$/;"	v
where	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function where($array, callable $callback)$/;"	f
wrap	vendor\topthink\think-helper\src\helper\Arr.php	/^    public static function wrap($value)$/;"	f
Str	vendor\topthink\think-helper\src\helper\Str.php	/^class Str$/;"	c
camel	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function camel(string $value): string$/;"	f
camelCache	vendor\topthink\think-helper\src\helper\Str.php	/^    protected static $camelCache = [];$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^                $chars = "们以我到他会作时要动国产的一是工就年阶义发成部民可出能方进在了不和有大这主中人上为来分生对于学下级地个用同行面说种过命度革而多子后自社加小机也经力线本电高量长党得实家定深法表着水理化争现所二起政三好十战无农使性前等反体合斗路图把结第里正新开论之物从当两些还天资事队批点育重其思与间内去因件日利相由压员气业代全组数果期导平各基或月毛然如应形想制心样干都向变关问比展那它最及外没看治提五解系林者米群头意只明四道马认次文通但条较克又公孔领军流入接席位情运器并飞原油放立题质指建区验活众很教决特此常石强极土少已根共直团统式转别造切九你取西持总料连任志观调七么山程百报更见必真保热委手改管处己将修支识病象几先老光专什六型具示复安带每东增则完风回南广劳轮科北打积车计给节做务被整联步类集号列温装即毫知轴研单色坚据速防史拉世设达尔场织历花受求传口断况采精金界品判参层止边清至万确究书" . $addChars;$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^                $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' . $addChars;$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^                $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' . $addChars;$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^                $chars = 'ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789' . $addChars;$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^                $chars = 'abcdefghijklmnopqrstuvwxyz' . $addChars;$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^                $chars = str_repeat('0123456789', 3);$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^            $chars = $type == 1 ? str_repeat($chars, $length) : str_repeat($chars, 5);$/;"	v
chars	vendor\topthink\think-helper\src\helper\Str.php	/^            $chars = str_shuffle($chars);$/;"	v
contains	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function contains(string $haystack, $needles): bool$/;"	f
delimiter	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function snake(string $value, string $delimiter = '_'): string$/;"	v
endsWith	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function endsWith(string $haystack, $needles): bool$/;"	f
key	vendor\topthink\think-helper\src\helper\Str.php	/^        $key = $value;$/;"	v
length	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function length(string $value): int$/;"	f
length	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function random(int $length = 6, int $type = null, string $addChars = ''): string$/;"	v
length	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function substr(string $string, int $start, int $length = null): string$/;"	v
lower	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function lower(string $value): string$/;"	f
needle	vendor\topthink\think-helper\src\helper\Str.php	/^            if ((string) $needle === static::substr($haystack, -static::length($needle))) {$/;"	v
random	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function random(int $length = 6, int $type = null, string $addChars = ''): string$/;"	f
snake	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function snake(string $value, string $delimiter = '_'): string$/;"	f
snakeCache	vendor\topthink\think-helper\src\helper\Str.php	/^    protected static $snakeCache = [];$/;"	v
startsWith	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function startsWith(string $haystack, $needles): bool$/;"	f
str	vendor\topthink\think-helper\src\helper\Str.php	/^            $str = substr($chars, 0, $length);$/;"	v
str	vendor\topthink\think-helper\src\helper\Str.php	/^        $str = '';$/;"	v
studly	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function studly(string $value): string$/;"	f
studlyCache	vendor\topthink\think-helper\src\helper\Str.php	/^    protected static $studlyCache = [];$/;"	v
substr	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function substr(string $string, int $start, int $length = null): string$/;"	f
title	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function title(string $value): string$/;"	f
upper	vendor\topthink\think-helper\src\helper\Str.php	/^    public static function upper(string $value): string$/;"	f
value	vendor\topthink\think-helper\src\helper\Str.php	/^            $value = preg_replace('\/\\s+\/u', '', $value);$/;"	v
value	vendor\topthink\think-helper\src\helper\Str.php	/^            $value = static::lower(preg_replace('\/(.)(?=[A-Z])\/u', '$1' . $delimiter, $value));$/;"	v
value	vendor\topthink\think-helper\src\helper\Str.php	/^        $value = ucwords(str_replace(['-', '_'], ' ', $value));$/;"	v
DbManager	vendor\topthink\think-orm\src\DbManager.php	/^class DbManager$/;"	c
__call	vendor\topthink\think-orm\src\DbManager.php	/^    public function __call($method, $args)$/;"	f
__construct	vendor\topthink\think-orm\src\DbManager.php	/^    public function __construct()$/;"	f
cache	vendor\topthink\think-orm\src\DbManager.php	/^        $this->cache = $cache;$/;"	v
cache	vendor\topthink\think-orm\src\DbManager.php	/^    protected $cache;$/;"	v
class	vendor\topthink\think-orm\src\DbManager.php	/^            $class = $type;$/;"	v
class	vendor\topthink\think-orm\src\DbManager.php	/^            $class = '\\\\think\\\\db\\\\connector\\\\' . ucfirst($type);$/;"	v
class	vendor\topthink\think-orm\src\DbManager.php	/^        $class = $connection->getQueryClass();$/;"	v
clear	vendor\topthink\think-orm\src\DbManager.php	/^    public function getDbLog(bool $clear = false): array$/;"	v
clearQueryTimes	vendor\topthink\think-orm\src\DbManager.php	/^    public function clearQueryTimes(): void$/;"	f
config	vendor\topthink\think-orm\src\DbManager.php	/^        $config = $this->getConnectionConfig($name);$/;"	v
config	vendor\topthink\think-orm\src\DbManager.php	/^        $this->config = $config;$/;"	v
config	vendor\topthink\think-orm\src\DbManager.php	/^    protected $config = [];$/;"	v
connect	vendor\topthink\think-orm\src\DbManager.php	/^    public function connect(string $name = null, bool $force = false): BaseQuery$/;"	f
connection	vendor\topthink\think-orm\src\DbManager.php	/^        $connection = $this->instance($name, $force);$/;"	v
connection	vendor\topthink\think-orm\src\DbManager.php	/^        $connection = new $class($config);$/;"	v
connections	vendor\topthink\think-orm\src\DbManager.php	/^        $connections = $this->getConfig('connections');$/;"	v
createConnection	vendor\topthink\think-orm\src\DbManager.php	/^    protected function createConnection(string $name): ConnectionInterface$/;"	f
dateFormat	vendor\topthink\think-orm\src\DbManager.php	/^            $dateFormat = $model->getDateFormat();$/;"	v
dbLog	vendor\topthink\think-orm\src\DbManager.php	/^            $this->dbLog = [];$/;"	v
dbLog	vendor\topthink\think-orm\src\DbManager.php	/^    protected $dbLog = [];$/;"	v
event	vendor\topthink\think-orm\src\DbManager.php	/^    protected $event;$/;"	v
event	vendor\topthink\think-orm\src\DbManager.php	/^    public function event(string $event, callable $callback): void$/;"	f
getConfig	vendor\topthink\think-orm\src\DbManager.php	/^    public function getConfig(string $name = '', $default = null)$/;"	f
getConnectionConfig	vendor\topthink\think-orm\src\DbManager.php	/^    protected function getConnectionConfig(string $name): array$/;"	f
getDbLog	vendor\topthink\think-orm\src\DbManager.php	/^    public function getDbLog(bool $clear = false): array$/;"	f
getListen	vendor\topthink\think-orm\src\DbManager.php	/^    public function getListen(): array$/;"	f
getQueryTimes	vendor\topthink\think-orm\src\DbManager.php	/^    public function getQueryTimes(): int$/;"	f
instance	vendor\topthink\think-orm\src\DbManager.php	/^    protected $instance = [];$/;"	v
instance	vendor\topthink\think-orm\src\DbManager.php	/^    protected function instance(string $name = null, bool $force = false): ConnectionInterface$/;"	f
isAutoWriteTimestamp	vendor\topthink\think-orm\src\DbManager.php	/^            $isAutoWriteTimestamp = $model->getAutoWriteTimestamp();$/;"	v
listen	vendor\topthink\think-orm\src\DbManager.php	/^    protected $listen = [];$/;"	v
listen	vendor\topthink\think-orm\src\DbManager.php	/^    public function listen(callable $callback): void$/;"	f
log	vendor\topthink\think-orm\src\DbManager.php	/^        $this->log = $log;$/;"	v
log	vendor\topthink\think-orm\src\DbManager.php	/^    protected $log;$/;"	v
log	vendor\topthink\think-orm\src\DbManager.php	/^    public function log(string $log, string $type = 'sql')$/;"	f
logs	vendor\topthink\think-orm\src\DbManager.php	/^        $logs = $this->dbLog;$/;"	v
master	vendor\topthink\think-orm\src\DbManager.php	/^                $master = $master ? 'master|' : 'slave|';$/;"	v
master	vendor\topthink\think-orm\src\DbManager.php	/^                $master = '';$/;"	v
modelMaker	vendor\topthink\think-orm\src\DbManager.php	/^    protected function modelMaker()$/;"	f
name	vendor\topthink\think-orm\src\DbManager.php	/^            $name = $this->getConfig('default', 'mysql');$/;"	v
name	vendor\topthink\think-orm\src\DbManager.php	/^    protected function instance(string $name = null, bool $force = false): ConnectionInterface$/;"	v
name	vendor\topthink\think-orm\src\DbManager.php	/^    public function connect(string $name = null, bool $force = false): BaseQuery$/;"	v
name	vendor\topthink\think-orm\src\DbManager.php	/^    public function getConfig(string $name = '', $default = null)$/;"	v
params	vendor\topthink\think-orm\src\DbManager.php	/^    public function trigger(string $event, $params = null)$/;"	v
query	vendor\topthink\think-orm\src\DbManager.php	/^        $query = new $class($connection);$/;"	v
queryTimes	vendor\topthink\think-orm\src\DbManager.php	/^        $this->queryTimes = 0;$/;"	v
queryTimes	vendor\topthink\think-orm\src\DbManager.php	/^    protected $queryTimes = 0;$/;"	v
raw	vendor\topthink\think-orm\src\DbManager.php	/^    public function raw(string $value): Raw$/;"	f
setCache	vendor\topthink\think-orm\src\DbManager.php	/^    public function setCache(CacheInterface $cache): void$/;"	f
setConfig	vendor\topthink\think-orm\src\DbManager.php	/^    public function setConfig($config): void$/;"	f
setLog	vendor\topthink\think-orm\src\DbManager.php	/^    public function setLog(LoggerInterface $log): void$/;"	f
timeRule	vendor\topthink\think-orm\src\DbManager.php	/^        $timeRule = $this->getConfig('time_query_rule');$/;"	v
trigger	vendor\topthink\think-orm\src\DbManager.php	/^    public function trigger(string $event, $params = null)$/;"	f
triggerSql	vendor\topthink\think-orm\src\DbManager.php	/^    protected function triggerSql(): void$/;"	f
type	vendor\topthink\think-orm\src\DbManager.php	/^        $type = !empty($config['type']) ? $config['type'] : 'mysql';$/;"	v
type	vendor\topthink\think-orm\src\DbManager.php	/^    public function log(string $log, string $type = 'sql')$/;"	v
updateQueryTimes	vendor\topthink\think-orm\src\DbManager.php	/^    public function updateQueryTimes(): void$/;"	f
Model	vendor\topthink\think-orm\src\Model.php	/^abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable$/;"	c
__call	vendor\topthink\think-orm\src\Model.php	/^    public function __call($method, $args)$/;"	f
__callStatic	vendor\topthink\think-orm\src\Model.php	/^    public static function __callStatic($method, $args)$/;"	f
__construct	vendor\topthink\think-orm\src\Model.php	/^    public function __construct(array $data = [])$/;"	f
__destruct	vendor\topthink\think-orm\src\Model.php	/^    public function __destruct()$/;"	f
__get	vendor\topthink\think-orm\src\Model.php	/^    public function __get(string $name)$/;"	f
__isset	vendor\topthink\think-orm\src\Model.php	/^    public function __isset(string $name): bool$/;"	f
__set	vendor\topthink\think-orm\src\Model.php	/^    public function __set(string $name, $value): void$/;"	f
__unset	vendor\topthink\think-orm\src\Model.php	/^    public function __unset(string $name): void$/;"	f
__wakeup	vendor\topthink\think-orm\src\Model.php	/^    public function __wakeup()$/;"	f
allowField	vendor\topthink\think-orm\src\Model.php	/^    public static function create(array $data, array $allowField = [], bool $replace = false): Model$/;"	v
allowFields	vendor\topthink\think-orm\src\Model.php	/^        $allowFields = $this->checkAllowFields();$/;"	v
auto	vendor\topthink\think-orm\src\Model.php	/^                $auto = true;$/;"	v
call	vendor\topthink\think-orm\src\Model.php	/^            $call = self::$invoker;$/;"	v
checkAllowFields	vendor\topthink\think-orm\src\Model.php	/^    protected function checkAllowFields(): array$/;"	f
checkData	vendor\topthink\think-orm\src\Model.php	/^    protected function checkData(): void$/;"	f
checkResult	vendor\topthink\think-orm\src\Model.php	/^    protected function checkResult($result): void$/;"	f
connection	vendor\topthink\think-orm\src\Model.php	/^    protected $connection;$/;"	v
create	vendor\topthink\think-orm\src\Model.php	/^    public static function create(array $data, array $allowField = [], bool $replace = false): Model$/;"	f
data	vendor\topthink\think-orm\src\Model.php	/^            $data = null;$/;"	v
data	vendor\topthink\think-orm\src\Model.php	/^            $this->data   = $this->db()->find($this->getKey())->getData();$/;"	v
data	vendor\topthink\think-orm\src\Model.php	/^        $data = $this->getChangedData();$/;"	v
data	vendor\topthink\think-orm\src\Model.php	/^        $this->data = $data;$/;"	v
data	vendor\topthink\think-orm\src\Model.php	/^    public function __construct(array $data = [])$/;"	v
data	vendor\topthink\think-orm\src\Model.php	/^    public function newInstance(array $data = [], $where = null): Model$/;"	v
data	vendor\topthink\think-orm\src\Model.php	/^    public function save(array $data = [], string $sequence = null): bool$/;"	v
db	vendor\topthink\think-orm\src\Model.php	/^        $db = $this->db();$/;"	v
db	vendor\topthink\think-orm\src\Model.php	/^    protected static $db;$/;"	v
db	vendor\topthink\think-orm\src\Model.php	/^    public function db($scope = []): Query$/;"	f
defaultSoftDelete	vendor\topthink\think-orm\src\Model.php	/^    protected $defaultSoftDelete;$/;"	v
delete	vendor\topthink\think-orm\src\Model.php	/^    public function delete(): bool$/;"	f
destroy	vendor\topthink\think-orm\src\Model.php	/^    public static function destroy($data, bool $force = false): bool$/;"	f
exists	vendor\topthink\think-orm\src\Model.php	/^            $this->exists   = false;$/;"	v
exists	vendor\topthink\think-orm\src\Model.php	/^            $this->exists = true;$/;"	v
exists	vendor\topthink\think-orm\src\Model.php	/^        $this->exists = $exists;$/;"	v
exists	vendor\topthink\think-orm\src\Model.php	/^    private $exists = false;$/;"	v
exists	vendor\topthink\think-orm\src\Model.php	/^    public function exists(bool $exists = true)$/;"	f
exists	vendor\topthink\think-orm\src\Model.php	/^    public function exists(bool $exists = true)$/;"	v
field	vendor\topthink\think-orm\src\Model.php	/^                $this->field = $query->getConnection()->getTableFields($table);$/;"	v
field	vendor\topthink\think-orm\src\Model.php	/^                $this->field = array_keys(array_merge($this->schema, $this->jsonType));$/;"	v
field	vendor\topthink\think-orm\src\Model.php	/^            $field = array_diff($field, $this->disuse);$/;"	v
field	vendor\topthink\think-orm\src\Model.php	/^        $field = $this->field;$/;"	v
force	vendor\topthink\think-orm\src\Model.php	/^        $this->force = $force;$/;"	v
force	vendor\topthink\think-orm\src\Model.php	/^    private $force = false;$/;"	v
force	vendor\topthink\think-orm\src\Model.php	/^    public function force(bool $force = true)$/;"	f
force	vendor\topthink\think-orm\src\Model.php	/^    public function force(bool $force = true)$/;"	v
force	vendor\topthink\think-orm\src\Model.php	/^    public static function destroy($data, bool $force = false): bool$/;"	v
getName	vendor\topthink\think-orm\src\Model.php	/^    public function getName(): string$/;"	f
getSuffix	vendor\topthink\think-orm\src\Model.php	/^    public function getSuffix(): string$/;"	f
getWhere	vendor\topthink\think-orm\src\Model.php	/^    public function getWhere()$/;"	f
globalScope	vendor\topthink\think-orm\src\Model.php	/^            $globalScope = array_diff($this->globalScope, $scope);$/;"	v
globalScope	vendor\topthink\think-orm\src\Model.php	/^    protected $globalScope = [];$/;"	v
init	vendor\topthink\think-orm\src\Model.php	/^    protected static function init()$/;"	f
initialize	vendor\topthink\think-orm\src\Model.php	/^    private function initialize(): void$/;"	f
initialized	vendor\topthink\think-orm\src\Model.php	/^    protected static $initialized = [];$/;"	v
insertData	vendor\topthink\think-orm\src\Model.php	/^    protected function insertData(string $sequence = null): bool$/;"	f
invoke	vendor\topthink\think-orm\src\Model.php	/^    public function invoke($method, array $vars = [])$/;"	f
invoker	vendor\topthink\think-orm\src\Model.php	/^    protected static $invoker;$/;"	v
isEmpty	vendor\topthink\think-orm\src\Model.php	/^    public function isEmpty(): bool$/;"	f
isExists	vendor\topthink\think-orm\src\Model.php	/^    public function isExists(): bool$/;"	f
isForce	vendor\topthink\think-orm\src\Model.php	/^    public function isForce(): bool$/;"	f
key	vendor\topthink\think-orm\src\Model.php	/^            $this->key = $this->data[$pk];$/;"	v
key	vendor\topthink\think-orm\src\Model.php	/^            $this->key = null;$/;"	v
key	vendor\topthink\think-orm\src\Model.php	/^            foreach ($dataSet as $key => $data) {$/;"	v
key	vendor\topthink\think-orm\src\Model.php	/^    protected $key;$/;"	v
lazySave	vendor\topthink\think-orm\src\Model.php	/^            $this->lazySave = false;$/;"	v
lazySave	vendor\topthink\think-orm\src\Model.php	/^            $this->lazySave = true;$/;"	v
lazySave	vendor\topthink\think-orm\src\Model.php	/^        $this->lazySave = false;$/;"	v
lazySave	vendor\topthink\think-orm\src\Model.php	/^    private $lazySave = false;$/;"	v
lazySave	vendor\topthink\think-orm\src\Model.php	/^    public function lazySave($data = []): void$/;"	f
maker	vendor\topthink\think-orm\src\Model.php	/^    protected static $maker = [];$/;"	v
maker	vendor\topthink\think-orm\src\Model.php	/^    public static function maker(Closure $maker)$/;"	f
model	vendor\topthink\think-orm\src\Model.php	/^        $model = (new static($data))->exists(true);$/;"	v
model	vendor\topthink\think-orm\src\Model.php	/^        $model = new static();$/;"	v
name	vendor\topthink\think-orm\src\Model.php	/^            $name       = str_replace('\\\\', '\/', static::class);$/;"	v
name	vendor\topthink\think-orm\src\Model.php	/^            $this->name = basename($name);$/;"	v
name	vendor\topthink\think-orm\src\Model.php	/^        foreach ($this->relationWrite as $name => $val) {$/;"	v
name	vendor\topthink\think-orm\src\Model.php	/^    protected $name;$/;"	v
newInstance	vendor\topthink\think-orm\src\Model.php	/^    public function newInstance(array $data = [], $where = null): Model$/;"	f
offsetExists	vendor\topthink\think-orm\src\Model.php	/^    public function offsetExists($name): bool$/;"	f
offsetGet	vendor\topthink\think-orm\src\Model.php	/^    public function offsetGet($name)$/;"	f
offsetSet	vendor\topthink\think-orm\src\Model.php	/^    public function offsetSet($name, $value)$/;"	f
offsetUnset	vendor\topthink\think-orm\src\Model.php	/^    public function offsetUnset($name)$/;"	f
origin	vendor\topthink\think-orm\src\Model.php	/^            $this->origin = $this->data;$/;"	v
origin	vendor\topthink\think-orm\src\Model.php	/^        $this->origin   = $this->data;$/;"	v
origin	vendor\topthink\think-orm\src\Model.php	/^        $this->origin = $this->data;$/;"	v
pk	vendor\topthink\think-orm\src\Model.php	/^                $pk = $this->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\Model.php	/^            $pk = $this->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\Model.php	/^        $pk = $this->getPk();$/;"	v
query	vendor\topthink\think-orm\src\Model.php	/^                $query = $this->db();$/;"	v
query	vendor\topthink\think-orm\src\Model.php	/^        $query = $model->db();$/;"	v
query	vendor\topthink\think-orm\src\Model.php	/^        $query = self::$db->connect($this->connection)$/;"	v
refresh	vendor\topthink\think-orm\src\Model.php	/^    public function refresh(bool $relation = false)$/;"	f
relation	vendor\topthink\think-orm\src\Model.php	/^                $this->relation = [];$/;"	v
relation	vendor\topthink\think-orm\src\Model.php	/^    public function refresh(bool $relation = false)$/;"	v
replace	vendor\topthink\think-orm\src\Model.php	/^        $this->replace = $replace;$/;"	v
replace	vendor\topthink\think-orm\src\Model.php	/^    private $replace = false;$/;"	v
replace	vendor\topthink\think-orm\src\Model.php	/^    public function replace(bool $replace = true)$/;"	f
replace	vendor\topthink\think-orm\src\Model.php	/^    public function replace(bool $replace = true)$/;"	v
replace	vendor\topthink\think-orm\src\Model.php	/^    public function saveAll(iterable $dataSet, bool $replace = true): Collection$/;"	v
result	vendor\topthink\think-orm\src\Model.php	/^            $result = $db->strict(false)$/;"	v
result	vendor\topthink\think-orm\src\Model.php	/^            $result = $db->where($where)$/;"	v
result	vendor\topthink\think-orm\src\Model.php	/^            $result = [];$/;"	v
result	vendor\topthink\think-orm\src\Model.php	/^        $result = $this->exists ? $this->updateData() : $this->insertData($sequence);$/;"	v
resultSet	vendor\topthink\think-orm\src\Model.php	/^        $resultSet = $query->select($data);$/;"	v
save	vendor\topthink\think-orm\src\Model.php	/^    public function save(array $data = [], string $sequence = null): bool$/;"	f
saveAll	vendor\topthink\think-orm\src\Model.php	/^    public function saveAll(iterable $dataSet, bool $replace = true): Collection$/;"	f
scope	vendor\topthink\think-orm\src\Model.php	/^    public static function withoutGlobalScope(array $scope = null)$/;"	v
sequence	vendor\topthink\think-orm\src\Model.php	/^    protected function insertData(string $sequence = null): bool$/;"	v
set	vendor\topthink\think-orm\src\Model.php	/^        $this->set      = [];$/;"	v
setDb	vendor\topthink\think-orm\src\Model.php	/^    public static function setDb(DbManager $db)$/;"	f
setInvoker	vendor\topthink\think-orm\src\Model.php	/^    public static function setInvoker(callable $callable): void$/;"	f
setSuffix	vendor\topthink\think-orm\src\Model.php	/^    public function setSuffix(string $suffix)$/;"	f
setUpdateWhere	vendor\topthink\think-orm\src\Model.php	/^    protected function setUpdateWhere($where): void$/;"	f
suffix	vendor\topthink\think-orm\src\Model.php	/^        $this->suffix = $suffix;$/;"	v
suffix	vendor\topthink\think-orm\src\Model.php	/^    protected $suffix;$/;"	v
suffix	vendor\topthink\think-orm\src\Model.php	/^    public static function suffix(string $suffix)$/;"	f
table	vendor\topthink\think-orm\src\Model.php	/^                $table = $this->table ? $this->table . $this->suffix : $query->getTable();$/;"	v
table	vendor\topthink\think-orm\src\Model.php	/^    protected $table;$/;"	v
update	vendor\topthink\think-orm\src\Model.php	/^    public static function update(array $data, $where = [], array $allowField = [])$/;"	f
updateData	vendor\topthink\think-orm\src\Model.php	/^    protected function updateData(): bool$/;"	f
updateWhere	vendor\topthink\think-orm\src\Model.php	/^        $this->updateWhere = $where;$/;"	v
updateWhere	vendor\topthink\think-orm\src\Model.php	/^    private $updateWhere;$/;"	v
vars	vendor\topthink\think-orm\src\Model.php	/^    public function invoke($method, array $vars = [])$/;"	v
where	vendor\topthink\think-orm\src\Model.php	/^            $where     = $this->getWhere();$/;"	v
where	vendor\topthink\think-orm\src\Model.php	/^            $where     = [[$pk, '=', $this->data[$pk]]];$/;"	v
where	vendor\topthink\think-orm\src\Model.php	/^            $where = empty($this->updateWhere) ? null : $this->updateWhere;$/;"	v
where	vendor\topthink\think-orm\src\Model.php	/^        $where = $this->getWhere();$/;"	v
where	vendor\topthink\think-orm\src\Model.php	/^    public static function update(array $data, $where = [], array $allowField = [])$/;"	v
withoutGlobalScope	vendor\topthink\think-orm\src\Model.php	/^    public static function withoutGlobalScope(array $scope = null)$/;"	f
Paginator	vendor\topthink\think-orm\src\Paginator.php	/^abstract class Paginator implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable$/;"	c
__call	vendor\topthink\think-orm\src\Paginator.php	/^    public function __call($name, $arguments)$/;"	f
__construct	vendor\topthink\think-orm\src\Paginator.php	/^    public function __construct($items, int $listRows, int $currentPage = 1, int $total = null, bool $simple = false, array $options = [])$/;"	f
__toString	vendor\topthink\think-orm\src\Paginator.php	/^    public function __toString()$/;"	f
appends	vendor\topthink\think-orm\src\Paginator.php	/^    public function appends(array $append)$/;"	f
buildFragment	vendor\topthink\think-orm\src\Paginator.php	/^    protected function buildFragment(): string$/;"	f
count	vendor\topthink\think-orm\src\Paginator.php	/^    public function count(): int$/;"	f
currentPage	vendor\topthink\think-orm\src\Paginator.php	/^            $this->currentPage = $this->setCurrentPage($currentPage);$/;"	v
currentPage	vendor\topthink\think-orm\src\Paginator.php	/^    protected $currentPage;$/;"	v
currentPage	vendor\topthink\think-orm\src\Paginator.php	/^    public function __construct($items, int $listRows, int $currentPage = 1, int $total = null, bool $simple = false, array $options = [])$/;"	v
currentPage	vendor\topthink\think-orm\src\Paginator.php	/^    public function currentPage(): int$/;"	f
currentPage	vendor\topthink\think-orm\src\Paginator.php	/^    public static function make($items, int $listRows, int $currentPage = 1, int $total = null, bool $simple = false, array $options = [])$/;"	v
currentPageResolver	vendor\topthink\think-orm\src\Paginator.php	/^    protected static $currentPageResolver;$/;"	v
currentPageResolver	vendor\topthink\think-orm\src\Paginator.php	/^    public static function currentPageResolver(Closure $resolver)$/;"	f
currentPathResolver	vendor\topthink\think-orm\src\Paginator.php	/^    protected static $currentPathResolver;$/;"	v
currentPathResolver	vendor\topthink\think-orm\src\Paginator.php	/^    public static function currentPathResolver(Closure $resolver)$/;"	f
each	vendor\topthink\think-orm\src\Paginator.php	/^    public function each(callable $callback)$/;"	f
fragment	vendor\topthink\think-orm\src\Paginator.php	/^    public function fragment(string $fragment = null)$/;"	f
fragment	vendor\topthink\think-orm\src\Paginator.php	/^    public function fragment(string $fragment = null)$/;"	v
getCollection	vendor\topthink\think-orm\src\Paginator.php	/^    public function getCollection()$/;"	f
getCurrentPage	vendor\topthink\think-orm\src\Paginator.php	/^    public static function getCurrentPage(string $varPage = 'page', int $default = 1): int$/;"	f
getCurrentPath	vendor\topthink\think-orm\src\Paginator.php	/^    public static function getCurrentPath($default = '\/'): string$/;"	f
getIterator	vendor\topthink\think-orm\src\Paginator.php	/^    public function getIterator()$/;"	f
getUrlRange	vendor\topthink\think-orm\src\Paginator.php	/^    public function getUrlRange(int $start, int $end): array$/;"	f
hasMore	vendor\topthink\think-orm\src\Paginator.php	/^            $this->hasMore     = $this->currentPage < $this->lastPage;$/;"	v
hasMore	vendor\topthink\think-orm\src\Paginator.php	/^            $this->hasMore     = count($items) > ($this->listRows);$/;"	v
hasMore	vendor\topthink\think-orm\src\Paginator.php	/^    protected $hasMore;$/;"	v
hasPages	vendor\topthink\think-orm\src\Paginator.php	/^    public function hasPages(): bool$/;"	f
isEmpty	vendor\topthink\think-orm\src\Paginator.php	/^    public function isEmpty(): bool$/;"	f
items	vendor\topthink\think-orm\src\Paginator.php	/^            $items             = $items->slice(0, $this->listRows);$/;"	v
items	vendor\topthink\think-orm\src\Paginator.php	/^            $items = Collection::make($items);$/;"	v
items	vendor\topthink\think-orm\src\Paginator.php	/^            $this->items = $result;$/;"	v
items	vendor\topthink\think-orm\src\Paginator.php	/^        $this->items = $items;$/;"	v
items	vendor\topthink\think-orm\src\Paginator.php	/^    protected $items;$/;"	v
items	vendor\topthink\think-orm\src\Paginator.php	/^    public function items()$/;"	f
jsonSerialize	vendor\topthink\think-orm\src\Paginator.php	/^    public function jsonSerialize()$/;"	f
k	vendor\topthink\think-orm\src\Paginator.php	/^        foreach ($append as $k => $v) {$/;"	v
key	vendor\topthink\think-orm\src\Paginator.php	/^        foreach ($this->items as $key => $item) {$/;"	v
lastPage	vendor\topthink\think-orm\src\Paginator.php	/^            $this->lastPage    = (int) ceil($total \/ $listRows);$/;"	v
lastPage	vendor\topthink\think-orm\src\Paginator.php	/^    protected $lastPage;$/;"	v
lastPage	vendor\topthink\think-orm\src\Paginator.php	/^    public function lastPage(): int$/;"	f
listRows	vendor\topthink\think-orm\src\Paginator.php	/^        $this->listRows = $listRows;$/;"	v
listRows	vendor\topthink\think-orm\src\Paginator.php	/^    protected $listRows;$/;"	v
listRows	vendor\topthink\think-orm\src\Paginator.php	/^    public function listRows(): int$/;"	f
make	vendor\topthink\think-orm\src\Paginator.php	/^    public static function make($items, int $listRows, int $currentPage = 1, int $total = null, bool $simple = false, array $options = [])$/;"	f
maker	vendor\topthink\think-orm\src\Paginator.php	/^    protected static $maker;$/;"	v
maker	vendor\topthink\think-orm\src\Paginator.php	/^    public static function maker(Closure $resolver)$/;"	f
offsetExists	vendor\topthink\think-orm\src\Paginator.php	/^    public function offsetExists($offset)$/;"	f
offsetGet	vendor\topthink\think-orm\src\Paginator.php	/^    public function offsetGet($offset)$/;"	f
offsetSet	vendor\topthink\think-orm\src\Paginator.php	/^    public function offsetSet($offset, $value)$/;"	f
offsetUnset	vendor\topthink\think-orm\src\Paginator.php	/^    public function offsetUnset($offset)$/;"	f
options	vendor\topthink\think-orm\src\Paginator.php	/^        $this->options = array_merge($this->options, $options);$/;"	v
options	vendor\topthink\think-orm\src\Paginator.php	/^    protected $options = [$/;"	v
page	vendor\topthink\think-orm\src\Paginator.php	/^            $page = 1;$/;"	v
parameters	vendor\topthink\think-orm\src\Paginator.php	/^            $parameters = [$this->options['var_page'] => $page];$/;"	v
parameters	vendor\topthink\think-orm\src\Paginator.php	/^            $parameters = [];$/;"	v
parameters	vendor\topthink\think-orm\src\Paginator.php	/^            $parameters = array_merge($this->options['query'], $parameters);$/;"	v
path	vendor\topthink\think-orm\src\Paginator.php	/^            $path       = $this->options['path'];$/;"	v
path	vendor\topthink\think-orm\src\Paginator.php	/^            $path       = str_replace('[PAGE]', $page, $this->options['path']);$/;"	v
render	vendor\topthink\think-orm\src\Paginator.php	/^    abstract public function render();$/;"	f
result	vendor\topthink\think-orm\src\Paginator.php	/^            $result = $callback($item, $key);$/;"	v
result	vendor\topthink\think-orm\src\Paginator.php	/^        $result = call_user_func_array([$this->items, $name], $arguments);$/;"	v
setCurrentPage	vendor\topthink\think-orm\src\Paginator.php	/^    protected function setCurrentPage(int $currentPage): int$/;"	f
simple	vendor\topthink\think-orm\src\Paginator.php	/^        $this->simple   = $simple;$/;"	v
simple	vendor\topthink\think-orm\src\Paginator.php	/^    protected $simple = false;$/;"	v
toArray	vendor\topthink\think-orm\src\Paginator.php	/^    public function toArray(): array$/;"	f
total	vendor\topthink\think-orm\src\Paginator.php	/^            $this->total       = $total;$/;"	v
total	vendor\topthink\think-orm\src\Paginator.php	/^            $total = $this->total();$/;"	v
total	vendor\topthink\think-orm\src\Paginator.php	/^            $total = null;$/;"	v
total	vendor\topthink\think-orm\src\Paginator.php	/^    protected $total;$/;"	v
total	vendor\topthink\think-orm\src\Paginator.php	/^    public function total(): int$/;"	f
url	vendor\topthink\think-orm\src\Paginator.php	/^        $url = $path;$/;"	v
url	vendor\topthink\think-orm\src\Paginator.php	/^    protected function url(int $page): string$/;"	f
urls	vendor\topthink\think-orm\src\Paginator.php	/^        $urls = [];$/;"	v
varPage	vendor\topthink\think-orm\src\Paginator.php	/^    public static function getCurrentPage(string $varPage = 'page', int $default = 1): int$/;"	v
BaseQuery	vendor\topthink\think-orm\src\db\BaseQuery.php	/^abstract class BaseQuery$/;"	c
__call	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function __call(string $method, array $args)$/;"	f
__construct	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function __construct(ConnectionInterface $connection)$/;"	f
alias	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $alias = $this->options['alias'][$table];$/;"	v
alias	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function alias($alias)$/;"	f
all	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function union($union, bool $all = false)$/;"	v
autoinc	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected $autoinc;$/;"	v
bind	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $bind    = $this->bind;$/;"	v
bind	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $this->bind    = [];$/;"	v
cache	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	f
column	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function column(string $field, string $key = ''): array$/;"	f
config	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $config   = $defaultConfig;$/;"	v
config	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $config   = array_merge($defaultConfig, $listRows);$/;"	v
config	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $config   = is_array($listRows) ? array_merge($defaultConfig, $listRows) : $defaultConfig;$/;"	v
connection	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $this->connection = $connection;$/;"	v
connection	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected $connection;$/;"	v
data	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $data = $this->newQuery()$/;"	v
data	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function data(array $data)$/;"	f
data	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function insert(array $data = [], bool $getLastInsID = false)$/;"	v
data	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function save(array $data = [], bool $forceInsert = false)$/;"	v
data	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function update(array $data = []): int$/;"	v
dataSet	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $dataSet = $this->options['data'] ?? [];$/;"	v
dataSet	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function insertAll(array $dataSet = [], int $limit = 0): int$/;"	v
default	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function value(string $field, $default = null)$/;"	v
defaultConfig	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $defaultConfig = [$/;"	v
delete	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function delete($data = null): int$/;"	f
expire	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $expire = $key;$/;"	v
expire	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $field = $this->options['via'] . '.' . $field;$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $field = array_map('trim', explode(',', $field));$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $field = empty($order) ? $field : [$field => $order];$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $field  = $fields ?: ['*'];$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $field = Str::snake(substr($method, 5));$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $field = array_map('trim', explode(',', $field));$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $field = array_merge((array) $this->options['field'], $field);$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $field  = $fields ? array_diff($fields, $field) : $field;$/;"	v
field	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function field($field)$/;"	f
fields	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $fields = $this->getTableFields($tableName);$/;"	v
fields	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $fields = $this->getTableFields();$/;"	v
fields	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $fields = $this->getTableFields();$/;"	v
find	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function find($data = null)$/;"	f
getConfig	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getConfig(string $name = '')$/;"	f
getConnection	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getConnection()$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getLastInsID(string $sequence = null)$/;"	f
getLastSql	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getLastSql(): string$/;"	f
getModelUpdateCondition	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected function getModelUpdateCondition(array $options)$/;"	f
getName	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getName(): string$/;"	f
getNumRows	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getNumRows(): int$/;"	f
getOptions	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getOptions(string $name = '')$/;"	f
getTable	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getTable(string $name = '')$/;"	f
insert	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function insert(array $data = [], bool $getLastInsID = false)$/;"	f
insertAll	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function insertAll(array $dataSet = [], int $limit = 0): int$/;"	f
insertGetId	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function insertGetId(array $data)$/;"	f
isUpdate	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                    $isUpdate = true;$/;"	v
isUpdate	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $isUpdate = $this->parseUpdateData($this->options['data']);$/;"	v
isUpdate	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $isUpdate = true;$/;"	v
isUpdate	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $isUpdate = false;$/;"	v
item	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                    $item = trim($item);$/;"	v
json	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function json(array $json = [], bool $assoc = false)$/;"	f
json	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function json(array $json = [], bool $assoc = false)$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $key    = true;$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $key = isset($alias) ? $alias . '.' . $pk : $pk;$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            foreach ($field as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            foreach ($tables as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $key     = $key ?: $this->getPk();$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $key = $key ?: $this->getPk();$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        foreach ($field as $key => &$val) {$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function column(string $field, string $key = ''): array$/;"	v
key	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function paginateX($listRows = null, string $key = null, string $sort = null): Paginator$/;"	v
last	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $last = $result->last();$/;"	v
lastId	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $lastId = 'asc' == $sort ? ($result - 1) + ($page - 1) * $listRows : ($result + 1) - ($page - 1) * $listRows;$/;"	v
lastId	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function more(int $limit, $lastId = null, string $key = null, string $sort = null): array$/;"	v
length	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function limit(int $offset, int $length = null)$/;"	v
limit	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $limit = (int) $this->options['limit'];$/;"	v
limit	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function limit(int $offset, int $length = null)$/;"	f
listRows	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $listRows          = $listRows ?: (is_numeric($options['limit']) ? $options['limit'] : 20);$/;"	v
listRows	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $listRows = intval($config['list_rows']);$/;"	v
listRows	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $listRows = intval($listRows ?: $config['list_rows']);$/;"	v
listRows	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $listRows = is_int($listRows) ? $listRows : (int) $config['list_rows'];$/;"	v
listRows	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function page(int $page, int $listRows = null)$/;"	v
lock	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function lock($lock = false)$/;"	f
master	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function master(bool $readMaster = true)$/;"	f
method	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $method = 'scope' . $method;$/;"	v
more	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function more(int $limit, $lastId = null, string $key = null, string $sort = null): array$/;"	f
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $name = Str::snake(substr($method, 10));$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $name = Str::snake(substr($method, 5));$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $name = Str::snake(substr($method, 7));$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $name = $name ?: $this->name;$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $this->name = $name;$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected $name = '';$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getConfig(string $name = '')$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getOptions(string $name = '')$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getTable(string $name = '')$/;"	v
name	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function name(string $name)$/;"	f
newOption	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $newOption = $options;$/;"	v
newQuery	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function newQuery(): BaseQuery$/;"	f
offset	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $offset            = $listRows * ($page - 1);$/;"	v
option	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function removeOption(string $option = '')$/;"	v
options	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $options = $this->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $this->options = [];$/;"	v
options	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $options = $this->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $this->options = $options;$/;"	v
options	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected $options = [];$/;"	v
options	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected function options(array $options)$/;"	f
order	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $order = $options['order'] ?? '';$/;"	v
order	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $order = $this->getOptions('order');$/;"	v
order	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function order($field, string $order = '')$/;"	f
order	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function order($field, string $order = '')$/;"	v
page	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $page              = $page > 0 ? $page : 1;$/;"	v
page	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $page     = $page < 1 ? 1 : $page;$/;"	v
page	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $page     = isset($config['page']) ? (int) $config['page'] : Paginator::getCurrentPage($config['var_page']);$/;"	v
page	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $page = $page < 1 ? 1 : $page;$/;"	v
page	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $page = isset($config['page']) ? (int) $config['page'] : Paginator::getCurrentPage($config['var_page']);$/;"	v
page	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function page(int $page, int $listRows = null)$/;"	f
paginate	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function paginate($listRows = null, $simple = false): Paginator$/;"	f
paginateX	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function paginateX($listRows = null, string $key = null, string $sort = null): Paginator$/;"	f
parseOptions	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function parseOptions(): array$/;"	f
parsePkWhere	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function parsePkWhere($data): void$/;"	f
parseUpdateData	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function parseUpdateData(&$data): bool$/;"	f
pk	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $pk       = $this->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $pk = $this->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $this->pk = $pk;$/;"	v
pk	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected $pk;$/;"	v
pk	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function pk($pk)$/;"	f
prefix	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $prefix = $prefix ?: $tableName;$/;"	v
prefix	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $this->prefix = $this->connection->getConfig('prefix');$/;"	v
prefix	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    protected $prefix = '';$/;"	v
prefix	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function tableField($field, string $tableName, string $prefix = '', string $alias = '')$/;"	v
query	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $query = new static($this->connection);$/;"	v
readMaster	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function master(bool $readMaster = true)$/;"	v
removeOption	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function removeOption(string $option = '')$/;"	f
result	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $result = $this->connection->find($this);$/;"	v
result	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $result = [];$/;"	v
result	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $result = $data[$key];$/;"	v
result	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $result = $this->when($lastId, function ($query) use ($key, $sort, $lastId) {$/;"	v
resultSet	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $resultSet = $this->resultSetToModelCollection($resultSet);$/;"	v
resultSet	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $resultSet = $this->connection->select($this);$/;"	v
results	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $results = $this->limit(($page - 1) * $listRows, $listRows + 1)->select();$/;"	v
results	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $results = $this->options($options)->bind($bind)->page($page, $listRows)->select();$/;"	v
results	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $results = $this->page($page, $listRows)->select();$/;"	v
results	vendor\topthink\think-orm\src\db\BaseQuery.php	/^        $results = $this->when($lastId, function ($query) use ($key, $sort, $lastId) {$/;"	v
save	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function save(array $data = [], bool $forceInsert = false)$/;"	f
select	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function select($data = null): Collection$/;"	f
selectInsert	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function selectInsert(array $fields, string $table): int$/;"	f
sequence	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function getLastInsID(string $sequence = null)$/;"	v
setFieldType	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function setFieldType(array $type)$/;"	f
setOption	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function setOption(string $option, $value)$/;"	f
simple	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $simple = false;$/;"	v
simple	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function paginate($listRows = null, $simple = false): Paginator$/;"	v
sort	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $sort = $order[$key] ?? 'desc';$/;"	v
sort	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $sort = 'desc';$/;"	v
strict	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function strict(bool $strict = true)$/;"	f
strict	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function strict(bool $strict = true)$/;"	v
table	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                    $table          = [];$/;"	v
table	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $table  = [];$/;"	v
table	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $table  = [];$/;"	v
table	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $table = $this->getTable();$/;"	v
table	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $table = is_array($this->options['table']) ? key($this->options['table']) : $this->options['table'];$/;"	v
table	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function table($table)$/;"	f
tableField	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function tableField($field, string $tableName, string $prefix = '', string $alias = '')$/;"	f
tables	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $tables = explode(',', $table);$/;"	v
tables	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $tables = $table;$/;"	v
total	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $total   = $this->count();$/;"	v
total	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $total   = null;$/;"	v
total	vendor\topthink\think-orm\src\db\BaseQuery.php	/^            $total  = $simple;$/;"	v
union	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function union($union, bool $all = false)$/;"	f
unionAll	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function unionAll($union)$/;"	f
update	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function update(array $data = []): int$/;"	f
val	vendor\topthink\think-orm\src\db\BaseQuery.php	/^                $val = $prefix . '.' . $val;$/;"	v
value	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function value(string $field, $default = null)$/;"	f
via	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function via(string $via = '')$/;"	f
via	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function via(string $via = '')$/;"	v
withoutField	vendor\topthink\think-orm\src\db\BaseQuery.php	/^    public function withoutField($field)$/;"	f
Builder	vendor\topthink\think-orm\src\db\Builder.php	/^abstract class Builder$/;"	c
__construct	vendor\topthink\think-orm\src\db\Builder.php	/^    public function __construct(ConnectionInterface $connection)$/;"	f
allowFields	vendor\topthink\think-orm\src\db\Builder.php	/^            $allowFields = $options['field'];$/;"	v
allowFields	vendor\topthink\think-orm\src\db\Builder.php	/^            $allowFields = array_keys($bind);$/;"	v
array	vendor\topthink\think-orm\src\db\Builder.php	/^            $array = [];$/;"	v
array	vendor\topthink\think-orm\src\db\Builder.php	/^        $array = [];$/;"	v
bind	vendor\topthink\think-orm\src\db\Builder.php	/^            $bind = $query->getFieldsBindType();$/;"	v
bind	vendor\topthink\think-orm\src\db\Builder.php	/^        $bind = $query->getFieldsBindType();$/;"	v
bind	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseDataBind(Query $query, string $key, $data, array $bind = []): string$/;"	v
bindParser	vendor\topthink\think-orm\src\db\Builder.php	/^    public function bindParser(string $name, array $parser)$/;"	f
bindType	vendor\topthink\think-orm\src\db\Builder.php	/^            $bindType = $binds[$field] ?? PDO::PARAM_STR;$/;"	v
bindType	vendor\topthink\think-orm\src\db\Builder.php	/^            $bindType = PDO::PARAM_STR;$/;"	v
binds	vendor\topthink\think-orm\src\db\Builder.php	/^            $binds    = $query->getFieldsBindType();$/;"	v
binds	vendor\topthink\think-orm\src\db\Builder.php	/^        $binds = $query->getFieldsBindType();$/;"	v
binds	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseWhereItem(Query $query, $field, array $val, array $binds = []): string$/;"	v
binds	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseWhereLogic(Query $query, string $logic, array $val, array $binds = []): array$/;"	v
buildWhere	vendor\topthink\think-orm\src\db\Builder.php	/^    public function buildWhere(Query $query, array $where): string$/;"	f
comment	vendor\topthink\think-orm\src\db\Builder.php	/^            $comment = strstr($comment, '*\/', true);$/;"	v
condition	vendor\topthink\think-orm\src\db\Builder.php	/^                $condition = $on;$/;"	v
condition	vendor\topthink\think-orm\src\db\Builder.php	/^                $condition = $this->parseKey($query, $val1) . '=' . $this->parseKey($query, $val2);$/;"	v
connection	vendor\topthink\think-orm\src\db\Builder.php	/^        $this->connection = $connection;$/;"	v
connection	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $connection;$/;"	v
data	vendor\topthink\think-orm\src\db\Builder.php	/^            $data = $this->parseData($query, $data, $allowFields, $bind);$/;"	v
data	vendor\topthink\think-orm\src\db\Builder.php	/^        $data = $this->parseData($query, $options['data']);$/;"	v
data	vendor\topthink\think-orm\src\db\Builder.php	/^        $data = is_array($value) ? $value : explode(',', $value);$/;"	v
data	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseData(Query $query, array $data = [], array $fields = [], array $bind = []): array$/;"	v
delete	vendor\topthink\think-orm\src\db\Builder.php	/^    public function delete(Query $query): string$/;"	f
deleteSql	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $deleteSql = 'DELETE%EXTRA% FROM %TABLE%%USING%%JOIN%%WHERE%%ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
exp	vendor\topthink\think-orm\src\db\Builder.php	/^            $exp = $this->exp[$exp];$/;"	v
exp	vendor\topthink\think-orm\src\db\Builder.php	/^        $exp = strtoupper($exp);$/;"	v
exp	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $exp = ['NOTLIKE' => 'NOT LIKE', 'NOTIN' => 'NOT IN', 'NOTBETWEEN' => 'NOT BETWEEN', 'NOTEXISTS' => 'NOT EXISTS', 'NOTNULL' => 'NOT NULL', 'NOTBETWEEN TIME' => 'NOT BETWEEN TIME'];$/;"	v
field	vendor\topthink\think-orm\src\db\Builder.php	/^                $field   = is_string($field) ? $field : '';$/;"	v
field	vendor\topthink\think-orm\src\db\Builder.php	/^                $field = array_shift($value);$/;"	v
field	vendor\topthink\think-orm\src\db\Builder.php	/^            $field = $this->parseKey($query, $field, true);$/;"	v
fields	vendor\topthink\think-orm\src\db\Builder.php	/^                $fields = $options['field'];$/;"	v
fields	vendor\topthink\think-orm\src\db\Builder.php	/^                $fields = array_keys($bind);$/;"	v
fields	vendor\topthink\think-orm\src\db\Builder.php	/^        $fields = [];$/;"	v
fields	vendor\topthink\think-orm\src\db\Builder.php	/^        $fields = array_keys($data);$/;"	v
fieldsStr	vendor\topthink\think-orm\src\db\Builder.php	/^            $fieldsStr = '*';$/;"	v
fieldsStr	vendor\topthink\think-orm\src\db\Builder.php	/^            $fieldsStr = implode(',', $array);$/;"	v
fun	vendor\topthink\think-orm\src\db\Builder.php	/^        foreach ($this->parser as $fun => $parse) {$/;"	v
getConnection	vendor\topthink\think-orm\src\db\Builder.php	/^    public function getConnection(): ConnectionInterface$/;"	f
group	vendor\topthink\think-orm\src\db\Builder.php	/^            $group = explode(',', $group);$/;"	v
index	vendor\topthink\think-orm\src\db\Builder.php	/^            $index = join(',', $index);$/;"	v
insert	vendor\topthink\think-orm\src\db\Builder.php	/^    public function insert(Query $query): string$/;"	f
insertAll	vendor\topthink\think-orm\src\db\Builder.php	/^    public function insertAll(Query $query, array $dataSet): string$/;"	f
insertAllSql	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $insertAllSql = '%INSERT%%EXTRA% INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertFields	vendor\topthink\think-orm\src\db\Builder.php	/^                $insertFields = array_keys($data);$/;"	v
insertSql	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $insertSql = '%INSERT%%EXTRA% INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
item	vendor\topthink\think-orm\src\db\Builder.php	/^                $item          = $this->parseKey($query, $key);$/;"	v
item	vendor\topthink\think-orm\src\db\Builder.php	/^            $item = $this->parseKey($query, $key, true);$/;"	v
item	vendor\topthink\think-orm\src\db\Builder.php	/^        $item    = [];$/;"	v
item	vendor\topthink\think-orm\src\db\Builder.php	/^        $item = [];$/;"	v
joinStr	vendor\topthink\think-orm\src\db\Builder.php	/^        $joinStr = '';$/;"	v
k	vendor\topthink\think-orm\src\db\Builder.php	/^        foreach ($dataSet as $k => $data) {$/;"	v
key	vendor\topthink\think-orm\src\db\Builder.php	/^            foreach ($fields as $key => $field) {$/;"	v
key	vendor\topthink\think-orm\src\db\Builder.php	/^        $key = $field ? $this->parseKey($query, $field, true) : '';$/;"	v
key	vendor\topthink\think-orm\src\db\Builder.php	/^        foreach ($data as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\Builder.php	/^        foreach ($order as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\Builder.php	/^        foreach ((array) $tables as $key => $table) {$/;"	v
lock	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseLock(Query $query, $lock = false): string$/;"	v
logic	vendor\topthink\think-orm\src\db\Builder.php	/^        foreach ($where as $logic => $val) {$/;"	v
max	vendor\topthink\think-orm\src\db\Builder.php	/^        $max = $query->bindValue($data[1], $bindType);$/;"	v
min	vendor\topthink\think-orm\src\db\Builder.php	/^        $min = $query->bindValue($data[0], $bindType);$/;"	v
name	vendor\topthink\think-orm\src\db\Builder.php	/^                $name    = $query->bindValue($item, PDO::PARAM_STR);$/;"	v
name	vendor\topthink\think-orm\src\db\Builder.php	/^                $name    = $query->bindValue($v, $bindType);$/;"	v
name	vendor\topthink\think-orm\src\db\Builder.php	/^                $name  = $query->bindValue($value, $bindType);$/;"	v
name	vendor\topthink\think-orm\src\db\Builder.php	/^        $name = $query->bindValue($data, $bind[$key] ?? PDO::PARAM_STR);$/;"	v
name	vendor\topthink\think-orm\src\db\Builder.php	/^        $name = $query->bindValue($value, $bindType);$/;"	v
newQuery	vendor\topthink\think-orm\src\db\Builder.php	/^        $newQuery = $query->newQuery()->removeOption();$/;"	v
newQuery	vendor\topthink\think-orm\src\db\Builder.php	/^        $newQuery = $query->newQuery();$/;"	v
one	vendor\topthink\think-orm\src\db\Builder.php	/^    public function select(Query $query, bool $one = false): string$/;"	v
options	vendor\topthink\think-orm\src\db\Builder.php	/^        $options  = $query->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\Builder.php	/^        $options = $query->getOptions();$/;"	v
parseBetween	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseBetween(Query $query, string $key, string $exp, $value, $field, int $bindType): string$/;"	f
parseBetweenTime	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseBetweenTime(Query $query, string $key, string $exp, $value, $field, int $bindType): string$/;"	f
parseClosure	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseClosure(Query $query, Closure $call, bool $show = true): string$/;"	f
parseClosureWhere	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseClosureWhere(Query $query, Closure $value, string $logic): string$/;"	f
parseColumn	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseColumn(Query $query, string $key, $exp, array $value, string $field, int $bindType): string$/;"	f
parseComment	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseComment(Query $query, string $comment): string$/;"	f
parseCompare	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseCompare(Query $query, string $key, string $exp, $value, $field, int $bindType): string$/;"	f
parseData	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseData(Query $query, array $data = [], array $fields = [], array $bind = []): array$/;"	f
parseDataBind	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseDataBind(Query $query, string $key, $data, array $bind = []): string$/;"	f
parseDateTime	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseDateTime(Query $query, $value, string $key, int $bindType): string$/;"	f
parseDistinct	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseDistinct(Query $query, bool $distinct): string$/;"	f
parseExists	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseExists(Query $query, string $key, string $exp, $value, string $field, int $bindType): string$/;"	f
parseExp	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseExp(Query $query, string $key, string $exp, Raw $value, string $field, int $bindType): string$/;"	f
parseExtra	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseExtra(Query $query, string $extra): string$/;"	f
parseField	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseField(Query $query, $fields): string$/;"	f
parseFieldsAnd	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseFieldsAnd(Query $query, $value, string $field, string $logic, array $binds): string$/;"	f
parseFieldsOr	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseFieldsOr(Query $query, $value, string $field, string $logic, array $binds): string$/;"	f
parseForce	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseForce(Query $query, $index): string$/;"	f
parseGroup	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseGroup(Query $query, $group): string$/;"	f
parseHaving	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseHaving(Query $query, string $having): string$/;"	f
parseIn	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseIn(Query $query, string $key, string $exp, $value, $field, int $bindType): string$/;"	f
parseJoin	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseJoin(Query $query, array $join): string$/;"	f
parseKey	vendor\topthink\think-orm\src\db\Builder.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	f
parseLike	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseLike(Query $query, string $key, string $exp, $value, $field, int $bindType, string $logic): string$/;"	f
parseLimit	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseLimit(Query $query, string $limit): string$/;"	f
parseLock	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseLock(Query $query, $lock = false): string$/;"	f
parseMultiWhereField	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseMultiWhereField(Query $query, $value, $field, string $logic, array $binds): string$/;"	f
parseNull	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseNull(Query $query, string $key, string $exp, $value, $field, int $bindType): string$/;"	f
parseOrder	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseOrder(Query $query, array $order): string$/;"	f
parseOrderField	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseOrderField(Query $query, string $key, array $val): string$/;"	f
parseRand	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseRand(Query $query): string$/;"	f
parseTable	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseTable(Query $query, $tables): string$/;"	f
parseTime	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseTime(Query $query, string $key, string $exp, $value, $field, int $bindType): string$/;"	f
parseUnion	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseUnion(Query $query, array $union): string$/;"	f
parseWhere	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseWhere(Query $query, array $where): string$/;"	f
parseWhereItem	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseWhereItem(Query $query, $field, array $val, array $binds = []): string$/;"	f
parseWhereLogic	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseWhereLogic(Query $query, string $logic, array $val, array $binds = []): array$/;"	f
parser	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $parser = [$/;"	v
pos	vendor\topthink\think-orm\src\db\Builder.php	/^            if (isset($options['alias']) && $pos = array_search($table, $options['alias'])) {$/;"	v
result	vendor\topthink\think-orm\src\db\Builder.php	/^        $result = [];$/;"	v
select	vendor\topthink\think-orm\src\db\Builder.php	/^    public function select(Query $query, bool $one = false): string$/;"	f
selectInsert	vendor\topthink\think-orm\src\db\Builder.php	/^    public function selectInsert(Query $query, array $fields, string $table): string$/;"	f
selectSql	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $selectSql = 'SELECT%DISTINCT%%EXTRA% %FIELD% FROM %TABLE%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%UNION%%ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
set	vendor\topthink\think-orm\src\db\Builder.php	/^        $set = [];$/;"	v
show	vendor\topthink\think-orm\src\db\Builder.php	/^    protected function parseClosure(Query $query, Closure $call, bool $show = true): string$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^                    $sort    = in_array($sort, ['ASC', 'DESC'], true) ? ' ' . $sort : '';$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^                    $sort    = strtoupper($sort);$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^                    $sort = $val;$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^            $sort = $val['sort'];$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^            $sort = '';$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^        $sort = in_array($sort, ['ASC', 'DESC'], true) ? ' ' . $sort : '';$/;"	v
sort	vendor\topthink\think-orm\src\db\Builder.php	/^        $sort = strtoupper($sort);$/;"	v
str	vendor\topthink\think-orm\src\db\Builder.php	/^            $str = $this->parseWhereLogic($query, $logic, $val, $binds);$/;"	v
strict	vendor\topthink\think-orm\src\db\Builder.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	v
table	vendor\topthink\think-orm\src\db\Builder.php	/^                $table = $pos;$/;"	v
table	vendor\topthink\think-orm\src\db\Builder.php	/^            $table = $options['table'];$/;"	v
table	vendor\topthink\think-orm\src\db\Builder.php	/^            $table = $this->parseTable($query, $table);$/;"	v
type	vendor\topthink\think-orm\src\db\Builder.php	/^        $type = $query->getFieldType($key);$/;"	v
type	vendor\topthink\think-orm\src\db\Builder.php	/^        $type = $union['type'];$/;"	v
update	vendor\topthink\think-orm\src\db\Builder.php	/^    public function update(Query $query): string$/;"	f
updateSql	vendor\topthink\think-orm\src\db\Builder.php	/^    protected $updateSql = 'UPDATE%EXTRA% %TABLE% SET %SET%%JOIN%%WHERE%%ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
val	vendor\topthink\think-orm\src\db\Builder.php	/^                $val = json_encode($val);$/;"	v
val	vendor\topthink\think-orm\src\db\Builder.php	/^        $val = [];$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^                    $value = date('Y-m-d H:i:s', $value);$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^                    $value = date('Y-m-d', $value);$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^                $value = ':' . $name;$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^                $value = empty($zone) ? "''" : $zone;$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^                $value = strtotime($value) ?: $value;$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^            $value = $this->parseClosure($query, $value);$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^            $value = $this->parseClosure($query, $value, false);$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^            $value = $value->__toString();$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^            $value = $value->getValue();$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^            $value = array_unique(is_array($value) ? $value : explode(',', $value));$/;"	v
value	vendor\topthink\think-orm\src\db\Builder.php	/^            $value = explode(',', $value);$/;"	v
values	vendor\topthink\think-orm\src\db\Builder.php	/^        $values = [];$/;"	v
values	vendor\topthink\think-orm\src\db\Builder.php	/^        $values = array_values($data);$/;"	v
where	vendor\topthink\think-orm\src\db\Builder.php	/^            $where = ' ' . $logic . ' ( ' . $whereClosure . ' )';$/;"	v
where	vendor\topthink\think-orm\src\db\Builder.php	/^            $where = [];$/;"	v
where	vendor\topthink\think-orm\src\db\Builder.php	/^        $where = [];$/;"	v
whereClosure	vendor\topthink\think-orm\src\db\Builder.php	/^        $whereClosure = $this->buildWhere($newQuery, $newQuery->getOptions('where') ?: []);$/;"	v
whereStr	vendor\topthink\think-orm\src\db\Builder.php	/^            $whereStr = $key . ' ' . $exp . ' ' . $value;$/;"	v
whereStr	vendor\topthink\think-orm\src\db\Builder.php	/^            $whereStr = $whereStr . $this->parseWhereItem($query, $field, $condition, $binds);$/;"	v
whereStr	vendor\topthink\think-orm\src\db\Builder.php	/^            $whereStr = $whereStr ? '( ' . $whereStr . ' ) AND ' : '';$/;"	v
whereStr	vendor\topthink\think-orm\src\db\Builder.php	/^            $whereStr = '(' . implode(' ' . strtoupper($logic) . ' ', $array) . ')';$/;"	v
whereStr	vendor\topthink\think-orm\src\db\Builder.php	/^        $whereStr = $this->buildWhere($query, $where);$/;"	v
whereStr	vendor\topthink\think-orm\src\db\Builder.php	/^        $whereStr = '';$/;"	v
zone	vendor\topthink\think-orm\src\db\Builder.php	/^                $zone  = implode(',', $array);$/;"	v
CacheItem	vendor\topthink\think-orm\src\db\CacheItem.php	/^class CacheItem$/;"	c
__construct	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function __construct(string $key = null)$/;"	f
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^            $this->expire = $expiration;$/;"	v
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^            $this->expire = $expire;$/;"	v
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^            $this->expire = $timeInterval + time();$/;"	v
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^            $this->expire = (int) DateTime::createFromFormat('U', (string) time())->add($timeInterval)->format('U');$/;"	v
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^            $this->expire = null;$/;"	v
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^    protected $expire;$/;"	v
expire	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function expire($expire)$/;"	f
expiresAfter	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function expiresAfter($timeInterval)$/;"	f
expiresAt	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function expiresAt($expiration)$/;"	f
get	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function get()$/;"	f
getExpire	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function getExpire()$/;"	f
getKey	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function getKey()$/;"	f
getTag	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function getTag()$/;"	f
isHit	vendor\topthink\think-orm\src\db\CacheItem.php	/^        $this->isHit = true;$/;"	v
isHit	vendor\topthink\think-orm\src\db\CacheItem.php	/^    protected $isHit = false;$/;"	v
isHit	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function isHit(): bool$/;"	f
key	vendor\topthink\think-orm\src\db\CacheItem.php	/^        $this->key = $key;$/;"	v
key	vendor\topthink\think-orm\src\db\CacheItem.php	/^    protected $key;$/;"	v
key	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function __construct(string $key = null)$/;"	v
set	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function set($value)$/;"	f
setKey	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function setKey(string $key)$/;"	f
tag	vendor\topthink\think-orm\src\db\CacheItem.php	/^        $this->tag = $tag;$/;"	v
tag	vendor\topthink\think-orm\src\db\CacheItem.php	/^    protected $tag;$/;"	v
tag	vendor\topthink\think-orm\src\db\CacheItem.php	/^    public function tag($tag = null)$/;"	f
value	vendor\topthink\think-orm\src\db\CacheItem.php	/^        $this->value = $value;$/;"	v
value	vendor\topthink\think-orm\src\db\CacheItem.php	/^    protected $value;$/;"	v
Connection	vendor\topthink\think-orm\src\db\Connection.php	/^abstract class Connection$/;"	c
__destruct	vendor\topthink\think-orm\src\db\Connection.php	/^    public function __destruct()$/;"	f
builder	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $builder;$/;"	v
cache	vendor\topthink\think-orm\src\db\Connection.php	/^        $this->cache = $cache;$/;"	v
cache	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $cache;$/;"	v
cacheData	vendor\topthink\think-orm\src\db\Connection.php	/^    protected function cacheData(CacheItem $cacheItem)$/;"	f
cacheItem	vendor\topthink\think-orm\src\db\Connection.php	/^            $cacheItem = $key;$/;"	v
cacheItem	vendor\topthink\think-orm\src\db\Connection.php	/^            $cacheItem = new CacheItem($key);$/;"	v
config	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $config = [];$/;"	v
config	vendor\topthink\think-orm\src\db\Connection.php	/^    public function getConfig(string $config = '')$/;"	v
db	vendor\topthink\think-orm\src\db\Connection.php	/^        $this->db = $db;$/;"	v
db	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $db;$/;"	v
error	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $error = '';$/;"	v
getBuilder	vendor\topthink\think-orm\src\db\Connection.php	/^    public function getBuilder()$/;"	f
getCache	vendor\topthink\think-orm\src\db\Connection.php	/^    public function getCache()$/;"	f
getCacheKey	vendor\topthink\think-orm\src\db\Connection.php	/^    protected function getCacheKey(BaseQuery $query): string$/;"	f
getConfig	vendor\topthink\think-orm\src\db\Connection.php	/^    public function getConfig(string $config = '')$/;"	f
getNumRows	vendor\topthink\think-orm\src\db\Connection.php	/^    public function getNumRows(): int$/;"	f
info	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $info = [];$/;"	v
key	vendor\topthink\think-orm\src\db\Connection.php	/^                $key = $this->getCacheKey($query);$/;"	v
key	vendor\topthink\think-orm\src\db\Connection.php	/^            $key = $query->getQueryGuid();$/;"	v
key	vendor\topthink\think-orm\src\db\Connection.php	/^            $key = 'think:' . $this->getConfig('database') . '.' . $query->getTable() . '|' . $query->getOptions('key');$/;"	v
linkID	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $linkID;$/;"	v
linkRead	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $linkRead;$/;"	v
linkWrite	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $linkWrite;$/;"	v
links	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $links = [];$/;"	v
listen	vendor\topthink\think-orm\src\db\Connection.php	/^        $listen = $this->db->getListen();$/;"	v
master	vendor\topthink\think-orm\src\db\Connection.php	/^                $master = null;$/;"	v
numRows	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $numRows = 0;$/;"	v
parseCache	vendor\topthink\think-orm\src\db\Connection.php	/^    protected function parseCache(BaseQuery $query, array $cache): CacheItem$/;"	f
queryStartTime	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $queryStartTime;$/;"	v
queryStr	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $queryStr = '';$/;"	v
readMaster	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $readMaster = false;$/;"	v
runtime	vendor\topthink\think-orm\src\db\Connection.php	/^            $runtime = number_format((microtime(true) - $this->queryStartTime), 6);$/;"	v
setCache	vendor\topthink\think-orm\src\db\Connection.php	/^    public function setCache(CacheInterface $cache)$/;"	f
setDb	vendor\topthink\think-orm\src\db\Connection.php	/^    public function setDb(DbManager $db)$/;"	f
sql	vendor\topthink\think-orm\src\db\Connection.php	/^            $sql     = $sql ?: $this->getLastsql();$/;"	v
sql	vendor\topthink\think-orm\src\db\Connection.php	/^    protected function trigger(string $sql = '', bool $master = false): void$/;"	v
transTimes	vendor\topthink\think-orm\src\db\Connection.php	/^    protected $transTimes = 0;$/;"	v
trigger	vendor\topthink\think-orm\src\db\Connection.php	/^    protected function trigger(string $sql = '', bool $master = false): void$/;"	f
ConnectionInterface	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^interface ConnectionInterface$/;"	i
close	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function close();$/;"	f
column	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function column(BaseQuery $query, string $column, string $key = ''): array;$/;"	f
commit	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function commit();$/;"	f
config	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function connect(array $config = [], $linkNum = 0);$/;"	v
config	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function getConfig(string $config = '');$/;"	v
connect	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function connect(array $config = [], $linkNum = 0);$/;"	f
dataSet	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function insertAll(BaseQuery $query, array $dataSet = []): int;$/;"	v
default	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function value(BaseQuery $query, string $field, $default = null);$/;"	v
delete	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function delete(BaseQuery $query): int;$/;"	f
find	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function find(BaseQuery $query): array;$/;"	f
getConfig	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function getConfig(string $config = '');$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function insert(BaseQuery $query, bool $getLastInsID = false);$/;"	v
getLastSql	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function getLastSql(): string;$/;"	f
getQueryClass	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function getQueryClass(): string;$/;"	f
insert	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function insert(BaseQuery $query, bool $getLastInsID = false);$/;"	f
insertAll	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function insertAll(BaseQuery $query, array $dataSet = []): int;$/;"	f
key	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function column(BaseQuery $query, string $column, string $key = ''): array;$/;"	v
rollback	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function rollback();$/;"	f
select	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function select(BaseQuery $query): array;$/;"	f
setCache	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function setCache(CacheInterface $cache);$/;"	f
setDb	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function setDb(DbManager $db);$/;"	f
startTrans	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function startTrans();$/;"	f
transaction	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function transaction(callable $callback);$/;"	f
update	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function update(BaseQuery $query): int;$/;"	f
value	vendor\topthink\think-orm\src\db\ConnectionInterface.php	/^    public function value(BaseQuery $query, string $field, $default = null);$/;"	f
Fetch	vendor\topthink\think-orm\src\db\Fetch.php	/^class Fetch$/;"	c
__call	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function __call($method, $args)$/;"	f
__construct	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function __construct(Query $query)$/;"	f
aggregate	vendor\topthink\think-orm\src\db\Fetch.php	/^    protected function aggregate(string $aggregate, string $field): string$/;"	f
array	vendor\topthink\think-orm\src\db\Fetch.php	/^            $array    = array_chunk($dataSet, $limit, true);$/;"	v
avg	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function avg(string $field): string$/;"	f
bind	vendor\topthink\think-orm\src\db\Fetch.php	/^                $bind = $this->query->getBind();$/;"	v
bind	vendor\topthink\think-orm\src\db\Fetch.php	/^            $bind   = $this->query->getBind();$/;"	v
bind	vendor\topthink\think-orm\src\db\Fetch.php	/^        $bind = $this->query->getBind();$/;"	v
builder	vendor\topthink\think-orm\src\db\Fetch.php	/^        $this->builder    = $this->connection->getBuilder();$/;"	v
builder	vendor\topthink\think-orm\src\db\Fetch.php	/^    protected $builder;$/;"	v
column	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function column(string $field, string $key = ''): string$/;"	f
connection	vendor\topthink\think-orm\src\db\Fetch.php	/^        $this->connection = $query->getConnection();$/;"	v
connection	vendor\topthink\think-orm\src\db\Fetch.php	/^    protected $connection;$/;"	v
count	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function count(string $field = '*'): string$/;"	f
data	vendor\topthink\think-orm\src\db\Fetch.php	/^        $data = !empty($data) ? $data : $options['data'];$/;"	v
data	vendor\topthink\think-orm\src\db\Fetch.php	/^        $data = array_merge($this->query->getOptions('data') ?: [], $data);$/;"	v
data	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function insert(array $data = []): string$/;"	v
data	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function insertGetId(array $data = []): string$/;"	v
data	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function save(array $data = [], bool $forceInsert = false): string$/;"	v
data	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function update(array $data = []): string$/;"	v
dataSet	vendor\topthink\think-orm\src\db\Fetch.php	/^            $dataSet = $options['data'];$/;"	v
dataSet	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function insertAll(array $dataSet = [], int $limit = null): string$/;"	v
default	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function value(string $field, $default = null, bool $one = true): string$/;"	v
delete	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function delete($data = null): string$/;"	f
fetch	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function fetch(string $sql): string$/;"	f
fetchSql	vendor\topthink\think-orm\src\db\Fetch.php	/^            $fetchSql = [];$/;"	v
field	vendor\topthink\think-orm\src\db\Fetch.php	/^            $field = $key . ',' . $field;$/;"	v
field	vendor\topthink\think-orm\src\db\Fetch.php	/^            $field = Str::snake(substr($method, 5));$/;"	v
field	vendor\topthink\think-orm\src\db\Fetch.php	/^        $field = $aggregate . '(' . $this->builder->parseKey($this->query, $field) . ') AS think_' . strtolower($aggregate);$/;"	v
field	vendor\topthink\think-orm\src\db\Fetch.php	/^        $field = array_map('trim', explode(',', $field));$/;"	v
field	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function count(string $field = '*'): string$/;"	v
find	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function find($data = null): string$/;"	f
findOrEmpty	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function findOrEmpty($data = null)$/;"	f
findOrFail	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function findOrFail($data = null): string$/;"	f
insert	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function insert(array $data = []): string$/;"	f
insertAll	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function insertAll(array $dataSet = [], int $limit = null): string$/;"	f
insertGetId	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function insertGetId(array $data = []): string$/;"	f
isUpdate	vendor\topthink\think-orm\src\db\Fetch.php	/^            $isUpdate = $this->query->parseUpdateData($data);$/;"	v
isUpdate	vendor\topthink\think-orm\src\db\Fetch.php	/^            $isUpdate = true;$/;"	v
key	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function column(string $field, string $key = ''): string$/;"	v
limit	vendor\topthink\think-orm\src\db\Fetch.php	/^            $limit = $options['limit'];$/;"	v
max	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function max(string $field): string$/;"	f
min	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function min(string $field): string$/;"	f
name	vendor\topthink\think-orm\src\db\Fetch.php	/^            $name = Str::snake(substr($method, 10));$/;"	v
options	vendor\topthink\think-orm\src\db\Fetch.php	/^        $options = $this->query->parseOptions();$/;"	v
pk	vendor\topthink\think-orm\src\db\Fetch.php	/^        $pk = $this->query->getPk();$/;"	v
query	vendor\topthink\think-orm\src\db\Fetch.php	/^            $query = $this->query->newQuery()->table([$subSql => '_group_count_']);$/;"	v
query	vendor\topthink\think-orm\src\db\Fetch.php	/^        $this->query      = $query;$/;"	v
query	vendor\topthink\think-orm\src\db\Fetch.php	/^    protected $query;$/;"	v
result	vendor\topthink\think-orm\src\db\Fetch.php	/^        $result = call_user_func_array([$this->query, $method], $args);$/;"	v
result	vendor\topthink\think-orm\src\db\Fetch.php	/^        return $result === $this->query ? $this : $result;$/;"	v
save	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function save(array $data = [], bool $forceInsert = false): string$/;"	f
select	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function select($data = null): string$/;"	f
selectInsert	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function selectInsert(array $fields, string $table): string$/;"	f
selectOrFail	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function selectOrFail($data = null): string$/;"	f
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^                $sql  = $this->builder->insertAll($this->query, $item);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^                $sql = $this->builder->delete($this->query);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->delete($this->query);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->insert($this->query);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->insertAll($this->query, $dataSet);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->select($this->query);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->select($this->query, $one);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->select($this->query, true);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->selectInsert($this->query, $fields, $table);$/;"	v
sql	vendor\topthink\think-orm\src\db\Fetch.php	/^        $sql = $this->builder->update($this->query);$/;"	v
subSql	vendor\topthink\think-orm\src\db\Fetch.php	/^            $subSql = $this->query->options($options)->field('count(' . $field . ') AS think_count')->bind($bind)->buildSql();$/;"	v
sum	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function sum(string $field): string$/;"	f
update	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function update(array $data = []): string$/;"	f
value	vendor\topthink\think-orm\src\db\Fetch.php	/^    public function value(string $field, $default = null, bool $one = true): string$/;"	f
Mongo	vendor\topthink\think-orm\src\db\Mongo.php	/^class Mongo extends BaseQuery$/;"	c
aggregate	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function aggregate(string $aggregate, $field, bool $force = false)$/;"	f
awaitData	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function awaitData(bool $awaitData)$/;"	f
batchSize	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function batchSize(int $batchSize)$/;"	f
chunk	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function chunk(int $count, callable $callback, $column = null, string $order = 'asc'): bool$/;"	f
cmd	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function cmd($command, $extra = null, string $db = ''): array$/;"	f
collation	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function collation(array $collation)$/;"	f
collection	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function collection(string $collection)$/;"	f
column	vendor\topthink\think-orm\src\db\Mongo.php	/^        $column  = $column ?: $this->getPk();$/;"	v
column	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function chunk(int $count, callable $callback, $column = null, string $order = 'asc'): bool$/;"	v
command	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function command(Command $command, string $dbName = '', ReadPreference $readPreference = null, $typeMap = null)$/;"	f
config	vendor\topthink\think-orm\src\db\Mongo.php	/^            $config   = $defaultConfig;$/;"	v
config	vendor\topthink\think-orm\src\db\Mongo.php	/^            $config   = array_merge($defaultConfig, $listRows);$/;"	v
count	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function count(string $field = null): int$/;"	f
cursor	vendor\topthink\think-orm\src\db\Mongo.php	/^        $cursor = $this->cmd('listCollections', null, $db);$/;"	v
db	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function listCollections(string $db = '')$/;"	v
dbName	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function command(Command $command, string $dbName = '', ReadPreference $readPreference = null, $typeMap = null)$/;"	v
dec	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function dec(string $field, float $step = 1)$/;"	f
defaultConfig	vendor\topthink\think-orm\src\db\Mongo.php	/^        $defaultConfig = [$/;"	v
end	vendor\topthink\think-orm\src\db\Mongo.php	/^                $end    = $resultSet->pop();$/;"	v
execute	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function execute(BulkWrite $bulk)$/;"	f
exhaust	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function exhaust(bool $exhaust)$/;"	f
extra	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function cmd($command, $extra = null, string $db = ''): array$/;"	v
field	vendor\topthink\think-orm\src\db\Mongo.php	/^            $field = array_map('trim', explode(',', $field));$/;"	v
field	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function count(string $field = null): int$/;"	v
field	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function field($field)$/;"	f
fieldType	vendor\topthink\think-orm\src\db\Mongo.php	/^        $fieldType = $this->getFieldsType();$/;"	v
force	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function aggregate(string $aggregate, $field, bool $force = false)$/;"	v
getCursor	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function getCursor(): Cursor$/;"	f
getDistinct	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function getDistinct(string $field)$/;"	f
getFieldType	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function getFieldType(string $field)$/;"	f
getFieldsType	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function getFieldsType(): array$/;"	f
getPk	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function getPk()$/;"	f
getQueryGuid	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function getQueryGuid($data = null): string$/;"	f
inc	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function inc(string $field, float $step = 1)$/;"	f
k	vendor\topthink\think-orm\src\db\Mongo.php	/^                foreach ($row['_id'] as $k => $v) {$/;"	v
key	vendor\topthink\think-orm\src\db\Mongo.php	/^                $key = $column;$/;"	v
key	vendor\topthink\think-orm\src\db\Mongo.php	/^        foreach ($field as $key => $val) {$/;"	v
lastId	vendor\topthink\think-orm\src\db\Mongo.php	/^                $lastId = is_array($end) ? $end[$key] : $end->getData($key);$/;"	v
length	vendor\topthink\think-orm\src\db\Mongo.php	/^            $length = $offset;$/;"	v
length	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function limit(int $offset, int $length = null)$/;"	v
limit	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function limit(int $offset, int $length = null)$/;"	f
listCollections	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function listCollections(string $db = '')$/;"	f
listRows	vendor\topthink\think-orm\src\db\Mongo.php	/^            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);$/;"	v
listRows	vendor\topthink\think-orm\src\db\Mongo.php	/^            $listRows = intval($config['list_rows']);$/;"	v
listRows	vendor\topthink\think-orm\src\db\Mongo.php	/^            $listRows = intval($listRows ?: $config['list_rows']);$/;"	v
maxTimeMS	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function maxTimeMS(string $maxTimeMS)$/;"	f
modifiers	vendor\topthink\think-orm\src\db\Mongo.php	/^        $modifiers = empty($options['modifiers']) ? [] : $options['modifiers'];$/;"	v
modifiers	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function modifiers(array $modifiers)$/;"	f
multiAggregate	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function multiAggregate(array $aggregate, array $groupBy): array$/;"	f
noCursorTimeout	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function noCursorTimeout(bool $noCursorTimeout)$/;"	f
offset	vendor\topthink\think-orm\src\db\Mongo.php	/^            $offset                = $listRows * ($page - 1);$/;"	v
offset	vendor\topthink\think-orm\src\db\Mongo.php	/^            $offset = 0;$/;"	v
oplogReplay	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function oplogReplay(bool $oplogReplay)$/;"	f
options	vendor\topthink\think-orm\src\db\Mongo.php	/^            $options = $this->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\Mongo.php	/^        $options = $this->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\Mongo.php	/^        $options = $this->options;$/;"	v
options	vendor\topthink\think-orm\src\db\Mongo.php	/^        $this->options = $options;$/;"	v
order	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function order($field, string $order = '')$/;"	f
order	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function order($field, string $order = '')$/;"	v
page	vendor\topthink\think-orm\src\db\Mongo.php	/^            $page                  = $page > 0 ? $page : 1;$/;"	v
page	vendor\topthink\think-orm\src\db\Mongo.php	/^        $page = $page < 1 ? 1 : $page;$/;"	v
page	vendor\topthink\think-orm\src\db\Mongo.php	/^        $page = isset($config['page']) ? (int) $config['page'] : Paginator::getCurrentPage($config['var_page']);$/;"	v
paginate	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function paginate($listRows = null, $simple = false): Paginator$/;"	f
parseOptions	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function parseOptions(): array$/;"	f
partial	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function partial(bool $partial)$/;"	f
projection	vendor\topthink\think-orm\src\db\Mongo.php	/^        $projection = [];$/;"	v
query	vendor\topthink\think-orm\src\db\Mongo.php	/^                $query = $this->options($options)$/;"	v
query	vendor\topthink\think-orm\src\db\Mongo.php	/^                $query = $this->options($options)->page($times, $count);$/;"	v
query	vendor\topthink\think-orm\src\db\Mongo.php	/^            $query = $this->options($options)->limit($count);$/;"	v
query	vendor\topthink\think-orm\src\db\Mongo.php	/^            $query = $this->options($options)->page($times, $count);$/;"	v
query	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function query(MongoQuery $query)$/;"	f
replace	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function replace(bool $replace = true)$/;"	f
replace	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function replace(bool $replace = true)$/;"	v
result	vendor\topthink\think-orm\src\db\Mongo.php	/^        $result = $this->cmd('aggregate', [strtolower($aggregate), $field]);$/;"	v
result	vendor\topthink\think-orm\src\db\Mongo.php	/^        $result = $this->cmd('count');$/;"	v
result	vendor\topthink\think-orm\src\db\Mongo.php	/^        $result = $this->cmd('distinct', $field);$/;"	v
result	vendor\topthink\think-orm\src\db\Mongo.php	/^        $result = $this->cmd('multiAggregate', [$aggregate, $groupBy]);$/;"	v
result	vendor\topthink\think-orm\src\db\Mongo.php	/^        $result = [];$/;"	v
resultSet	vendor\topthink\think-orm\src\db\Mongo.php	/^            $resultSet = $query->order($column, $order)->select();$/;"	v
resultSet	vendor\topthink\think-orm\src\db\Mongo.php	/^        $resultSet = $query->order($column, $order)->select();$/;"	v
results	vendor\topthink\think-orm\src\db\Mongo.php	/^            $results = $this->limit(($page - 1) * $listRows, $listRows + 1)->select();$/;"	v
results	vendor\topthink\think-orm\src\db\Mongo.php	/^            $results = $this->options($options)->page($page, $listRows)->select();$/;"	v
results	vendor\topthink\think-orm\src\db\Mongo.php	/^            $results = $this->page($page, $listRows)->select();$/;"	v
simple	vendor\topthink\think-orm\src\db\Mongo.php	/^            $simple = false;$/;"	v
simple	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function paginate($listRows = null, $simple = false): Paginator$/;"	v
skip	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function skip(int $skip)$/;"	f
slaveOk	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function slaveOk(bool $slaveOk)$/;"	f
step	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function dec(string $field, float $step = 1)$/;"	v
step	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function inc(string $field, float $step = 1)$/;"	v
table	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function table($table)$/;"	f
tailable	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function tailable(bool $tailable)$/;"	f
times	vendor\topthink\think-orm\src\db\Mongo.php	/^            $times = 1;$/;"	v
total	vendor\topthink\think-orm\src\db\Mongo.php	/^            $total   = $this->count();$/;"	v
total	vendor\topthink\think-orm\src\db\Mongo.php	/^            $total   = null;$/;"	v
total	vendor\topthink\think-orm\src\db\Mongo.php	/^            $total  = $simple;$/;"	v
typeMap	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function typeMap($typeMap)$/;"	f
value	vendor\topthink\think-orm\src\db\Mongo.php	/^        $value  = $result[0]['aggregate'] ?? 0;$/;"	v
withoutField	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function withoutField($field)$/;"	f
writeConcern	vendor\topthink\think-orm\src\db\Mongo.php	/^    public function writeConcern(WriteConcern $writeConcern)$/;"	f
PDOConnection	vendor\topthink\think-orm\src\db\PDOConnection.php	/^abstract class PDOConnection extends Connection implements ConnectionInterface$/;"	c
PDOStatement	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->PDOStatement = $this->linkID->prepare($sql);$/;"	v
PDOStatement	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->PDOStatement = null;$/;"	v
PDOStatement	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $PDOStatement;$/;"	v
__construct	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function __construct(array $config = [])$/;"	f
aggregate	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function aggregate(BaseQuery $query, string $aggregate, $field, bool $force = false)$/;"	f
array	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $array = array_chunk($dataSet, $limit, true);$/;"	v
attrCase	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->attrCase = $params[PDO::ATTR_CASE];$/;"	v
attrCase	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $attrCase = PDO::CASE_LOWER;$/;"	v
autoInsIDType	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function autoInsIDType(BaseQuery $query, string $insertId)$/;"	f
autoinc	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $autoinc = $key;$/;"	v
autoinc	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $autoinc = $info['_autoinc'] ?? null;$/;"	v
batchQuery	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function batchQuery(BaseQuery $query, array $sqlArray = [], array $bind = []): bool$/;"	f
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = $query->getBind();$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = $this->bindType[$type];$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = PDO::PARAM_BOOL;$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = PDO::PARAM_INT;$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = PDO::PARAM_STR;$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = [];$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $bind = self::PARAM_FLOAT;$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $bind = $query->getBind();$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->bind = $bind;$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $bind = [];$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function bindValue(array $bind = []): void$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function queryPDOStatement(BaseQuery $query, string $sql, array $bind = []): PDOStatement$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function execute(BaseQuery $query, string $sql, array $bind = [], bool $origin = false): int$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getCursor(BaseQuery $query, string $sql, array $bind = [], $model = null, $condition = null)$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getPDOStatement(string $sql, array $bind = [], bool $master = false, bool $procedure = false): PDOStatement$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getRealSql(string $sql, array $bind = []): string$/;"	v
bind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function query(BaseQuery $query, $sql, array $bind = []): array$/;"	v
bindParam	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function bindParam(array $bind): void$/;"	f
bindType	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $bindType = [$/;"	v
bindValue	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function bindValue(array $bind = []): void$/;"	f
breakMatchStr	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->breakMatchStr = array_merge($this->breakMatchStr, (array) $config['break_match_str']);$/;"	v
breakMatchStr	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $breakMatchStr = [$/;"	v
builder	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->builder = new $class($this);$/;"	v
cacheFile	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $cacheFile = $this->config['schema_cache_path'] . $schema . '.php';$/;"	v
cacheItem	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $cacheItem = $this->parseCache($query, $options['cache']);$/;"	v
cacheItem	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $cacheItem = $this->parseCache($query, $query->getOptions('cache'));$/;"	v
class	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $class = $this->getBuilderClass();$/;"	v
close	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function close()$/;"	f
column	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $column = null;$/;"	v
column	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function column(BaseQuery $query, string $column, string $key = ''): array$/;"	f
commit	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function commit(): void$/;"	f
commitXa	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function commitXa(string $xid)$/;"	f
condition	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $condition = $options['where']['AND'] ?? null;$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $config = $this->config;$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $config = [];$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $config = [$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function __construct(array $config = [])$/;"	v
config	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function connect(array $config = [], $linkNum = 0, $autoConnection = false): PDO$/;"	v
connect	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function connect(array $config = [], $linkNum = 0, $autoConnection = false): PDO$/;"	f
content	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                    $content = '<?php ' . PHP_EOL . 'return ' . var_export($info, true) . ';';$/;"	v
count	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $count = 0;$/;"	v
createPdo	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function createPdo($dsn, $username, $password, $params)$/;"	f
cursor	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function cursor(BaseQuery $query)$/;"	f
data	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $data = $options['data'];$/;"	v
dataSet	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function insertAll(BaseQuery $query, array $dataSet = [], int $limit = 0): int$/;"	v
dbConfig	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $dbConfig = [];$/;"	v
dbMaster	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $dbMaster = [];$/;"	v
dbMaster	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $dbMaster = false;$/;"	v
default	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function value(BaseQuery $query, string $field, $default = null, bool $one = true)$/;"	v
delete	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function delete(BaseQuery $query): int$/;"	f
error	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $error = $error[1] . ':' . $error[2];$/;"	v
error	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $error = $this->PDOStatement->errorInfo();$/;"	v
error	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $error = '';$/;"	v
error	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $error = $e->getMessage();$/;"	v
execute	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function execute(BaseQuery $query, string $sql, array $bind = [], bool $origin = false): int$/;"	f
fetch	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getTableInfo($tableName, string $fetch = '')$/;"	v
fetchType	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $fetchType = PDO::FETCH_ASSOC;$/;"	v
field	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $field = $column;$/;"	v
field	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $field = $key . ',' . $column;$/;"	v
field	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $field = $aggregate . '(' . (!empty($distinct) ? 'DISTINCT ' : '') . $this->builder->parseKey($query, $field, true) . ') AS think_' . strtolower($aggregate);$/;"	v
field	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $field = array_map('trim', explode(',', $field));$/;"	v
field	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getFieldsType($tableName, string $field = null)$/;"	v
fieldCase	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function fieldCase(array $info): array$/;"	f
fields	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $fields = array_keys($resultSet[0]);$/;"	v
fields	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $fields = $this->getFields($tableName);$/;"	v
find	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function find(BaseQuery $query): array$/;"	f
force	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function aggregate(BaseQuery $query, string $aggregate, $field, bool $force = false)$/;"	v
free	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function free(): void$/;"	f
getAutoInc	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getAutoInc($tableName)$/;"	f
getBuilderClass	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getBuilderClass(): string$/;"	f
getCursor	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getCursor(BaseQuery $query, string $sql, array $bind = [], $model = null, $condition = null)$/;"	f
getError	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getError(): string$/;"	f
getFieldBindType	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getFieldBindType(string $type): int$/;"	f
getFieldType	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function getFieldType(string $type): string$/;"	f
getFields	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    abstract public function getFields(string $tableName);$/;"	f
getFieldsBind	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getFieldsBind($tableName): array$/;"	f
getFieldsType	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getFieldsType($tableName, string $field = null)$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getLastInsID(BaseQuery $query, string $sequence = null)$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function insert(BaseQuery $query, bool $getLastInsID = false)$/;"	v
getLastSql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getLastSql(): string$/;"	f
getPDOStatement	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getPDOStatement(string $sql, array $bind = [], bool $master = false, bool $procedure = false): PDOStatement$/;"	f
getPdo	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getPdo()$/;"	f
getPk	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getPk($tableName)$/;"	f
getQueryClass	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getQueryClass(): string$/;"	f
getRealSql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getRealSql(string $sql, array $bind = []): string$/;"	f
getResult	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function getResult(bool $procedure = false): array$/;"	f
getTableFields	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getTableFields($tableName): array$/;"	f
getTableFieldsInfo	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getTableFieldsInfo(string $tableName): array$/;"	f
getTableInfo	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getTableInfo($tableName, string $fetch = '')$/;"	f
getTables	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    abstract public function getTables(string $dbName);$/;"	f
info	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $info = $this->getTableFieldsInfo($tableName);$/;"	v
info	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $info = array_change_key_case($info);$/;"	v
info	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $info = array_change_key_case($info, CASE_UPPER);$/;"	v
info	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $info = include $cacheFile;$/;"	v
info	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $info   = [];$/;"	v
info	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $info = [];$/;"	v
initConnect	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function initConnect(bool $master = true): void$/;"	f
insert	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function insert(BaseQuery $query, bool $getLastInsID = false)$/;"	f
insertAll	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function insertAll(BaseQuery $query, array $dataSet = [], int $limit = 0): int$/;"	f
insertId	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $insertId = (float) $insertId;$/;"	v
insertId	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $insertId = (int) $insertId;$/;"	v
insertId	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $insertId = $this->linkID->lastInsertId($sequence);$/;"	v
insertId	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $insertId = '';$/;"	v
isBreak	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function isBreak($e): bool$/;"	f
item	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $item = [];$/;"	v
key	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $key       = $cacheItem->getKey();$/;"	v
key	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $key    = $key ?: array_shift($fields);$/;"	v
key	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        foreach ($bind as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        foreach ($fields as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function column(BaseQuery $query, string $column, string $key = ''): array$/;"	v
lastInsId	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $lastInsId = $this->getLastInsID($query, $sequence);$/;"	v
limit	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $limit = 1000;$/;"	v
linkID	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $this->linkID = $this->linkRead;$/;"	v
linkID	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $this->linkID = $this->linkWrite;$/;"	v
linkID	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->linkID = $this->connect();$/;"	v
linkID	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->linkID    = null;$/;"	v
linkRead	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                    $this->linkRead = $this->multiConnect(false);$/;"	v
linkRead	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->linkRead  = null;$/;"	v
linkWrite	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                    $this->linkWrite = $this->multiConnect(true);$/;"	v
linkWrite	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->linkWrite = null;$/;"	v
links	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->links     = [];$/;"	v
m	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $m = floor(mt_rand(0, $this->config['master_num'] - 1));$/;"	v
master	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $master    = !empty($options['master']) ? true : false;$/;"	v
master	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $master    = $query->getOptions('master') ? true : false;$/;"	v
master	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function initConnect(bool $master = true): void$/;"	v
master	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function multiConnect(bool $master = false): PDO$/;"	v
multiConnect	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function multiConnect(bool $master = false): PDO$/;"	f
name	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            foreach ($info as $name => $val) {$/;"	v
numRows	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->numRows = $this->PDOStatement->rowCount();$/;"	v
numRows	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->numRows = count($item);$/;"	v
numRows	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->numRows = count($result);$/;"	v
options	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $options   = $query->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $options = $query->parseOptions();$/;"	v
param	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $param = array_shift($val);$/;"	v
param	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $param = is_numeric($key) ? $key + 1 : ':' . $key;$/;"	v
params	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $params = $config['params'] + $this->params;$/;"	v
params	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $params = $this->params;$/;"	v
params	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $params = [$/;"	v
parseDsn	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    abstract protected function parseDsn(array $config);$/;"	f
parseSavepoint	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function parseSavepoint(string $name): string$/;"	f
parseSavepointRollBack	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function parseSavepointRollBack(string $name): string$/;"	f
pdo	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $pdo = $this->getPDOStatement($sql, $query->getBind(), $options['master']);$/;"	v
pdo	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function pdo(BaseQuery $query): PDOStatement$/;"	f
pk	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $pk = $query->getAutoInc();$/;"	v
pk	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $pk          = count($pk) > 1 ? $pk : $pk[0];$/;"	v
pk	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $pk      = $info['_pk'] ?? null;$/;"	v
pk	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $pk = $query->getAutoInc();$/;"	v
prepareXa	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function prepareXa(string $xid)$/;"	f
procedure	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $procedure = !empty($options['procedure']) ? true : in_array(strtolower(substr(trim($sql), 0, 4)), ['call', 'exec']);$/;"	v
procedure	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $procedure = $query->getOptions('procedure') ? true : in_array(strtolower(substr(trim($sql), 0, 4)), ['call', 'exec']);$/;"	v
procedure	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function getResult(bool $procedure = false): array$/;"	v
procedure	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function procedure(): array$/;"	f
query	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function query(BaseQuery $query, $sql, array $bind = []): array$/;"	f
queryPDOStatement	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function queryPDOStatement(BaseQuery $query, string $sql, array $bind = []): PDOStatement$/;"	f
queryStartTime	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->queryStartTime = microtime(true);$/;"	v
queryStartTime	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $queryStartTime;$/;"	v
queryStr	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->queryStr = $sql;$/;"	v
queryStr	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $queryStr = '';$/;"	v
r	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $r = $m;$/;"	v
r	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $r = $this->config['slave_no'];$/;"	v
r	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $r = floor(mt_rand($this->config['master_num'], count($config['hostname']) - 1));$/;"	v
r	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $r = floor(mt_rand(0, count($config['hostname']) - 1));$/;"	v
r	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        return $this->connect($dbConfig, $r, $r == $m ? false : $dbMaster);$/;"	v
reConnectTimes	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->reConnectTimes = 0;$/;"	v
reConnectTimes	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $reConnectTimes = 0;$/;"	v
readMaster	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $this->readMaster = true;$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $result = $callback($this);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $result = $this->PDOStatement->bindValue($param, $val);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $result = $this->PDOStatement->bindValue($param, $val[0], $val[1]);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $result = call_user_func_array([$this->PDOStatement, 'bindParam'], $val);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = $resultSet[0] ?? [];$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = $this->getResult();$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = 'bool';$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = 'datetime';$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = 'float';$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = 'int';$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = 'string';$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = 'timestamp';$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = [];$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = array_column($resultSet, $column, $key);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = array_column($resultSet, null, $key);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $result = null;$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = $pdo->fetchColumn();$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = $this->PDOStatement->fetchAll($this->fetchType);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = $this->db->trigger('before_find', $query);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = $this->execute($query, $sql, $query->getBind());$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = $this->getTableInfo($tableName, 'type');$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = $this->value($query, $field, 0, false);$/;"	v
result	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $result = '' == $sql ? 0 : $this->execute($query, $sql, $query->getBind());$/;"	v
resultSet	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $resultSet = $this->query($query, function ($query) {$/;"	v
resultSet	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $resultSet = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
resultSet	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $resultSet = $this->db->trigger('before_select', $query);$/;"	v
resultSet	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $resultSet = $this->getResult($procedure);$/;"	v
rollback	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function rollback(): void$/;"	f
rollbackXa	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function rollbackXa(string $xid)$/;"	f
schema	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $schema = $tableName;$/;"	v
schema	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $schema = $this->getConfig('database') . '.' . $tableName;$/;"	v
select	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function select(BaseQuery $query): array$/;"	f
selectInsert	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function selectInsert(BaseQuery $query, array $fields, string $table): int$/;"	f
sequence	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $sequence  = $options['sequence'] ?? null;$/;"	v
sequence	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function getLastInsID(BaseQuery $query, string $sequence = null)$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                    $sql = $this->builder->insertAll($query, $item);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $sql  = $sql($query);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $sql = is_numeric($key) ?$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->delete($query);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->insert($query);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->insertAll($query, $dataSet);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->select($query);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->select($query, $one);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->selectInsert($query, $fields, $table);$/;"	v
sql	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $sql = $this->builder->update($query);$/;"	v
sqlArray	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function batchQuery(BaseQuery $query, array $sqlArray = [], array $bind = []): bool$/;"	v
startTime	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $startTime = microtime(true);$/;"	v
startTrans	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function startTrans(): void$/;"	f
startTransXa	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function startTransXa(string $xid)$/;"	f
supportSavepoint	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected function supportSavepoint(): bool$/;"	f
tableName	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $tableName = key($tableName) ?: current($tableName);$/;"	v
tag	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $tag       = $cacheItem->getTag();$/;"	v
transTimes	vendor\topthink\think-orm\src\db\PDOConnection.php	/^        $this->transTimes = max(0, $this->transTimes - 1);$/;"	v
transTimes	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    protected $transTimes = 0;$/;"	v
transaction	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function transaction(callable $callback)$/;"	f
type	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $type  = is_array($val) ? $val[1] : PDO::PARAM_STR;$/;"	v
type	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $type = $this->getFieldBindType($pk);$/;"	v
update	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function update(BaseQuery $query): int$/;"	f
value	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $value = '\\'' . addslashes($value) . '\\'';$/;"	v
value	vendor\topthink\think-orm\src\db\PDOConnection.php	/^                $value = 0;$/;"	v
value	vendor\topthink\think-orm\src\db\PDOConnection.php	/^            $value = is_array($val) ? $val[0] : $val;$/;"	v
value	vendor\topthink\think-orm\src\db\PDOConnection.php	/^    public function value(BaseQuery $query, string $field, $default = null, bool $one = true)$/;"	f
Query	vendor\topthink\think-orm\src\db\Query.php	/^class Query extends BaseQuery$/;"	c
autoinc	vendor\topthink\think-orm\src\db\Query.php	/^            $this->autoinc = $this->connection->getAutoInc($this->getTable());$/;"	v
autoinc	vendor\topthink\think-orm\src\db\Query.php	/^        $this->autoinc = $autoinc;$/;"	v
autoinc	vendor\topthink\think-orm\src\db\Query.php	/^    public function autoinc(string $autoinc)$/;"	f
batchQuery	vendor\topthink\think-orm\src\db\Query.php	/^    public function batchQuery(array $sql = []): bool$/;"	f
bind	vendor\topthink\think-orm\src\db\Query.php	/^        $bind = $this->bind;$/;"	v
bind	vendor\topthink\think-orm\src\db\Query.php	/^    public function execute(string $sql, array $bind = []): int$/;"	v
bind	vendor\topthink\think-orm\src\db\Query.php	/^    public function orderRaw(string $field, array $bind = [])$/;"	v
bind	vendor\topthink\think-orm\src\db\Query.php	/^    public function query(string $sql, array $bind = []): array$/;"	v
buildSql	vendor\topthink\think-orm\src\db\Query.php	/^    public function buildSql(bool $sub = true): string$/;"	f
chunk	vendor\topthink\think-orm\src\db\Query.php	/^    public function chunk(int $count, callable $callback, $column = null, string $order = 'asc'): bool$/;"	f
column	vendor\topthink\think-orm\src\db\Query.php	/^        $column  = $column ?: $this->getPk();$/;"	v
column	vendor\topthink\think-orm\src\db\Query.php	/^    public function chunk(int $count, callable $callback, $column = null, string $order = 'asc'): bool$/;"	v
comment	vendor\topthink\think-orm\src\db\Query.php	/^    public function comment(string $comment)$/;"	f
connection	vendor\topthink\think-orm\src\db\Query.php	/^        $connection = clone $this->connection;$/;"	v
cursor	vendor\topthink\think-orm\src\db\Query.php	/^    public function cursor($data = null)$/;"	f
dec	vendor\topthink\think-orm\src\db\Query.php	/^    public function dec(string $field, float $step = 1)$/;"	f
distinct	vendor\topthink\think-orm\src\db\Query.php	/^    public function distinct(bool $distinct = true)$/;"	f
distinct	vendor\topthink\think-orm\src\db\Query.php	/^    public function distinct(bool $distinct = true)$/;"	v
duplicate	vendor\topthink\think-orm\src\db\Query.php	/^    public function duplicate($duplicate)$/;"	f
end	vendor\topthink\think-orm\src\db\Query.php	/^                $end    = $resultSet->pop();$/;"	v
execute	vendor\topthink\think-orm\src\db\Query.php	/^    public function execute(string $sql, array $bind = []): int$/;"	f
exp	vendor\topthink\think-orm\src\db\Query.php	/^    public function exp(string $field, string $value)$/;"	f
extra	vendor\topthink\think-orm\src\db\Query.php	/^    public function extra(string $extra)$/;"	f
fetch	vendor\topthink\think-orm\src\db\Query.php	/^    public function fetchSql(bool $fetch = true)$/;"	v
fetchSql	vendor\topthink\think-orm\src\db\Query.php	/^    public function fetchSql(bool $fetch = true)$/;"	f
fieldRaw	vendor\topthink\think-orm\src\db\Query.php	/^    public function fieldRaw(string $field)$/;"	f
force	vendor\topthink\think-orm\src\db\Query.php	/^    public function force(string $force)$/;"	f
getAutoInc	vendor\topthink\think-orm\src\db\Query.php	/^    public function getAutoInc()$/;"	f
getPdo	vendor\topthink\think-orm\src\db\Query.php	/^    public function getPdo(): PDOStatement$/;"	f
getPk	vendor\topthink\think-orm\src\db\Query.php	/^    public function getPk()$/;"	f
getQueryGuid	vendor\topthink\think-orm\src\db\Query.php	/^    public function getQueryGuid($data = null): string$/;"	f
group	vendor\topthink\think-orm\src\db\Query.php	/^    public function group($group)$/;"	f
having	vendor\topthink\think-orm\src\db\Query.php	/^    public function having(string $having)$/;"	f
inc	vendor\topthink\think-orm\src\db\Query.php	/^    public function inc(string $field, float $step = 1)$/;"	f
key	vendor\topthink\think-orm\src\db\Query.php	/^                $key = $column;$/;"	v
lastId	vendor\topthink\think-orm\src\db\Query.php	/^                $lastId = is_array($end) ? $end[$key] : $end->getData($key);$/;"	v
options	vendor\topthink\think-orm\src\db\Query.php	/^        $options = $this->getOptions();$/;"	v
order	vendor\topthink\think-orm\src\db\Query.php	/^    public function orderField(string $field, array $values, string $order = '')$/;"	v
orderField	vendor\topthink\think-orm\src\db\Query.php	/^    public function orderField(string $field, array $values, string $order = '')$/;"	f
orderRand	vendor\topthink\think-orm\src\db\Query.php	/^    public function orderRand()$/;"	f
orderRaw	vendor\topthink\think-orm\src\db\Query.php	/^    public function orderRaw(string $field, array $bind = [])$/;"	f
partition	vendor\topthink\think-orm\src\db\Query.php	/^    public function partition($partition)$/;"	f
pk	vendor\topthink\think-orm\src\db\Query.php	/^            $this->pk = $this->connection->getPk($this->getTable());$/;"	v
procedure	vendor\topthink\think-orm\src\db\Query.php	/^    public function procedure(bool $procedure = true)$/;"	f
procedure	vendor\topthink\think-orm\src\db\Query.php	/^    public function procedure(bool $procedure = true)$/;"	v
query	vendor\topthink\think-orm\src\db\Query.php	/^                $query = $this->options($options)$/;"	v
query	vendor\topthink\think-orm\src\db\Query.php	/^                $query = $this->options($options)->page($times, $count);$/;"	v
query	vendor\topthink\think-orm\src\db\Query.php	/^            $query = $this->options($options)->limit($count);$/;"	v
query	vendor\topthink\think-orm\src\db\Query.php	/^            $query = $this->options($options)->page($times, $count);$/;"	v
query	vendor\topthink\think-orm\src\db\Query.php	/^    public function query(string $sql, array $bind = []): array$/;"	f
replace	vendor\topthink\think-orm\src\db\Query.php	/^    public function replace(bool $replace = true)$/;"	f
replace	vendor\topthink\think-orm\src\db\Query.php	/^    public function replace(bool $replace = true)$/;"	v
resultSet	vendor\topthink\think-orm\src\db\Query.php	/^            $resultSet = $query->bind($bind)->order($column, $order)->select();$/;"	v
resultSet	vendor\topthink\think-orm\src\db\Query.php	/^        $resultSet = $query->order($column, $order)->select();$/;"	v
sequence	vendor\topthink\think-orm\src\db\Query.php	/^    public function sequence(string $sequence = null)$/;"	f
sequence	vendor\topthink\think-orm\src\db\Query.php	/^    public function sequence(string $sequence = null)$/;"	v
sql	vendor\topthink\think-orm\src\db\Query.php	/^    public function batchQuery(array $sql = []): bool$/;"	v
step	vendor\topthink\think-orm\src\db\Query.php	/^    public function dec(string $field, float $step = 1)$/;"	v
step	vendor\topthink\think-orm\src\db\Query.php	/^    public function inc(string $field, float $step = 1)$/;"	v
sub	vendor\topthink\think-orm\src\db\Query.php	/^    public function buildSql(bool $sub = true): string$/;"	v
tableRaw	vendor\topthink\think-orm\src\db\Query.php	/^    public function tableRaw(string $table)$/;"	f
times	vendor\topthink\think-orm\src\db\Query.php	/^            $times = 1;$/;"	v
using	vendor\topthink\think-orm\src\db\Query.php	/^    public function using($using)$/;"	f
Raw	vendor\topthink\think-orm\src\db\Raw.php	/^class Raw$/;"	c
__construct	vendor\topthink\think-orm\src\db\Raw.php	/^    public function __construct(string $value)$/;"	f
__toString	vendor\topthink\think-orm\src\db\Raw.php	/^    public function __toString()$/;"	f
getValue	vendor\topthink\think-orm\src\db\Raw.php	/^    public function getValue(): string$/;"	f
value	vendor\topthink\think-orm\src\db\Raw.php	/^        $this->value = $value;$/;"	v
value	vendor\topthink\think-orm\src\db\Raw.php	/^    protected $value;$/;"	v
Where	vendor\topthink\think-orm\src\db\Where.php	/^class Where implements ArrayAccess$/;"	c
__construct	vendor\topthink\think-orm\src\db\Where.php	/^    public function __construct(array $where = [], bool $enclose = false)$/;"	f
__get	vendor\topthink\think-orm\src\db\Where.php	/^    public function __get($name)$/;"	f
__isset	vendor\topthink\think-orm\src\db\Where.php	/^    public function __isset($name)$/;"	f
__set	vendor\topthink\think-orm\src\db\Where.php	/^    public function __set($name, $value)$/;"	f
__unset	vendor\topthink\think-orm\src\db\Where.php	/^    public function __unset($name)$/;"	f
condition	vendor\topthink\think-orm\src\db\Where.php	/^        $condition = $where[1] ?? null;$/;"	v
enclose	vendor\topthink\think-orm\src\db\Where.php	/^        $this->enclose = $enclose;$/;"	v
enclose	vendor\topthink\think-orm\src\db\Where.php	/^    protected $enclose = false;$/;"	v
enclose	vendor\topthink\think-orm\src\db\Where.php	/^    public function enclose(bool $enclose = true)$/;"	f
enclose	vendor\topthink\think-orm\src\db\Where.php	/^    public function enclose(bool $enclose = true)$/;"	v
key	vendor\topthink\think-orm\src\db\Where.php	/^        foreach ($this->where as $key => $val) {$/;"	v
offsetExists	vendor\topthink\think-orm\src\db\Where.php	/^    public function offsetExists($name)$/;"	f
offsetGet	vendor\topthink\think-orm\src\db\Where.php	/^    public function offsetGet($name)$/;"	f
offsetSet	vendor\topthink\think-orm\src\db\Where.php	/^    public function offsetSet($name, $value)$/;"	f
offsetUnset	vendor\topthink\think-orm\src\db\Where.php	/^    public function offsetUnset($name)$/;"	f
op	vendor\topthink\think-orm\src\db\Where.php	/^        $op        = $where[0];$/;"	v
parse	vendor\topthink\think-orm\src\db\Where.php	/^    public function parse(): array$/;"	f
parseItem	vendor\topthink\think-orm\src\db\Where.php	/^    protected function parseItem(string $field, array $where = []): array$/;"	f
where	vendor\topthink\think-orm\src\db\Where.php	/^                $where = [$field, $op, ''];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^                $where = [$field, '=', $op];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^                $where = [$field, 'NOTNULL', ''];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^                $where = [$field, 'NULL', ''];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^            $where = [$field, $op, $condition];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^        $this->where   = $where;$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^        $where = [];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^    protected $where = [];$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^    protected function parseItem(string $field, array $where = []): array$/;"	v
where	vendor\topthink\think-orm\src\db\Where.php	/^    public function __construct(array $where = [], bool $enclose = false)$/;"	v
Mongo	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^class Mongo$/;"	c
__construct	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function __construct(Connection $connection)$/;"	f
aggregate	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function aggregate(Query $query, array $extra): Command$/;"	f
array	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                        $array = explode('&', $field);$/;"	v
array	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                        $array = explode('|', $field);$/;"	v
bulk	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $bulk    = new BulkWrite;$/;"	v
bulk	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $bulk = new BulkWrite;$/;"	v
cmd	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $cmd     = ['collStats' => $options['table']];$/;"	v
cmd	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $cmd     = ['listCollections' => 1];$/;"	v
cmd	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $cmd = [$/;"	v
collStats	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function collStats(Query $query): Command$/;"	f
command	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $command = new Command($cmd);$/;"	v
connection	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $this->connection = $connection;$/;"	v
connection	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected $connection;$/;"	v
count	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function count(Query $query): Command$/;"	f
data	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $data = $this->parseData($query, $data);$/;"	v
data	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $data = [];$/;"	v
data	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $data  = $this->parseSet($query, $options['data']);$/;"	v
data	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $data = $this->parseData($query, $options['data']);$/;"	v
delete	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function delete(Query $query): BulkWrite$/;"	f
deleteOptions	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $deleteOptions = ['limit' => 0];$/;"	v
deleteOptions	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $deleteOptions = ['limit' => 1];$/;"	v
distinct	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function distinct(Query $query, $field): Command$/;"	f
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                        $exp = $this->exp[$exp];$/;"	v
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                    $exp = strtolower($exp);$/;"	v
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                $exp   = $value[0];$/;"	v
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                $exp = $this->exp[$exp];$/;"	v
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $exp = strtolower($exp);$/;"	v
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $result[$key] = ['$' . $exp => $value];$/;"	v
exp	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected $exp = ['<>' => 'ne', '=' => 'eq', '>' => 'gt', '>=' => 'gte', '<' => 'lt', '<=' => 'lte', 'in' => 'in', 'not in' => 'nin', 'nin' => 'nin', 'mod' => 'mod', 'exists' => 'exists', 'null' => 'null', 'notnull' => 'not null', 'not null' => 'not null', 'regex' => 'regex', 'type' => 'type', 'all' => 'all', '> time' => '> time', '< time' => '< time', 'between' => 'between', 'not between' => 'not between', 'between time' => 'between time', 'not between time' => 'not between time', 'notbetween time' => 'not between time', 'like' => 'like', 'near' => 'near', 'size' => 'size'];$/;"	v
field	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                        $field            = is_string($field) ? $field : '';$/;"	v
field	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                    $field = array_shift($value);$/;"	v
field	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $field = '_id';$/;"	v
field	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            foreach ($val as $field => $value) {$/;"	v
field	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseValue(Query $query, $value, $field = '')$/;"	v
filter	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $filter = [];$/;"	v
fun	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $groups[$field . '_' . $fun] = ['$' . $fun => '$' . $field];$/;"	v
fun	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            ['$group' => ['_id' => $group, 'aggregate' => ['$' . $fun => '$' . $field]]],$/;"	v
fun	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        foreach ($aggregate as $fun => $field) {$/;"	v
getConnection	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function getConnection(): Connection$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function getLastInsID()$/;"	f
group	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $group = isset($options['group']) ? '$' . $options['group'] : null;$/;"	v
groups	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $groups = ['_id' => []];$/;"	v
insert	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function insert(Query $query): BulkWrite$/;"	f
insertAll	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function insertAll(Query $query, array $dataSet): BulkWrite$/;"	f
insertId	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $this->insertId = $insertId;$/;"	v
insertId	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $this->insertId = [];$/;"	v
insertId	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected $insertId = [];$/;"	v
item	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $item = $this->parseKey($query, $key);$/;"	v
k	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                $k        = '$' . $exp;$/;"	v
k	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $k            = '$' . $exp;$/;"	v
k	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            foreach ($value as $k => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $key = '_id';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $key = $field ? $this->parseKey($query, $field) : '';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        foreach ($data as $key => $val) {$/;"	v
listcollections	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function listcollections(): Command$/;"	f
log	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function log($type, $data, $options = [])$/;"	f
logic	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $logic = '$' . strtolower($logic);$/;"	v
logic	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        foreach ($where as $logic => $val) {$/;"	v
multiAggregate	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function multiAggregate(Query $query, $extra): Command$/;"	f
one	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function select(Query $query, bool $one = false): MongoQuery$/;"	v
options	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $options       = $query->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $options = $query->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function log($type, $data, $options = [])$/;"	v
parseData	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseData(Query $query, array $data): array$/;"	f
parseDateTime	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseDateTime(Query $query, $value, $key)$/;"	f
parseKey	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseKey(Query $query, string $key): string$/;"	f
parseSet	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseSet(Query $query, array $data): array$/;"	f
parseValue	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseValue(Query $query, $value, $field = '')$/;"	f
parseWhere	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function parseWhere(Query $query, array $where): array$/;"	f
parseWhereItem	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    protected function parseWhereItem(Query $query, $field, $val): array$/;"	f
pipeline	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $pipeline = [$/;"	v
query	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                    $query = new Query($this->connection);$/;"	v
query	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $query = new MongoQuery($where, $options);$/;"	v
result	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $result = [];$/;"	v
select	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function select(Query $query, bool $one = false): MongoQuery$/;"	f
type	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $type = $query->getFieldType($key);$/;"	v
update	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^    public function update(Query $query): BulkWrite$/;"	f
updateOptions	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $updateOptions = ['multi' => false];$/;"	v
updateOptions	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $updateOptions = ['multi' => true];$/;"	v
val	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $val = ['=', $val];$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                    $value = date('Y-m-d H:i:s', $value);$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                    $value = date('Y-m-d', $value);$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                $value = $value[1];$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^                $value = strtotime($value) ?: $value;$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $value        = is_array($value) ? $value : explode(',', $value);$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $value = is_array($value) ? $value : explode(',', $value);$/;"	v
where	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^            $where = [];$/;"	v
where	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $where   = $this->parseWhere($query, $options['where']);$/;"	v
where	vendor\topthink\think-orm\src\db\builder\Mongo.php	/^        $where = $this->parseWhere($query, $options['where']);$/;"	v
Mysql	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^class Mysql extends Builder$/;"	c
alias	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $alias = $query->getOptions('alias');$/;"	v
allowFields	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $allowFields = $options['field'];$/;"	v
allowFields	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $allowFields = array_keys($bind);$/;"	v
bind	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $bind = $query->getFieldsBindType();$/;"	v
data	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $data = $this->parseData($query, $data, $allowFields, $bind);$/;"	v
data	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $data = $this->parseData($query, $options['data']);$/;"	v
delete	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function delete(Query $query): string$/;"	f
deleteSql	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected $deleteSql = 'DELETE%EXTRA% FROM %TABLE%%PARTITION%%USING%%JOIN%%WHERE%%ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
duplicate	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $duplicate = explode(',', $duplicate);$/;"	v
fields	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $fields = [];$/;"	v
insert	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function insert(Query $query): string$/;"	f
insertAll	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function insertAll(Query $query, array $dataSet, bool $replace = false): string$/;"	f
insertAllSql	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected $insertAllSql = '%INSERT%%EXTRA% INTO %TABLE%%PARTITION% (%FIELD%) VALUES %DATA% %DUPLICATE%%COMMENT%';$/;"	v
insertFields	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $insertFields = array_keys($data);$/;"	v
insertSql	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected $insertSql = '%INSERT%%EXTRA% INTO %TABLE%%PARTITION% SET %SET% %DUPLICATE%%COMMENT%';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $key = '`' . $key . '`';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $key = '`' . $table . '`.' . $key;$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $key = trim($key);$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        foreach ($data as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        foreach ($duplicate as $key => $val) {$/;"	v
name	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $name      = $query->bindValue($val, $query->getConnection()->getFieldBindType($key));$/;"	v
one	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function select(Query $query, bool $one = false): string$/;"	v
options	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $options = $query->getOptions();$/;"	v
parseDuplicate	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected function parseDuplicate(Query $query, $duplicate): string$/;"	f
parseFindInSet	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected function parseFindInSet(Query $query, string $key, string $exp, $value, string $field): string$/;"	f
parseKey	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	f
parsePartition	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected function parsePartition(Query $query, $partition): string$/;"	f
parseRand	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected function parseRand(Query $query): string$/;"	f
parseRegexp	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected function parseRegexp(Query $query, string $key, string $exp, $value, string $field): string$/;"	f
parser	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected $parser = [$/;"	v
partition	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $partition = explode(',', $partition);$/;"	v
replace	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function insertAll(Query $query, array $dataSet, bool $replace = false): string$/;"	v
select	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function select(Query $query, bool $one = false): string$/;"	f
selectSql	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected $selectSql = 'SELECT%DISTINCT%%EXTRA% %FIELD% FROM %TABLE%%PARTITION%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%UNION%%ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
set	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $set = [];$/;"	v
strict	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $table = $alias[$table];$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $table = $query->getOptions('table');$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $table = is_array($table) ? array_shift($table) : $table;$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $table = str_replace('.', '`.`', $table);$/;"	v
update	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    public function update(Query $query): string$/;"	f
updateSql	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^    protected $updateSql = 'UPDATE%EXTRA% %TABLE%%PARTITION% %JOIN% SET %SET% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
updates	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $updates = [];$/;"	v
val	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^                $val       = $this->parseKey($query, $val);$/;"	v
value	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^            $value = $value->getValue();$/;"	v
values	vendor\topthink\think-orm\src\db\builder\Mysql.php	/^        $values = [];$/;"	v
Oracle	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^class Oracle extends Builder$/;"	c
key	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^            $key            = $field . '."' . $name . '"';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^        $key = trim($key);$/;"	v
limit	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^            $limit = explode(',', $limit);$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^                $limitStr = "(numrow>" . $limit[0] . ") AND (numrow<=" . ($limit[0] + $limit[1]) . ")";$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^                $limitStr = "(numrow>0 AND numrow<=" . $limit[0] . ")";$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^        $limitStr = '';$/;"	v
lock	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    protected function parseLock(Query $query, $lock = false): string$/;"	v
parseKey	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	f
parseLimit	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    protected function parseLimit(Query $query, string $limit): string$/;"	f
parseLock	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    protected function parseLock(Query $query, $lock = false): string$/;"	f
parseRand	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    protected function parseRand(Query $query): string$/;"	f
selectSql	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    protected $selectSql = 'SELECT * FROM (SELECT thinkphp.*, rownum AS numrow FROM (SELECT  %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%) thinkphp ) %LIMIT%%COMMENT%';$/;"	v
strict	vendor\topthink\think-orm\src\db\builder\Oracle.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	v
Pgsql	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^class Pgsql extends Builder$/;"	c
alias	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^            $alias = $query->getOptions('alias');$/;"	v
insertAllSql	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^    protected $insertAllSql = 'INSERT INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertSql	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^    protected $insertSql = 'INSERT INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^                $key = '"' . $key . '"';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^            $key            = '"' . $field . '"' . '->>\\'' . $name . '\\'';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^            $key = $table . '.' . $key;$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^        $key = trim($key);$/;"	v
limit	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^            $limit = explode(',', $limit);$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^        $limitStr = '';$/;"	v
parseKey	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	f
parseLimit	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^    public function parseLimit(Query $query, string $limit): string$/;"	f
parseRand	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^    protected function parseRand(Query $query): string$/;"	f
strict	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^                $table = $alias[$table];$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^                $table = $query->getOptions('table');$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Pgsql.php	/^                $table = is_array($table) ? array_shift($table) : $table;$/;"	v
Sqlite	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^class Sqlite extends Builder$/;"	c
alias	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^            $alias = $query->getOptions('alias');$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^            $key = $table . '.' . $key;$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^        $key = trim($key);$/;"	v
limit	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^            $limit = explode(',', $limit);$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^        $limitStr = '';$/;"	v
parseKey	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	f
parseLimit	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^    public function parseLimit(Query $query, string $limit): string$/;"	f
parseRand	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^    protected function parseRand(Query $query): string$/;"	f
strict	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^                $table = $alias[$table];$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^                $table = $query->getOptions('table');$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Sqlite.php	/^                $table = is_array($table) ? array_shift($table) : $table;$/;"	v
Sqlsrv	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^class Sqlsrv extends Builder$/;"	c
alias	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^            $alias = $query->getOptions('alias');$/;"	v
array	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^        $array = [];$/;"	v
deleteSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected $deleteSql = 'DELETE FROM %TABLE% %USING% FROM %TABLE% %JOIN% %WHERE% %LIMIT% %LOCK%%COMMENT%';$/;"	v
insertAllSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected $insertAllSql = 'INSERT INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected $insertSql = 'INSERT INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^            $key = '[' . $key . ']';$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^            $key = '[' . $table . '].' . $key;$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^        $key = trim($key);$/;"	v
key	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^        foreach ($order as $key => $val) {$/;"	v
limit	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^        $limit = explode(',', $limit);$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^            $limitStr = '(T1.ROW_NUMBER BETWEEN ' . $limit[0] . ' + 1 AND ' . $limit[0] . ' + ' . $limit[1] . ')';$/;"	v
limitStr	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^            $limitStr = '(T1.ROW_NUMBER BETWEEN 1 AND ' . $limit[0] . ")";$/;"	v
parseKey	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	f
parseLimit	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected function parseLimit(Query $query, string $limit): string$/;"	f
parseOrder	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected function parseOrder(Query $query, array $order): string$/;"	f
parseRand	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected function parseRand(Query $query): string$/;"	f
selectInsert	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    public function selectInsert(Query $query, array $fields, string $table): string$/;"	f
selectInsertSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected $selectInsertSql = 'SELECT %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%';$/;"	v
selectSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^        $this->selectSql = $this->selectInsertSql;$/;"	v
selectSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected $selectSql = 'SELECT T1.* FROM (SELECT thinkphp.*, ROW_NUMBER() OVER (%ORDER%) AS ROW_NUMBER FROM (SELECT %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%) AS thinkphp) AS T1 %LIMIT%%COMMENT%';$/;"	v
sort	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^                    $sort = $val;$/;"	v
sort	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^                $sort    = in_array(strtolower($sort), ['asc', 'desc'], true) ? ' ' . $sort : '';$/;"	v
strict	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    public function parseKey(Query $query, $key, bool $strict = false): string$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^                $table = $alias[$table];$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^                $table = $query->getOptions('table');$/;"	v
table	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^                $table = is_array($table) ? array_shift($table) : $table;$/;"	v
updateSql	vendor\topthink\think-orm\src\db\builder\Sqlsrv.php	/^    protected $updateSql = 'UPDATE %TABLE% SET %SET% FROM %TABLE% %JOIN% %WHERE% %LIMIT% %LOCK%%COMMENT%';$/;"	v
aggregate	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    protected function aggregate(string $aggregate, $field, bool $force = false)$/;"	f
avg	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function avg($field): float$/;"	f
count	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^            $count = $query->aggregate('COUNT', '*');$/;"	v
count	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^            $count = $this->aggregate('COUNT', $field);$/;"	v
count	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function count(string $field = '*'): int$/;"	f
field	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function count(string $field = '*'): int$/;"	v
force	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    protected function aggregate(string $aggregate, $field, bool $force = false)$/;"	v
force	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function max($field, bool $force = true)$/;"	v
force	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function min($field, bool $force = true)$/;"	v
max	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function max($field, bool $force = true)$/;"	f
min	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function min($field, bool $force = true)$/;"	f
options	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^            $options = $this->getOptions();$/;"	v
query	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^            $query = $this->newQuery()->table([$subSql => '_group_count_']);$/;"	v
subSql	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^            $subSql  = $this->options($options)$/;"	v
sum	vendor\topthink\think-orm\src\db\concern\AggregateQuery.php	/^    public function sum($field): float$/;"	f
alias	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                    $alias = $join;$/;"	v
alias	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^            $alias = array_shift($join);$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function fullJoin($join, string $condition = null, array $bind = [])$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function join($join, string $condition = null, string $type = 'INNER', array $bind = [])$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function leftJoin($join, string $condition = null, array $bind = [])$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function rightJoin($join, string $condition = null, array $bind = [])$/;"	v
field	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                $field = explode(',', $field);$/;"	v
field	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function view($join, $field = true, $on = null, string $type = 'INNER', array $bind = [])$/;"	v
fields	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^            $fields = $alias . '.*';$/;"	v
fields	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^        $fields = [];$/;"	v
fullJoin	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function fullJoin($join, string $condition = null, array $bind = [])$/;"	f
getJoinTable	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    protected function getJoinTable($join, &$alias = null)$/;"	f
join	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^        $join = trim($join);$/;"	v
join	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function join($join, string $condition = null, string $type = 'INNER', array $bind = [])$/;"	f
key	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                foreach ($options['where'][$logic] as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^            foreach ($field as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^            foreach ($options['order'] as $key => $val) {$/;"	v
leftJoin	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function leftJoin($join, string $condition = null, array $bind = [])$/;"	f
name	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                        $name = $alias . '.' . $key;$/;"	v
name	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                        $name = $key;$/;"	v
parseView	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    protected function parseView(array &$options): void$/;"	f
rightJoin	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function rightJoin($join, string $condition = null, array $bind = [])$/;"	f
table	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                $table = $join;$/;"	v
table	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^                $table = $this->getTable($table);$/;"	v
table	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^            $table = $join;$/;"	v
table	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^            $table = [$table => $alias];$/;"	v
table	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^        $table  = $this->getJoinTable($join, $alias);$/;"	v
table	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^        $table = $this->getJoinTable($join);$/;"	v
view	vendor\topthink\think-orm\src\db\concern\JoinAndViewQuery.php	/^    public function view($join, $field = true, $on = null, string $type = 'INNER', array $bind = [])$/;"	f
aggregate	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    protected function withAggregate($relations, string $aggregate = 'count', $field = '*', bool $subQuery = true)$/;"	v
append	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function append(array $append)$/;"	f
callback	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withAttr($name, callable $callback = null)$/;"	v
closure	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $closure  = $relation;$/;"	v
closure	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            $closure = null;$/;"	v
data	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withSearch(array $fields, array $data = [], string $prefix = '')$/;"	v
expire	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            $expire = $key;$/;"	v
field	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $field    = $relation;$/;"	v
field	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            $field   = true;$/;"	v
fieldName	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $fieldName = is_numeric($key) ? $field : $key;$/;"	v
first	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $first = false;$/;"	v
first	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        $first = true;$/;"	v
getModel	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function getModel()$/;"	f
has	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function has(string $relation, string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '')$/;"	f
hasWhere	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function hasWhere(string $relation, $where = [], string $fields = '*', string $joinType = '')$/;"	f
hidden	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function hidden(array $hidden)$/;"	f
joinType	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withJoin($with, string $joinType = '')$/;"	v
key	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            $key    = true;$/;"	v
key	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        foreach ($fields as $key => $field) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        foreach ($resultSet as $key => &$result) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        foreach ($with as $key => $relation) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withCache($relation = true, $key = true, $expire = null, string $tag = null)$/;"	v
method	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $method    = 'search' . Str::studly($fieldName) . 'Attr';$/;"	v
method	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $method = 'scope' . trim($name);$/;"	v
model	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        $this->model = $model;$/;"	v
model	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    protected $model;$/;"	v
model	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function model(Model $model)$/;"	f
name	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            foreach ($options['with_attr'] as $name => $val) {$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            foreach ($this->options['with_attr'] as $name => $val) {$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        foreach ($relations as $name => $relation) {$/;"	v
operator	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function has(string $relation, string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '')$/;"	v
options	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    protected function resultToModel(array &$result, array $options = [], bool $resultSet = false, array $withRelationAttr = []): void$/;"	v
relation	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $relation = $key;$/;"	v
relation	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^                $relation = strstr($relation, '.', true);$/;"	v
relation	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function relation(array $relation)$/;"	f
relations	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        $relations = (array) $relation;$/;"	v
result	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            $result = $this->model->eagerly($this, $relation, $field, $joinType, $closure, $first);$/;"	v
result	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        $result = $this->model$/;"	v
resultSetToModelCollection	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    protected function resultSetToModelCollection(array $resultSet): ModelCollection$/;"	f
resultToModel	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    protected function resultToModel(array &$result, array $options = [], bool $resultSet = false, array $withRelationAttr = []): void$/;"	f
scope	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^            $scope = explode(',', $scope);$/;"	v
scope	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function scope($scope, ...$args)$/;"	f
subQuery	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withAvg($relation, string $field, bool $subQuery = true)$/;"	v
subQuery	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withCount($relation, bool $subQuery = true)$/;"	v
subQuery	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withMax($relation, string $field, bool $subQuery = true)$/;"	v
subQuery	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withMin($relation, string $field, bool $subQuery = true)$/;"	v
subQuery	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withSum($relation, string $field, bool $subQuery = true)$/;"	v
visible	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function visible(array $visible)$/;"	f
where	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function hasWhere(string $relation, $where = [], string $fields = '*', string $joinType = '')$/;"	v
with	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        $with  = (array) $with;$/;"	v
with	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function with($with)$/;"	f
withAggregate	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    protected function withAggregate($relations, string $aggregate = 'count', $field = '*', bool $subQuery = true)$/;"	f
withAttr	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withAttr($name, callable $callback = null)$/;"	f
withAvg	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withAvg($relation, string $field, bool $subQuery = true)$/;"	f
withCache	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withCache($relation = true, $key = true, $expire = null, string $tag = null)$/;"	f
withCount	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withCount($relation, bool $subQuery = true)$/;"	f
withJoin	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withJoin($with, string $joinType = '')$/;"	f
withMax	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withMax($relation, string $field, bool $subQuery = true)$/;"	f
withMin	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withMin($relation, string $field, bool $subQuery = true)$/;"	f
withRelationAttr	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^        $withRelationAttr = $withRelationAttr ?? [];$/;"	v
withSearch	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withSearch(array $fields, array $data = [], string $prefix = '')$/;"	f
withSum	vendor\topthink\think-orm\src\db\concern\ModelRelationQuery.php	/^    public function withSum($relation, string $field, bool $subQuery = true)$/;"	f
bind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^            $this->bind = [];$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^        $bind = $this->bind;$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^        $this->bind = array_merge($this->bind, $value);$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    protected $bind = [];$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    protected function bindParams(string &$sql, array $bind = []): void$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    public function bind(array $value)$/;"	f
bindParams	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    protected function bindParams(string &$sql, array $bind = []): void$/;"	f
bindValue	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    public function bindValue($value, int $type = null, string $name = null)$/;"	f
clear	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    public function getBind(bool $clear = true): array$/;"	v
getBind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    public function getBind(bool $clear = true): array$/;"	f
isBind	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    public function isBind($key)$/;"	f
key	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^        foreach ($bind as $key => $value) {$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^                $name = $this->bindValue($value);$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^                $name = $this->bindValue($value[0], $value[1], $value[2] ?? null);$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^        $name = $name ?: 'ThinkBind_' . (count($this->bind) + 1) . '_' . mt_rand() . '_';$/;"	v
sql	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^                $sql = str_replace(':' . $key, ':' . $name, $sql);$/;"	v
sql	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^                $sql = substr_replace($sql, ':' . $name, strpos($sql, '?'), 1);$/;"	v
type	vendor\topthink\think-orm\src\db\concern\ParamsBind.php	/^    public function bindValue($value, int $type = null, string $name = null)$/;"	v
allowEmpty	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function allowEmpty(bool $allowEmpty = true)$/;"	f
allowEmpty	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function allowEmpty(bool $allowEmpty = true)$/;"	v
class	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^            $class = get_class($this->model);$/;"	v
fail	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function failException(bool $fail = true)$/;"	v
failException	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function failException(bool $fail = true)$/;"	f
filterResult	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function filterResult(&$result): void$/;"	f
findOrEmpty	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function findOrEmpty($data = null)$/;"	f
findOrFail	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function findOrFail($data = null)$/;"	f
getResultAttr	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function getResultAttr(array &$result, array $withAttr = []): void$/;"	f
json	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function jsonResult(array &$result, array $json = [], bool $assoc = false, array $withRelationAttr = []): void$/;"	v
jsonResult	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function jsonResult(array &$result, array $json = [], bool $assoc = false, array $withRelationAttr = []): void$/;"	f
key	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^                foreach ($withRelationAttr[$name] as $key => $closure) {$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^            $name = Str::snake($name);$/;"	v
name	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^        foreach ($withAttr as $name => $closure) {$/;"	v
result	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^            $result = array_diff_key($result, array_flip($array));$/;"	v
result	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^            $result = array_intersect_key($result, array_flip($array));$/;"	v
result	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function result(array &$result): void$/;"	f
resultSet	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^        $resultSet = new Collection($resultSet);$/;"	v
resultSet	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function resultSet(array &$resultSet): void$/;"	f
resultToEmpty	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function resultToEmpty()$/;"	f
selectOrFail	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    public function selectOrFail($data = null)$/;"	f
table	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^        $table = $this->getTable();$/;"	v
throwNotFound	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function throwNotFound(): void$/;"	f
withAttr	vendor\topthink\think-orm\src\db\concern\ResultOperation.php	/^    protected function getResultAttr(array &$result, array $withAttr = []): void$/;"	v
fieldType	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^        $fieldType = $this->getFieldType($field);$/;"	v
fieldType	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^        $fieldType = $this->getFieldsType();$/;"	v
getFieldBindType	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getFieldBindType(string $field): int$/;"	f
getFieldType	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getFieldType(string $field)$/;"	f
getFields	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getFields(string $tableName = ''): array$/;"	f
getFieldsBindType	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getFieldsBindType(): array$/;"	f
getFieldsType	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getFieldsType(): array$/;"	f
getTableFields	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getTableFields($tableName = ''): array$/;"	f
tableName	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^            $tableName = $this->getTable();$/;"	v
tableName	vendor\topthink\think-orm\src\db\concern\TableFieldInfo.php	/^    public function getFields(string $tableName = ''): array$/;"	v
day	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^            $day = date('Y-m-d', strtotime($day));$/;"	v
day	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereDay(string $field, string $day = 'today', int $step = 1, string $logic = 'AND')$/;"	v
endTime	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^        $endTime   = strtotime(($step > 0 ? '+' : '-') . abs($step) . ' ' . $interval . (abs($step) > 1 ? 's' : ''), $startTime);$/;"	v
interval	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereTimeInterval(string $field, string $start, string $interval = 'day', int $step = 1, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereBetweenTime(string $field, $startTime, $endTime, string $logic = 'AND')$/;"	v
month	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^            $month = date('Y-m', strtotime($month));$/;"	v
month	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereMonth(string $field, string $month = 'this month', int $step = 1, string $logic = 'AND')$/;"	v
op	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^            $op = is_array($range) ? 'between' : '>=';$/;"	v
range	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^                $range = $op;$/;"	v
range	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^                $range = $this->timeRule[$op];$/;"	v
range	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereTime(string $field, string $op, $range = null, string $logic = 'AND')$/;"	v
startTime	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^        $startTime = strtotime($start);$/;"	v
timeRule	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^        $this->timeRule = array_merge($this->timeRule, $rule);$/;"	v
timeRule	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    protected $timeRule = [$/;"	v
timeRule	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function timeRule(array $rule)$/;"	f
week	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^            $week = date('Y-m-d', strtotime($week));$/;"	v
week	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereWeek(string $field, string $week = 'this week', int $step = 1, string $logic = 'AND')$/;"	v
whereBetweenTime	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereBetweenTime(string $field, $startTime, $endTime, string $logic = 'AND')$/;"	f
whereBetweenTimeField	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereBetweenTimeField(string $startField, string $endField)$/;"	f
whereDay	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereDay(string $field, string $day = 'today', int $step = 1, string $logic = 'AND')$/;"	f
whereMonth	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereMonth(string $field, string $month = 'this month', int $step = 1, string $logic = 'AND')$/;"	f
whereNotBetweenTime	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereNotBetweenTime(string $field, $startTime, $endTime)$/;"	f
whereNotBetweenTimeField	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereNotBetweenTimeField(string $startField, string $endField)$/;"	f
whereTime	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereTime(string $field, string $op, $range = null, string $logic = 'AND')$/;"	f
whereTimeInterval	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereTimeInterval(string $field, string $start, string $interval = 'day', int $step = 1, string $logic = 'AND')$/;"	f
whereWeek	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereWeek(string $field, string $week = 'this week', int $step = 1, string $logic = 'AND')$/;"	f
whereYear	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereYear(string $field, string $year = 'this year', int $step = 1, string $logic = 'AND')$/;"	f
year	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^            $year = date('Y', strtotime($year));$/;"	v
year	vendor\topthink\think-orm\src\db\concern\TimeFieldQuery.php	/^    public function whereYear(string $field, string $year = 'this year', int $step = 1, string $logic = 'AND')$/;"	v
commit	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^    public function commit(): void$/;"	f
db	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^                $db = $db->getConnection();$/;"	v
dbs	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^    public function transactionXa($callback, array $dbs = [])$/;"	v
key	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^        foreach ($dbs as $key => $db) {$/;"	v
result	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^                $result = call_user_func_array($callback, [$this]);$/;"	v
result	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^            $result = null;$/;"	v
rollback	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^    public function rollback(): void$/;"	f
startTrans	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^    public function startTrans(): void$/;"	f
transaction	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^    public function transaction(callable $callback)$/;"	f
transactionXa	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^    public function transactionXa($callback, array $dbs = [])$/;"	f
xid	vendor\topthink\think-orm\src\db\concern\Transaction.php	/^        $xid = uniqid('xa');$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $bind = isset($param[2]) && is_array($param[2]) ? $param[2] : [];$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereExp(string $field, string $where, array $bind = [], string $logic = 'AND')$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereOrRaw(string $where, array $bind = [])$/;"	v
bind	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereRaw(string $where, array $bind = [], string $logic = 'AND')$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $condition = $condition($this);$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $condition = $op;$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $condition = new Raw($condition);$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function useSoftDelete(string $field, $condition = null)$/;"	v
condition	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereFieldRaw(string $field, $op, $condition = null, string $logic = 'AND')$/;"	v
field	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $field = $this->options['via'] . '.' . $field;$/;"	v
field2	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $field2   = $operator;$/;"	v
field2	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereColumn(string $field1, string $operator, string $field2 = null, string $logic = 'AND')$/;"	v
key	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                foreach ($where as $key => &$val) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            foreach ($field as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            foreach ($this->options['where'][$logic] as $key => $val) {$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            foreach ($this->options['where'] as $logic => &$where) {$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^        $logic = strtoupper($logic);$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function removeWhereField(string $field, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereBetween(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereExists($condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereFindInSet(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereIn(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereLike(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotBetween(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotExists($condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotIn(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotLike(string $field, $condition, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotNull(string $field, string $logic = 'AND')$/;"	v
logic	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNull(string $field, string $logic = 'AND')$/;"	v
op	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $op        = '=';$/;"	v
op	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function where($field, $op = null, $condition = null)$/;"	v
op	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	v
op	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereXor($field, $op = null, $condition = null)$/;"	v
operator	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $operator = '=';$/;"	v
otherwise	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function when($condition, $query, $otherwise = null)$/;"	v
param	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^        $param = func_get_args();$/;"	v
param	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function parseWhereExp(string $logic, $field, $op, $condition, array $param = [], bool $strict = false)$/;"	v
param	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function parseWhereItem(string $logic, $field, $op, $condition, array $param = []): array$/;"	v
parseArrayWhereItems	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function parseArrayWhereItems(array $field, string $logic)$/;"	f
parseQueryWhere	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function parseQueryWhere(BaseQuery $query): void$/;"	f
parseWhereExp	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function parseWhereExp(string $logic, $field, $op, $condition, array $param = [], bool $strict = false)$/;"	f
parseWhereItem	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function parseWhereItem(string $logic, $field, $op, $condition, array $param = []): array$/;"	f
removeWhereField	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function removeWhereField(string $field, string $logic = 'AND')$/;"	f
useSoftDelete	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function useSoftDelete(string $field, $condition = null)$/;"	f
via	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $via = $query->getOptions('via');$/;"	v
when	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function when($condition, $query, $otherwise = null)$/;"	f
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $where = $this->whereEq($field, $condition);$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $where = $this->whereEq($field, $op);$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $where = [$field, $op, $condition, $logic];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $where = [$field, $op, ''];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $where = [$field, 'NOTNULL', ''];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^                $where = [$field, 'NULL', ''];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $where = $field ? [$field, $op, $condition, $param[2] ?? null] : [];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $where = $field;$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $where = $param;$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $where = $this->parseWhereItem($logic, $field, $op, $condition, $param);$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $where = [$field, $op, is_string($condition) ? new Raw($condition) : $condition];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^            $where = [];$/;"	v
where	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function where($field, $op = null, $condition = null)$/;"	f
whereBetween	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereBetween(string $field, $condition, string $logic = 'AND')$/;"	f
whereColumn	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereColumn(string $field1, string $operator, string $field2 = null, string $logic = 'AND')$/;"	f
whereEq	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    protected function whereEq(string $field, $value): array$/;"	f
whereExists	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereExists($condition, string $logic = 'AND')$/;"	f
whereExp	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereExp(string $field, string $where, array $bind = [], string $logic = 'AND')$/;"	f
whereFieldRaw	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereFieldRaw(string $field, $op, $condition = null, string $logic = 'AND')$/;"	f
whereFindInSet	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereFindInSet(string $field, $condition, string $logic = 'AND')$/;"	f
whereIn	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereIn(string $field, $condition, string $logic = 'AND')$/;"	f
whereLike	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereLike(string $field, $condition, string $logic = 'AND')$/;"	f
whereNotBetween	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotBetween(string $field, $condition, string $logic = 'AND')$/;"	f
whereNotExists	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotExists($condition, string $logic = 'AND')$/;"	f
whereNotIn	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotIn(string $field, $condition, string $logic = 'AND')$/;"	f
whereNotLike	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotLike(string $field, $condition, string $logic = 'AND')$/;"	f
whereNotNull	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNotNull(string $field, string $logic = 'AND')$/;"	f
whereNull	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereNull(string $field, string $logic = 'AND')$/;"	f
whereOr	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	f
whereOrRaw	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereOrRaw(string $where, array $bind = [])$/;"	f
whereRaw	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereRaw(string $where, array $bind = [], string $logic = 'AND')$/;"	f
whereXor	vendor\topthink\think-orm\src\db\concern\WhereQuery.php	/^    public function whereXor($field, $op = null, $condition = null)$/;"	f
Mongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^class Mongo extends Connection implements ConnectionInterface$/;"	c
__construct	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function __construct(array $config = [])$/;"	f
buildUrl	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    private function buildUrl(): string$/;"	f
builder	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->builder = new $class($this);$/;"	v
bulk	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $bulk = $this->builder->delete($query);$/;"	v
bulk	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $bulk = $this->builder->insert($query);$/;"	v
bulk	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $bulk = $this->builder->insertAll($query, $dataSet);$/;"	v
bulk	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $bulk = $this->builder->update($query);$/;"	v
cacheItem	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $cacheItem = $this->parseCache($query, $options['cache']);$/;"	v
cacheItem	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $cacheItem = $this->parseCache($query, $query->getOptions('cache'));$/;"	v
class	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $class = $this->getBuilderClass();$/;"	v
close	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function close()$/;"	f
cmd	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function cmd(BaseQuery $query, $command, $extra = null, string $db = ''): array$/;"	f
column	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function column(BaseQuery $query, string $field, string $key = ''): array$/;"	f
command	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $command = $this->builder->$command($query, $extra);$/;"	v
command	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $command = new Command($command);$/;"	v
command	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function command(Command $command, string $dbName = '', ReadPreference $readPreference = null, $typeMap = null, bool $master = false): array$/;"	f
commit	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function commit()$/;"	f
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $config = $this->config;$/;"	v
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $config = [];$/;"	v
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected $config = [$/;"	v
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function __construct(array $config = [])$/;"	v
config	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function connect(array $config = [], $linkNum = 0)$/;"	v
connect	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function connect(array $config = [], $linkNum = 0)$/;"	f
convertObjectID	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected function convertObjectID(array &$data): void$/;"	f
cursor	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->cursor    = null;$/;"	v
cursor	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->cursor = $this->mongo->executeCommand($dbName, $command, $readPreference);$/;"	v
cursor	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->cursor = $this->mongo->executeQuery($namespace, $mongoQuery, $readPreference);$/;"	v
cursor	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected $cursor; \/\/ MongoCursor Object$/;"	v
cursor	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function cursor(BaseQuery $query)$/;"	f
data	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $data      = $options['data'];$/;"	v
data	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $data   = array_shift($resultSet);$/;"	v
dataSet	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function insertAll(BaseQuery $query, array $dataSet = []): int$/;"	v
db	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function db(string $db = null)$/;"	f
db	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function db(string $db = null)$/;"	v
dbConfig	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $dbConfig = [];$/;"	v
dbName	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->dbName  = $config['database'];$/;"	v
dbName	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->dbName = $db;$/;"	v
dbName	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $dbName = $dbName ?: $this->dbName;$/;"	v
dbName	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->dbName  = $this->config['database'];$/;"	v
dbName	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected $dbName  = '';$/;"	v
dbName	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function command(Command $command, string $dbName = '', ReadPreference $readPreference = null, $typeMap = null, bool $master = false): array$/;"	v
default	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function value(BaseQuery $query, string $field, $default = null)$/;"	v
delete	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function delete(BaseQuery $query): int$/;"	f
execute	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function execute(BaseQuery $query, BulkWrite $bulk)$/;"	f
extra	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function cmd(BaseQuery $query, $command, $extra = null, string $db = ''): array$/;"	v
find	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function find(BaseQuery $query): array$/;"	f
getBuilder	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getBuilder(): Builder$/;"	f
getBuilderClass	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getBuilderClass(): string$/;"	f
getCursor	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getCursor(BaseQuery $query, $mongoQuery, bool $master = false): Cursor$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getLastInsID(BaseQuery $query)$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function insert(BaseQuery $query, bool $getLastInsID = false)$/;"	v
getLastSql	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getLastSql(): string$/;"	f
getMongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getMongo()$/;"	f
getQueryClass	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getQueryClass(): string$/;"	f
getResult	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected function getResult($typeMap = null): array$/;"	f
getTableFields	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getTableFields($tableName): array$/;"	f
hostList	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $hostList = is_string($this->config['hostname']) ? explode(',', $this->config['hostname']) : $this->config['hostname'];$/;"	v
id	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $id = $id->__toString();$/;"	v
id	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $id = $this->builder->getLastInsID();$/;"	v
initConnect	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected function initConnect(bool $master = true): void$/;"	f
insert	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function insert(BaseQuery $query, bool $getLastInsID = false)$/;"	f
insertAll	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function insertAll(BaseQuery $query, array $dataSet = []): int$/;"	f
item	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                    $item = $item->__toString();$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $key       = $cacheItem->getKey();$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function column(BaseQuery $query, string $field, string $key = ''): array$/;"	v
lastInsId	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $lastInsId = $this->getLastInsID($query);$/;"	v
linkRead	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                    $this->linkRead = $this->multiConnect(false);$/;"	v
linkRead	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->linkRead  = null;$/;"	v
linkWrite	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                    $this->linkWrite = $this->multiConnect(true);$/;"	v
linkWrite	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->linkWrite = null;$/;"	v
links	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->links     = [];$/;"	v
m	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $m = floor(mt_rand(0, $this->config['master_num'] - 1));$/;"	v
manager	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $manager = new Manager($this->buildUrl(), $this->config['params']);$/;"	v
master	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $master = $query->getOptions('master') ? true : false;$/;"	v
master	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected function initConnect(bool $master = true): void$/;"	v
master	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected function multiConnect(bool $master = false): Manager$/;"	v
master	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function getCursor(BaseQuery $query, $mongoQuery, bool $master = false): Cursor$/;"	v
mongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->mongo = $this->linkRead;$/;"	v
mongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->mongo = $this->linkWrite;$/;"	v
mongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->mongo = $this->connect();$/;"	v
mongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->mongo     = null;$/;"	v
mongo	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected $mongo; \/\/ MongoDb Object$/;"	v
mongoLog	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function mongoLog(string $type, $data, array $options = [])$/;"	f
mongoQuery	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $mongoQuery = $mongoQuery($query);$/;"	v
mongoQuery	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $mongoQuery = $this->builder->select($query);$/;"	v
mongoQuery	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $mongoQuery = $this->builder->select($query, true);$/;"	v
multiConnect	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected function multiConnect(bool $master = false): Manager$/;"	f
namespace	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $namespace = $this->dbName . '.' . $namespace;$/;"	v
namespace	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $namespace = $options['table'];$/;"	v
numRows	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->numRows = $writeResult->getMatchedCount();$/;"	v
numRows	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->numRows = count($result);$/;"	v
options	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $options   = $query->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $options = $query->getOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $options = $query->parseOptions();$/;"	v
options	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->options = $options;$/;"	v
options	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function mongoLog(string $type, $data, array $options = [])$/;"	v
pk	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $pk        = $query->getPk();$/;"	v
portList	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $portList = is_string($this->config['hostport']) ? explode(',', $this->config['hostport']) : $this->config['hostport'];$/;"	v
projection	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $projection = $field;$/;"	v
projection	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $projection = $key . ',' . $field;$/;"	v
query	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function query(BaseQuery $query, $mongoQuery): array$/;"	f
queryStartTime	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->queryStartTime = microtime(true);$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->queryStr = $data . '(' . json_encode($options) . ');';$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->queryStr = $type . '(' . ($data ? json_encode($data) : '') . ')';$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->queryStr = $type . '(' . ($data ? json_encode($data) : '') . ');';$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->queryStr = $type . '(' . json_encode($options) . ',' . json_encode($data) . ');';$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $this->queryStr = 'runCommand(' . ($data ? json_encode($data) : '') . ');';$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->queryStr = 'db' . strstr($namespace, '.') . '.' . $this->queryStr;$/;"	v
queryStr	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->queryStr = 'db.' . $this->queryStr;$/;"	v
r	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                    $r = $m;$/;"	v
r	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $r = $this->config['slave_no'];$/;"	v
r	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                $r = floor(mt_rand($this->config['master_num'], count($config['hostname']) - 1));$/;"	v
r	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $r = floor(mt_rand(0, count($config['hostname']) - 1));$/;"	v
readPreference	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $readPreference       = $options['readPreference'] ?? null;$/;"	v
replicaSetConnect	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function replicaSetConnect(): Manager$/;"	f
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $result = $data[$field];$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $result = $resultSet[0] ?? [];$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $result = [];$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $result = array_column($resultSet, $field, $key);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $result = array_column($resultSet, null, $key);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $result = false;$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $result      = $writeResult->getInsertedCount();$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $result = $this->cursor->toArray();$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $result = $this->db->trigger('before_find', $query);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $result = $writeResult->getDeletedCount();$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $result = $writeResult->getModifiedCount();$/;"	v
resultSet	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $resultSet = $this->query($query, function ($query) {$/;"	v
resultSet	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $resultSet = $this->db->trigger('before_select', $query);$/;"	v
resultSet	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $resultSet = $this->getResult($options['typeMap']);$/;"	v
resultSet	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $resultSet = $this->query($query, $mongoQuery);$/;"	v
rollback	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function rollback()$/;"	f
select	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function select(BaseQuery $query): array$/;"	f
startTime	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $startTime = microtime(true);$/;"	v
startTime	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $startTime = microtime(true);$/;"	v
startTrans	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function startTrans()$/;"	f
tag	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $tag       = $cacheItem->getTag();$/;"	v
transaction	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function transaction(callable $callback)$/;"	f
typeMap	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $this->typeMap = $config['type_map'];$/;"	v
typeMap	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $typeMap = $this->typeMap;$/;"	v
typeMap	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $this->typeMap = $this->config['type_map'];$/;"	v
typeMap	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $typeMap = is_string($typeMap) ? ['root' => $typeMap] : $typeMap;$/;"	v
typeMap	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    protected $typeMap = 'array';$/;"	v
update	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function update(BaseQuery $query): int$/;"	f
url	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^            $url = $url . $hostList[$i] . ':' . $portList[0] . ',';$/;"	v
url	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $url = 'mongodb:\/\/' . ($this->config['username'] ? "{$this->config['username']}" : '') . ($this->config['password'] ? ":{$this->config['password']}@" : '');$/;"	v
value	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^                    $value = $value->__toString();$/;"	v
value	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^    public function value(BaseQuery $query, string $field, $default = null)$/;"	f
writeConcern	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $writeConcern         = $options['writeConcern'] ?? null;$/;"	v
writeResult	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $writeResult = $this->execute($query, $bulk);$/;"	v
writeResult	vendor\topthink\think-orm\src\db\connector\Mongo.php	/^        $writeResult = $this->mongo->executeBulkWrite($namespace, $bulk, $writeConcern);$/;"	v
Mysql	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^class Mysql extends PDOConnection$/;"	c
commitXa	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function commitXa(string $xid)$/;"	f
dbName	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function getTables(string $dbName = ''): array$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^            $dsn = 'mysql:host=' . $config['hostname'] . ';port=' . $config['hostport'];$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^            $dsn = 'mysql:host=' . $config['hostname'];$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^            $dsn = 'mysql:unix_socket=' . $config['socket'];$/;"	v
getFields	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function getFields(string $tableName): array$/;"	f
getTables	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function getTables(string $dbName = ''): array$/;"	f
info	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^        $info   = [];$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^            foreach ($result as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^        foreach ($result as $key => $val) {$/;"	v
parseDsn	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    protected function parseDsn(array $config): string$/;"	f
pdo	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^        $pdo    = $this->getPDOStatement($sql);$/;"	v
prepareXa	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function prepareXa(string $xid)$/;"	f
result	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
rollbackXa	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function rollbackXa(string $xid)$/;"	f
sql	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^        $sql    = !empty($dbName) ? 'SHOW TABLES FROM ' . $dbName : 'SHOW TABLES ';$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^        $sql    = 'SHOW FULL COLUMNS FROM ' . $tableName;$/;"	v
startTransXa	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    public function startTransXa(string $xid)$/;"	f
supportSavepoint	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^    protected function supportSavepoint(): bool$/;"	f
tableName	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^                $tableName = str_replace('.', '`.`', $tableName);$/;"	v
tableName	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^            $tableName = '`' . $tableName . '`';$/;"	v
val	vendor\topthink\think-orm\src\db\connector\Mysql.php	/^                $val = array_change_key_case($val);$/;"	v
Oracle	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^class Oracle extends PDOConnection$/;"	c
dbName	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    public function getTables(string $dbName = ''): array$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $dsn = 'oci:dbname=';$/;"	v
getFields	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    public function getFields(string $tableName): array$/;"	f
getLastInsID	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    public function getLastInsID(BaseQuery $query, string $sequence = null)$/;"	f
getTables	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    public function getTables(string $dbName = ''): array$/;"	f
info	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $info   = [];$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^            foreach ($result as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        foreach ($result as $key => $val) {$/;"	v
parseDsn	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    protected function parseDsn(array $config): string$/;"	f
pdo	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $pdo    = $this->getPDOStatement($sql);$/;"	v
pdo	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $pdo    = $this->linkID->query("select {$sequence}.currval as id from dual");$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $result = $pdo->fetchColumn();$/;"	v
sequence	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    public function getLastInsID(BaseQuery $query, string $sequence = null)$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $sql         = "select a.column_name,data_type,DECODE (nullable, 'Y', 0, 1) notnull,data_default, DECODE (A .column_name,b.column_name,1,0) pk from all_tab_columns a,(select column_name from all_constraints c, all_cons_columns col where c.constraint_name = col.constraint_name and c.constraint_type = 'P' and c.table_name = '" . strtoupper($tableName) . "' ) b where table_name = '" . strtoupper($tableName) . "' and a.column_name = b.column_name (+)";$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^        $sql    = 'select table_name from all_tables';$/;"	v
supportSavepoint	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^    protected function supportSavepoint(): bool$/;"	f
val	vendor\topthink\think-orm\src\db\connector\Oracle.php	/^                $val = array_change_key_case($val);$/;"	v
Pgsql	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^class Pgsql extends PDOConnection$/;"	c
dbName	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^    public function getTables(string $dbName = ''): array$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        $dsn = 'pgsql:dbname=' . $config['database'] . ';host=' . $config['hostname'];$/;"	v
getFields	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^    public function getFields(string $tableName): array$/;"	f
getTables	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^    public function getTables(string $dbName = ''): array$/;"	f
info	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        $info   = [];$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^            foreach ($result as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        foreach ($result as $key => $val) {$/;"	v
params	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^    protected $params = [$/;"	v
parseDsn	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^    protected function parseDsn(array $config): string$/;"	f
pdo	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        $pdo    = $this->getPDOStatement($sql);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        $sql         = 'select fields_name as "field",fields_type as "type",fields_not_null as "null",fields_key_name as "key",fields_default as "default",fields_default as "extra" from table_msg(\\'' . $tableName . '\\');';$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^        $sql    = "select tablename as Tables_in_test from pg_tables where  schemaname ='public'";$/;"	v
supportSavepoint	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^    protected function supportSavepoint(): bool$/;"	f
val	vendor\topthink\think-orm\src\db\connector\Pgsql.php	/^                $val = array_change_key_case($val);$/;"	v
Sqlite	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^class Sqlite extends PDOConnection$/;"	c
dbName	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^    public function getTables(string $dbName = ''): array$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        $dsn = 'sqlite:' . $config['database'];$/;"	v
getFields	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^    public function getFields(string $tableName): array$/;"	f
getTables	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^    public function getTables(string $dbName = ''): array$/;"	f
info	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        $info   = [];$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^            foreach ($result as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        foreach ($result as $key => $val) {$/;"	v
parseDsn	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^    protected function parseDsn(array $config): string$/;"	f
pdo	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        $pdo    = $this->getPDOStatement($sql);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        $sql         = 'PRAGMA table_info( ' . $tableName . ' )';$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^        $sql = "SELECT name FROM sqlite_master WHERE type='table' "$/;"	v
supportSavepoint	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^    protected function supportSavepoint(): bool$/;"	f
val	vendor\topthink\think-orm\src\db\connector\Sqlite.php	/^                $val = array_change_key_case($val);$/;"	v
Sqlsrv	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^class Sqlsrv extends PDOConnection$/;"	c
dbName	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^    public function getTables(string $dbName = ''): array$/;"	v
dsn	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $dsn = 'sqlsrv:Database=' . $config['database'] . ';Server=' . $config['hostname'];$/;"	v
getFields	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^    public function getFields(string $tableName): array$/;"	f
getTables	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^    public function getTables(string $dbName = ''): array$/;"	f
info	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $info   = [];$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^            foreach ($result as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        foreach ($result as $key => $val) {$/;"	v
params	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^    protected $params = [$/;"	v
parseDsn	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^    protected function parseDsn(array $config): string$/;"	f
pdo	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $pdo    = $this->getPDOStatement($sql);$/;"	v
pdo	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $pdo    = $this->linkID->query($sql);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $result = $pdo->fetch(PDO::FETCH_ASSOC);$/;"	v
result	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $sql    = "SELECT column_name FROM information_schema.key_column_usage WHERE table_name='$tableName'";$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $sql = "SELECT   column_name,   data_type,   column_default,   is_nullable$/;"	v
sql	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^        $sql = "SELECT TABLE_NAME$/;"	v
val	vendor\topthink\think-orm\src\db\connector\Sqlsrv.php	/^                $val = array_change_key_case($val);$/;"	v
pgsql_type	vendor\topthink\think-orm\src\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION pgsql_type(a_type varchar) RETURNS varchar AS$/;"	f
table_msg	vendor\topthink\think-orm\src\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION "public"."table_msg" (a_schema_name varchar, a_table_name varchar) RETURNS SETOF "public"."tablestruct" AS$/;"	f
table_msg	vendor\topthink\think-orm\src\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION "public"."table_msg" (a_table_name varchar) RETURNS SETOF "public"."tablestruct" AS$/;"	f
BindParamException	vendor\topthink\think-orm\src\db\exception\BindParamException.php	/^class BindParamException extends DbException$/;"	c
__construct	vendor\topthink\think-orm\src\db\exception\BindParamException.php	/^    public function __construct(string $message, array $config, string $sql, array $bind, int $code = 10502)$/;"	f
code	vendor\topthink\think-orm\src\db\exception\BindParamException.php	/^    public function __construct(string $message, array $config, string $sql, array $bind, int $code = 10502)$/;"	v
DataNotFoundException	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^class DataNotFoundException extends DbException$/;"	c
__construct	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^    public function __construct(string $message, string $table = '', array $config = [])$/;"	f
getTable	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^    public function getTable()$/;"	f
message	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^        $this->message = $message;$/;"	v
table	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^        $this->table   = $table;$/;"	v
table	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^    protected $table;$/;"	v
table	vendor\topthink\think-orm\src\db\exception\DataNotFoundException.php	/^    public function __construct(string $message, string $table = '', array $config = [])$/;"	v
DbException	vendor\topthink\think-orm\src\db\exception\DbException.php	/^class DbException extends Exception$/;"	c
__construct	vendor\topthink\think-orm\src\db\exception\DbException.php	/^    public function __construct(string $message, array $config = [], string $sql = '', int $code = 10500)$/;"	f
code	vendor\topthink\think-orm\src\db\exception\DbException.php	/^        $this->code    = $code;$/;"	v
config	vendor\topthink\think-orm\src\db\exception\DbException.php	/^    public function __construct(string $message, array $config = [], string $sql = '', int $code = 10500)$/;"	v
data	vendor\topthink\think-orm\src\db\exception\DbException.php	/^    protected $data = [];$/;"	v
getData	vendor\topthink\think-orm\src\db\exception\DbException.php	/^    final public function getData()$/;"	f
message	vendor\topthink\think-orm\src\db\exception\DbException.php	/^        $this->message = $message;$/;"	v
setData	vendor\topthink\think-orm\src\db\exception\DbException.php	/^    final protected function setData($label, array $data)$/;"	f
InvalidArgumentException	vendor\topthink\think-orm\src\db\exception\InvalidArgumentException.php	/^class InvalidArgumentException extends \\InvalidArgumentException implements SimpleCacheInvalidArgumentInterface$/;"	c
ModelEventException	vendor\topthink\think-orm\src\db\exception\ModelEventException.php	/^class ModelEventException extends DbException$/;"	c
ModelNotFoundException	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^class ModelNotFoundException extends DbException$/;"	c
__construct	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^    public function __construct(string $message, string $model = '', array $config = [])$/;"	f
getModel	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^    public function getModel()$/;"	f
message	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^        $this->message = $message;$/;"	v
model	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^        $this->model   = $model;$/;"	v
model	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^    protected $model;$/;"	v
model	vendor\topthink\think-orm\src\db\exception\ModelNotFoundException.php	/^    public function __construct(string $message, string $model = '', array $config = [])$/;"	v
PDOException	vendor\topthink\think-orm\src\db\exception\PDOException.php	/^class PDOException extends DbException$/;"	c
__construct	vendor\topthink\think-orm\src\db\exception\PDOException.php	/^    public function __construct(\\PDOException $exception, array $config = [], string $sql = '', int $code = 10501)$/;"	f
config	vendor\topthink\think-orm\src\db\exception\PDOException.php	/^    public function __construct(\\PDOException $exception, array $config = [], string $sql = '', int $code = 10501)$/;"	v
error	vendor\topthink\think-orm\src\db\exception\PDOException.php	/^        $error = $exception->errorInfo;$/;"	v
Db	vendor\topthink\think-orm\src\facade\Db.php	/^class Db extends Facade$/;"	c
Facade	vendor\topthink\think-orm\src\facade\Db.php	/^    class Facade extends \\think\\Facade$/;"	c
Facade	vendor\topthink\think-orm\src\facade\Db.php	/^    class Facade$/;"	c
__callStatic	vendor\topthink\think-orm\src\facade\Db.php	/^        public static function __callStatic($method, $params)$/;"	f
alwaysNewInstance	vendor\topthink\think-orm\src\facade\Db.php	/^        protected static $alwaysNewInstance;$/;"	v
class	vendor\topthink\think-orm\src\facade\Db.php	/^            $class = static::getFacadeClass() ?: 'think\\DbManager';$/;"	v
createFacade	vendor\topthink\think-orm\src\facade\Db.php	/^        protected static function createFacade(bool $newInstance = false)$/;"	f
getFacadeClass	vendor\topthink\think-orm\src\facade\Db.php	/^        protected static function getFacadeClass()$/;"	f
getFacadeClass	vendor\topthink\think-orm\src\facade\Db.php	/^    protected static function getFacadeClass()$/;"	f
instance	vendor\topthink\think-orm\src\facade\Db.php	/^        protected static $instance;$/;"	v
newInstance	vendor\topthink\think-orm\src\facade\Db.php	/^                $newInstance = true;$/;"	v
newInstance	vendor\topthink\think-orm\src\facade\Db.php	/^        protected static function createFacade(bool $newInstance = false)$/;"	v
Collection	vendor\topthink\think-orm\src\model\Collection.php	/^class Collection extends BaseCollection$/;"	c
allowField	vendor\topthink\think-orm\src\model\Collection.php	/^    public function update(array $data, array $allowField = []): bool$/;"	v
append	vendor\topthink\think-orm\src\model\Collection.php	/^    public function append(array $append)$/;"	f
attrs	vendor\topthink\think-orm\src\model\Collection.php	/^    public function bindAttr(string $relation, array $attrs = [])$/;"	v
bindAttr	vendor\topthink\think-orm\src\model\Collection.php	/^    public function bindAttr(string $relation, array $attrs = [])$/;"	f
cache	vendor\topthink\think-orm\src\model\Collection.php	/^    public function load($relation, $cache = false)$/;"	v
callback	vendor\topthink\think-orm\src\model\Collection.php	/^    public function withAttr($name, $callback = null)$/;"	v
delete	vendor\topthink\think-orm\src\model\Collection.php	/^    public function delete(): bool$/;"	f
dictionary	vendor\topthink\think-orm\src\model\Collection.php	/^        $dictionary = $this->dictionary($items, $indexKey);$/;"	v
dictionary	vendor\topthink\think-orm\src\model\Collection.php	/^    public function dictionary($items = null, string &$indexKey = null)$/;"	f
diff	vendor\topthink\think-orm\src\model\Collection.php	/^        $diff       = [];$/;"	v
diff	vendor\topthink\think-orm\src\model\Collection.php	/^    public function diff($items, string $indexKey = null)$/;"	f
hidden	vendor\topthink\think-orm\src\model\Collection.php	/^    public function hidden(array $hidden)$/;"	f
indexKey	vendor\topthink\think-orm\src\model\Collection.php	/^            $indexKey = $items[0]->getPk();$/;"	v
indexKey	vendor\topthink\think-orm\src\model\Collection.php	/^    public function diff($items, string $indexKey = null)$/;"	v
indexKey	vendor\topthink\think-orm\src\model\Collection.php	/^    public function intersect($items, string $indexKey = null)$/;"	v
intersect	vendor\topthink\think-orm\src\model\Collection.php	/^        $intersect  = [];$/;"	v
intersect	vendor\topthink\think-orm\src\model\Collection.php	/^    public function intersect($items, string $indexKey = null)$/;"	f
item	vendor\topthink\think-orm\src\model\Collection.php	/^            $item = current($this->items);$/;"	v
items	vendor\topthink\think-orm\src\model\Collection.php	/^            $items = $items->all();$/;"	v
items	vendor\topthink\think-orm\src\model\Collection.php	/^        $items = is_null($items) ? $this->items : $items;$/;"	v
load	vendor\topthink\think-orm\src\model\Collection.php	/^    public function load($relation, $cache = false)$/;"	f
setParent	vendor\topthink\think-orm\src\model\Collection.php	/^    public function setParent(Model $parent)$/;"	f
update	vendor\topthink\think-orm\src\model\Collection.php	/^    public function update(array $data, array $allowField = []): bool$/;"	f
visible	vendor\topthink\think-orm\src\model\Collection.php	/^    public function visible(array $visible)$/;"	f
withAttr	vendor\topthink\think-orm\src\model\Collection.php	/^    public function withAttr($name, $callback = null)$/;"	f
Pivot	vendor\topthink\think-orm\src\model\Pivot.php	/^class Pivot extends Model$/;"	c
__construct	vendor\topthink\think-orm\src\model\Pivot.php	/^    public function __construct(array $data = [], Model $parent = null, string $table = '')$/;"	f
autoWriteTimestamp	vendor\topthink\think-orm\src\model\Pivot.php	/^    protected $autoWriteTimestamp = false;$/;"	v
data	vendor\topthink\think-orm\src\model\Pivot.php	/^    public function __construct(array $data = [], Model $parent = null, string $table = '')$/;"	v
name	vendor\topthink\think-orm\src\model\Pivot.php	/^            $this->name = $table;$/;"	v
parent	vendor\topthink\think-orm\src\model\Pivot.php	/^        $this->parent = $parent;$/;"	v
parent	vendor\topthink\think-orm\src\model\Pivot.php	/^    public $parent;$/;"	v
Relation	vendor\topthink\think-orm\src\model\Relation.php	/^abstract class Relation$/;"	c
__call	vendor\topthink\think-orm\src\model\Relation.php	/^    public function __call($method, $args)$/;"	f
baseQuery	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $baseQuery;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function baseQuery(): void$/;"	f
data	vendor\topthink\think-orm\src\model\Relation.php	/^    public function update(array $data = []): int$/;"	v
delete	vendor\topthink\think-orm\src\model\Relation.php	/^    public function delete($data = null): int$/;"	f
field	vendor\topthink\think-orm\src\model\Relation.php	/^                $field = $model . '.' . $field;$/;"	v
fields	vendor\topthink\think-orm\src\model\Relation.php	/^            $fields = explode(',', $fields);$/;"	v
fields	vendor\topthink\think-orm\src\model\Relation.php	/^        $fields = $this->query->getOptions('field');$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $foreignKey;$/;"	v
getClosureType	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function getClosureType(Closure $closure)$/;"	f
getModel	vendor\topthink\think-orm\src\model\Relation.php	/^    public function getModel(): Model$/;"	f
getParent	vendor\topthink\think-orm\src\model\Relation.php	/^    public function getParent(): Model$/;"	f
getQuery	vendor\topthink\think-orm\src\model\Relation.php	/^    public function getQuery()$/;"	f
getQueryFields	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function getQueryFields(string $model)$/;"	f
getQueryWhere	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function getQueryWhere(array &$where, string $relation): void$/;"	f
getRelationQueryFields	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function getRelationQueryFields($fields, string $model)$/;"	f
isSelfRelation	vendor\topthink\think-orm\src\model\Relation.php	/^    public function isSelfRelation(): bool$/;"	f
key	vendor\topthink\think-orm\src\model\Relation.php	/^        foreach ($where as $key => &$val) {$/;"	v
localKey	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $localKey;$/;"	v
model	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $model;$/;"	v
params	vendor\topthink\think-orm\src\model\Relation.php	/^        $params  = $reflect->getParameters();$/;"	v
parent	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $parent;$/;"	v
parent	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function resultSetBuild(array $resultSet, Model $parent = null)$/;"	v
query	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $query;$/;"	v
reflect	vendor\topthink\think-orm\src\model\Relation.php	/^        $reflect = new ReflectionFunction($closure);$/;"	v
result	vendor\topthink\think-orm\src\model\Relation.php	/^            $result = call_user_func_array([$this->query, $method], $args);$/;"	v
result	vendor\topthink\think-orm\src\model\Relation.php	/^            return $result === $this->query ? $this : $result;$/;"	v
resultSetBuild	vendor\topthink\think-orm\src\model\Relation.php	/^    protected function resultSetBuild(array $resultSet, Model $parent = null)$/;"	f
selfRelation	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $selfRelation = false;$/;"	v
type	vendor\topthink\think-orm\src\model\Relation.php	/^            $type = $params[0]->getType();$/;"	v
update	vendor\topthink\think-orm\src\model\Relation.php	/^    public function update(array $data = []): int$/;"	f
withField	vendor\topthink\think-orm\src\model\Relation.php	/^        $this->withField = $field;$/;"	v
withField	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $withField;$/;"	v
withField	vendor\topthink\think-orm\src\model\Relation.php	/^    public function withField(array $field)$/;"	f
withLimit	vendor\topthink\think-orm\src\model\Relation.php	/^        $this->withLimit = $limit;$/;"	v
withLimit	vendor\topthink\think-orm\src\model\Relation.php	/^    protected $withLimit;$/;"	v
withLimit	vendor\topthink\think-orm\src\model\Relation.php	/^    public function withLimit(int $limit)$/;"	f
allowField	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function allowField(array $field)$/;"	f
appendData	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function appendData(array $data, bool $set = false)$/;"	f
array	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $array = $this->data;$/;"	v
callback	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function withAttribute($name, callable $callback = null)$/;"	v
closure	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $closure = $this->withAttr[$fieldName];$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $data = $result;$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $this->data = $data;$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $this->data = array_merge($this->data, $data);$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $data = $this->force ? $this->data : array_udiff_assoc($this->data, $this->origin, function ($a, $b) {$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $this->data = [];$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    private $data = [];$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function data(array $data, bool $set = false, array $allow = [])$/;"	f
data	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function setAttr(string $name, $value, array $data = []): void$/;"	v
disuse	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $disuse = [];$/;"	v
field	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $this->field = $field;$/;"	v
field	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $field = [];$/;"	v
fieldName	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $fieldName = $this->getRealFieldName($name);$/;"	v
format	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $format = !empty($param) ? $param : $this->dateFormat;$/;"	v
getAttr	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getAttr(string $name)$/;"	f
getChangedData	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getChangedData(): array$/;"	f
getData	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getData(string $name = null)$/;"	f
getJsonValue	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function getJsonValue($name, $value)$/;"	f
getKey	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getKey()$/;"	f
getOrigin	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getOrigin(string $name = null)$/;"	f
getPk	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getPk()$/;"	f
getRealFieldName	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function getRealFieldName(string $name): string$/;"	f
getRelationValue	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function getRelationValue(string $relation)$/;"	f
getValue	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function getValue(string $name, $value, $relation = false)$/;"	f
isPk	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function isPk(string $key): bool$/;"	f
json	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $json = [];$/;"	v
jsonAssoc	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $jsonAssoc = false;$/;"	v
jsonType	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $jsonType = [];$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            foreach ($name as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        foreach ($data as $key => $value) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        foreach ($this->readonly as $key => $field) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        foreach ($this->withAttr[$name] as $key => $closure) {$/;"	v
method	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $method = 'set' . Str::studly($name) . 'Attr';$/;"	v
method	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $method    = 'get' . Str::studly($name) . 'Attr';$/;"	v
modelRelation	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $modelRelation = $this->$relation();$/;"	v
name	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $name = $this->getRealFieldName($name);$/;"	v
name	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $name = $this->getRealFieldName($name);$/;"	v
name	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getData(string $name = null)$/;"	v
name	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function getOrigin(string $name = null)$/;"	v
option	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $option = !empty($param) ? (int) $param : JSON_UNESCAPED_UNICODE;$/;"	v
origin	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    private $origin = [];$/;"	v
pk	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $pk = $this->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        if (is_string($pk) && $pk == $key) {$/;"	v
pk	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $pk = 'id';$/;"	v
readOnly	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function readOnly(array $field)$/;"	f
readTransform	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function readTransform($value, $type)$/;"	f
readonly	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^        $this->readonly = $field;$/;"	v
readonly	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $readonly = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $relation = $this->isRelationAttr($name);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $relation = false;$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function getValue(string $name, $value, $relation = false)$/;"	v
result	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $result = [];$/;"	v
schema	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $schema = [];$/;"	v
set	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    private $set = [];$/;"	v
set	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function appendData(array $data, bool $set = false)$/;"	v
set	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function data(array $data, bool $set = false, array $allow = [])$/;"	v
set	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function set(string $name, $value): void$/;"	f
setAttr	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function setAttr(string $name, $value, array $data = []): void$/;"	f
setAttrs	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function setAttrs(array $data): void$/;"	f
strict	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $strict = true;$/;"	v
type	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected $type = [];$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value  = $this->formatDateTime($format, $value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value  = $this->formatDateTime($format, $value, true);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = $value->__toString();$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = (float) $value;$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = (float) number_format($value, $param, '.', '');$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = json_encode($value, JSON_FORCE_OBJECT);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = new $type($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = null;$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = strtotime($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                    $value = unserialize($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value   = $closure($value, $this->data);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value  = json_encode($value, $option);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = $this->$method($value, array_merge($this->data, $data));$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = $this->formatDateTime('Y-m-d H:i:s.u', $value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = $this->getJsonValue($fieldName, $value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = $this->getRelationValue($relation);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = $this->writeTransform($value, $this->type[$name]);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = (array) $value;$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = (bool) $value;$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = (int) $value;$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = empty($value) ? [] : json_decode($value, true);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = empty($value) ? new \\stdClass() : json_decode($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = is_numeric($value) ? $value : strtotime($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = json_decode($value, true);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^                $value = serialize($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value    = $this->getData($name);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value    = null;$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value = $this->$method($value, $this->data);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value = $this->autoWriteTimestamp();$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value = $this->getRelationValue($relation);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value = $this->getTimestampValue($value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^            $value = $this->readTransform($value, $this->type[$fieldName]);$/;"	v
withAttr	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    private $withAttr = [];$/;"	v
withAttribute	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    public function withAttribute($name, callable $callback = null)$/;"	f
writeTransform	vendor\topthink\think-orm\src\model\concern\Attribute.php	/^    protected function writeTransform($value, $type)$/;"	f
__toString	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function __toString()$/;"	f
append	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $this->append = $append;$/;"	v
append	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    protected $append = [];$/;"	v
append	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function append(array $append = [])$/;"	f
append	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function append(array $append = [])$/;"	v
appendAttrToArray	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    protected function appendAttrToArray(array &$item, $key, $name)$/;"	f
appendRelationAttr	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function appendRelationAttr(string $attr, array $append)$/;"	f
bindAttr	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $bindAttr = $modelRelation->getBindAttr();$/;"	v
collection	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $collection = new $resultSetType($collection);$/;"	v
collection	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $collection = new ModelCollection($collection);$/;"	v
collection	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function toCollection(iterable $collection = [], string $resultSetType = null): Collection$/;"	v
data	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $data = array_merge($this->data, $this->relation);$/;"	v
getBindAttr	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    protected function getBindAttr(string $name, $value, array &$item = [])$/;"	f
hasVisible	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^                    $hasVisible          = true;$/;"	v
hasVisible	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $hasVisible = false;$/;"	v
hidden	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $this->hidden = $hidden;$/;"	v
hidden	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    protected $hidden = [];$/;"	v
hidden	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function hidden(array $hidden = [])$/;"	f
hidden	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function hidden(array $hidden = [])$/;"	v
item	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $item       = [];$/;"	v
jsonSerialize	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function jsonSerialize()$/;"	f
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^                $key = is_numeric($key) ? $attr : $key;$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            foreach ($append as $key => $attr) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            foreach ($bindAttr as $key => $attr) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        foreach ($data as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        foreach ($this->append as $key => $name) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        foreach ($this->hidden as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        foreach ($this->visible as $key => $val) {$/;"	v
model	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $model = $this->getRelationData($this->$relation());$/;"	v
model	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $model = $this->relation[$relation];$/;"	v
modelRelation	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $modelRelation = $this->$relation();$/;"	v
options	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $relation   = $this->getRelation($key, true);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $relation = $this->isRelationAttr($name);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $relation = Str::camel($attr);$/;"	v
resultSetType	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $resultSetType = $resultSetType ?: $this->resultSetType;$/;"	v
resultSetType	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    protected $resultSetType;$/;"	v
toArray	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function toArray(): array$/;"	f
toCollection	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function toCollection(iterable $collection = [], string $resultSetType = null): Collection$/;"	f
toJson	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string$/;"	f
value	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^            $value       = $this->getAttr($name);$/;"	v
visible	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^        $this->visible = $visible;$/;"	v
visible	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    protected $visible = [];$/;"	v
visible	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function visible(array $visible = [])$/;"	f
visible	vendor\topthink\think-orm\src\model\concern\Conversion.php	/^    public function visible(array $visible = [])$/;"	v
call	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^        $call = 'on' . Str::studly($event);$/;"	v
event	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^    protected static $event;$/;"	v
result	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^                $result = call_user_func([static::class, $call], $this);$/;"	v
result	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^                $result = empty($result) ? true : end($result);$/;"	v
result	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^                $result = self::$event->trigger(static::class . '.' . $event, $this);$/;"	v
result	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^                $result = true;$/;"	v
setEvent	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^    public static function setEvent($event)$/;"	f
trigger	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^    protected function trigger(string $event): bool$/;"	f
withEvent	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^        $this->withEvent = $event;$/;"	v
withEvent	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^    protected $withEvent = true;$/;"	v
withEvent	vendor\topthink\think-orm\src\model\concern\ModelEvent.php	/^    public function withEvent(bool $event)$/;"	f
checkData	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^    protected function checkData(): void$/;"	f
checkResult	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^    protected function checkResult($result): void$/;"	f
getOptimLockField	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^    protected function getOptimLockField()$/;"	f
getWhere	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^    public function getWhere()$/;"	f
lockVer	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^        if ($optimLock && $lockVer = $this->getOrigin($optimLock)) {$/;"	v
optimLock	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^        $optimLock = $this->getOptimLockField();$/;"	v
recordLockVersion	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^    protected function recordLockVersion(): void$/;"	f
updateLockVersion	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^    protected function updateLockVersion(): void$/;"	f
where	vendor\topthink\think-orm\src\model\concern\OptimLock.php	/^        $where     = parent::getWhere();$/;"	v
aggregate	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function relationCount(Query $query, array $relations, string $aggregate = 'sum', string $field = '*', bool $useSubQuery = true): void$/;"	v
alias	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function morphTo($morph = null, array $alias = []): MorphTo$/;"	v
attrs	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function bindAttr(string $relation, array $attrs = [])$/;"	v
autoRelationDelete	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function autoRelationDelete(): void$/;"	f
autoRelationInsert	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function autoRelationInsert(): void$/;"	f
autoRelationUpdate	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function autoRelationUpdate(): void$/;"	f
belongsTo	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function belongsTo(string $model, string $foreignKey = '', string $localKey = ''): BelongsTo$/;"	f
belongsToMany	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function belongsToMany(string $model, string $middle = '', string $foreignKey = '', string $localKey = ''): BelongsToMany$/;"	f
bindAttr	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function bindAttr(string $relation, array $attrs = [])$/;"	f
checkAutoRelationWrite	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function checkAutoRelationWrite(): void$/;"	f
class	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $class    = $this->$relation();$/;"	v
closure	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $closure  = $relation;$/;"	v
closure	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $closure     = null;$/;"	v
closure	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $closure = $name = null;$/;"	v
count	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $count = $this->$relation()->getRelationCountQuery($closure, $aggregate, $field, $name);$/;"	v
count	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $count = $this->$relation()->relationCount($this, $closure, $aggregate, $field, $name);$/;"	v
data	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function setRelation(string $name, $value, array $data = [])$/;"	v
eagerly	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function eagerly(Query $query, string $relation, $field, string $joinType = '', Closure $closure = null, bool $first = false): bool$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function eagerlyResult(Model $result, array $relations, array $withRelationAttr = [], bool $join = false, $cache = false): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function eagerlyResultSet(array &$resultSet, array $relations, array $withRelationAttr = [], bool $join = false, $cache = false): void$/;"	f
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $foreignKey = $morph . '_id';$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $foreignKey = $foreignKey ?: $name . '_id';$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $foreignKey = $foreignKey ?: $this->getForeignKey($this->name);$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $foreignKey = $foreignKey ?: $this->getForeignKey((new $model)->getName());$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function belongsTo(string $model, string $foreignKey = '', string $localKey = ''): BelongsTo$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasMany(string $model, string $foreignKey = '', string $localKey = ''): HasMany$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasManyThrough(string $model, string $through, string $foreignKey = '', string $throughKey = '', string $localKey = '', string $throughPk = ''): HasManyThrough$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasOne(string $model, string $foreignKey = '', string $localKey = ''): HasOne$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasOneThrough(string $model, string $through, string $foreignKey = '', string $throughKey = '', string $localKey = '', string $throughPk = ''): HasOneThrough$/;"	v
getForeignKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function getForeignKey(string $name): string$/;"	f
getParent	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function getParent(): Model$/;"	f
getRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function getRelation(string $name = null, bool $auto = false)$/;"	f
getRelationData	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function getRelationData(Relation $modelRelation)$/;"	f
has	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public static function has(string $relation, string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	f
hasMany	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasMany(string $model, string $foreignKey = '', string $localKey = ''): HasMany$/;"	f
hasManyThrough	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasManyThrough(string $model, string $through, string $foreignKey = '', string $throughKey = '', string $localKey = '', string $throughPk = ''): HasManyThrough$/;"	f
hasOne	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasOne(string $model, string $foreignKey = '', string $localKey = ''): HasOne$/;"	f
hasOneThrough	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function hasOneThrough(string $model, string $through, string $foreignKey = '', string $throughKey = '', string $localKey = '', string $throughPk = ''): HasOneThrough$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public static function hasWhere(string $relation, $where = [], string $fields = '*', string $joinType = '', Query $query = null): Query$/;"	f
isRelationAttr	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function isRelationAttr(string $attr)$/;"	f
joinType	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function eagerly(Query $query, string $relation, $field, string $joinType = '', Closure $closure = null, bool $first = false): bool$/;"	v
key	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $key   = is_numeric($key) ? $attr : $key;$/;"	v
key	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        foreach ($attrs as $key => $attr) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        foreach ($relations as $key => $relation) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        foreach ($this->relationWrite as $key => $name) {$/;"	v
key	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        foreach ($this->together as $key => $name) {$/;"	v
localKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $localKey   = $localKey ?: $this->getForeignKey($this->name);$/;"	v
localKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $localKey   = $localKey ?: $this->getPk();$/;"	v
localKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $localKey   = $localKey ?: (new $model)->getPk();$/;"	v
method	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $method       = Str::camel($relation);$/;"	v
method	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $method = Str::camel($name);$/;"	v
method	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $method = 'set' . Str::studly($name) . 'Attr';$/;"	v
middle	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $middle     = $middle ?: Str::snake($this->name) . '_' . $name;$/;"	v
middle	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function belongsToMany(string $model, string $middle = '', string $foreignKey = '', string $localKey = ''): BelongsToMany$/;"	v
model	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $model = $this->getRelation($name, true);$/;"	v
model	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $model = implode('\\\\', $path);$/;"	v
model	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $model      = $this->parseModel($model);$/;"	v
model	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $model = $this->parseModel($model);$/;"	v
morph	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $morph = $relation;$/;"	v
morph	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $morph = Str::snake($trace[1]['function']);$/;"	v
morph	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function morphMany(string $model, $morph = null, string $type = ''): MorphMany$/;"	v
morph	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function morphOne(string $model, $morph = null, string $type = ''): MorphOne$/;"	v
morphMany	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function morphMany(string $model, $morph = null, string $type = ''): MorphMany$/;"	f
morphOne	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function morphOne(string $model, $morph = null, string $type = ''): MorphOne$/;"	f
morphTo	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function morphTo($morph = null, array $alias = []): MorphTo$/;"	f
morphType	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $morphType  = $morph . '_type';$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $name     = $relation;$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $name = Str::snake($relation) . '_' . $aggregate;$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $name   = is_numeric($key) ? $name : $key;$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $name = class_basename($name);$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $name       = Str::snake(class_basename($model));$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        foreach ($this->relationWrite as $name => $val) {$/;"	v
name	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function getRelation(string $name = null, bool $auto = false)$/;"	v
operator	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public static function has(string $relation, string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	v
parent	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $this->parent = $model;$/;"	v
parent	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    private $parent;$/;"	v
parseModel	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected function parseModel(string $model): string$/;"	f
path	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $path = explode('\\\\', static::class);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $relation    = $key;$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $relation = $key;$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relation     = Str::camel($relation);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relation = Str::camel($name);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relation = Str::camel($relation);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $relation   = Str::snake($trace[1]['function']);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $relation = $this->getRelation($relation);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $relation = Str::camel($attr);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $relation = Str::camel($relation);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $relation = Str::snake($trace[1]['function']);$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $this->relation = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    private $relation = [];$/;"	v
relationCache	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $relationCache = $cache[$relationName] ?? $cache;$/;"	v
relationCache	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $relationCache = $cache[$relationName] ?? [];$/;"	v
relationCache	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $relationCache = [$cache];$/;"	v
relationCount	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function relationCount(Query $query, array $relations, string $aggregate = 'sum', string $field = '*', bool $useSubQuery = true): void$/;"	f
relationName	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relationName = $relation;$/;"	v
relationName	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relationName = Str::snake($relation);$/;"	v
relationQuery	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function relationQuery(array $relations, array $withRelationAttr = []): void$/;"	f
relationResult	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relationResult = $this->$method();$/;"	v
relationResult	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $relationResult = $this->$relation();$/;"	v
relationWrite	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    protected $relationWrite = [];$/;"	v
removeRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function removeRelation()$/;"	f
result	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $result = $this->getRelation($name, true);$/;"	v
setParent	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function setParent(Model $model)$/;"	f
setRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function setRelation(string $name, $value, array $data = [])$/;"	f
subRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $subRelation = $relation;$/;"	v
subRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^                $subRelation = [$subRelation];$/;"	v
subRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $subRelation = '';$/;"	v
subRelation	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $subRelation = [];$/;"	v
through	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $through    = $this->parseModel($through);$/;"	v
throughKey	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $throughKey = $throughKey ?: $this->getForeignKey((new $through)->getName());$/;"	v
throughPk	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $throughPk  = $throughPk ?: (new $through)->getPk();$/;"	v
together	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $this->together = $relation;$/;"	v
together	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    private $together = [];$/;"	v
together	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function together(array $relation)$/;"	f
trace	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);$/;"	v
trace	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $trace      = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);$/;"	v
trace	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $trace    = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);$/;"	v
type	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^        $type = $type ?: get_class($this);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $value = $this->$method($value, array_merge($this->data, $data));$/;"	v
value	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^            $value = $this->getOrigin($key);$/;"	v
where	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public static function hasWhere(string $relation, $where = [], string $fields = '*', string $joinType = '', Query $query = null): Query$/;"	v
withRelationAttr	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function eagerlyResult(Model $result, array $relations, array $withRelationAttr = [], bool $join = false, $cache = false): void$/;"	v
withRelationAttr	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function eagerlyResultSet(array &$resultSet, array $relations, array $withRelationAttr = [], bool $join = false, $cache = false): void$/;"	v
withRelationAttr	vendor\topthink\think-orm\src\model\concern\RelationShip.php	/^    public function relationQuery(array $relations, array $withRelationAttr = []): void$/;"	v
array	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $array = explode('.', $field);$/;"	v
condition	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $condition = is_null($this->defaultSoftDelete) ? ['null', ''] : ['=', $this->defaultSoftDelete];$/;"	v
data	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $data = null;$/;"	v
delete	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public function delete(): bool$/;"	f
destroy	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public static function destroy($data, bool $force = false): bool$/;"	f
field	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $field = '__TABLE__.' . $field;$/;"	v
field	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $field = array_pop($array);$/;"	v
field	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $field = $model->getDeleteTimeField(true);$/;"	v
field	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $field = $this->getDeleteTimeField();$/;"	v
field	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $field = $this->getDeleteTimeField(true);$/;"	v
field	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $field = property_exists($this, 'deleteTime') && isset($this->deleteTime) ? $this->deleteTime : 'delete_time';$/;"	v
force	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public static function destroy($data, bool $force = false): bool$/;"	v
getDeleteTimeField	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    protected function getDeleteTimeField(bool $read = false)$/;"	f
getWithTrashedExp	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    protected function getWithTrashedExp(): array$/;"	f
model	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $model = new static();$/;"	v
name	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $name = $this->getDeleteTimeField();$/;"	v
onlyTrashed	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public static function onlyTrashed(): Query$/;"	f
pk	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $pk = $this->getPk();$/;"	v
query	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $query = (new static())->db(false);$/;"	v
read	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    protected function getDeleteTimeField(bool $read = false)$/;"	v
restore	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public function restore($where = []): bool$/;"	f
result	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $result = $this->db()$/;"	v
result	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $result = $this->exists()->withEvent(false)->save();$/;"	v
resultSet	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $resultSet = $query->select($data);$/;"	v
trashed	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public function trashed(): bool$/;"	f
where	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^            $where = $this->getWhere();$/;"	v
withNoTrashed	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    protected function withNoTrashed(Query $query): void$/;"	f
withTrashed	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^        $this->withTrashed = $withTrashed;$/;"	v
withTrashed	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    protected $withTrashed = false;$/;"	v
withTrashed	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    public static function withTrashed(): Query$/;"	f
withTrashedData	vendor\topthink\think-orm\src\model\concern\SoftDelete.php	/^    protected function withTrashedData(bool $withTrashed)$/;"	f
autoWriteTimestamp	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^        $this->autoWriteTimestamp = $this->checkTimeFieldType($auto);$/;"	v
autoWriteTimestamp	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected $autoWriteTimestamp;$/;"	v
autoWriteTimestamp	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected function autoWriteTimestamp()$/;"	f
checkTimeFieldType	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected function checkTimeFieldType($type)$/;"	f
createTime	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected $createTime = 'create_time';$/;"	v
dateFormat	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^        $this->dateFormat = $format;$/;"	v
dateFormat	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected $dateFormat;$/;"	v
dateTime	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^            $dateTime = $time;$/;"	v
dateTime	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^            $dateTime = new DateTime($time);$/;"	v
dateTime	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^            $dateTime = new DateTime();$/;"	v
formatDateTime	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected function formatDateTime($format, $time = 'now', bool $timestamp = false)$/;"	f
getAutoWriteTimestamp	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    public function getAutoWriteTimestamp()$/;"	f
getDateFormat	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    public function getDateFormat()$/;"	f
getTimeTypeValue	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected function getTimeTypeValue(string $type)$/;"	f
getTimestampValue	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected function getTimestampValue($value)$/;"	f
isAutoWriteTimestamp	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    public function isAutoWriteTimestamp($auto)$/;"	f
obj	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^                    $obj = new $type();$/;"	v
setDateFormat	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    public function setDateFormat($format)$/;"	f
time	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected function formatDateTime($format, $time = 'now', bool $timestamp = false)$/;"	v
type	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^                $type = $this->getFieldType($this->createTime);$/;"	v
type	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^                $type = $this->schema[$this->createTime];$/;"	v
type	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^                $type = $this->type[$this->createTime];$/;"	v
type	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^        $type = $this->checkTimeFieldType($this->autoWriteTimestamp);$/;"	v
updateTime	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^    protected $updateTime = 'update_time';$/;"	v
value	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^                        $value = $obj->__toString();$/;"	v
value	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^                $value = $this->formatDateTime('Y-m-d H:i:s.u');$/;"	v
value	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^            $value = $this->formatDateTime($this->dateFormat, $value);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^            $value = $this->formatDateTime($this->dateFormat, $value, true);$/;"	v
value	vendor\topthink\think-orm\src\model\concern\TimeStamp.php	/^        $value = time();$/;"	v
BelongsTo	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^class BelongsTo extends OneToOne$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function __construct(Model $parent, string $model, string $foreignKey, string $localKey, string $relation = null)$/;"	f
associate	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function associate(Model $model): Model$/;"	f
baseQuery	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    protected function baseQuery(): void$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', &$name = ''): string$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	v
data	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^            $data = $this->eagerlyWhere([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $data = $this->eagerlyWhere([$/;"	v
dissociate	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function dissociate(): Model$/;"	f
eagerlyOne	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    protected function eagerlyOne(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlySet	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    protected function eagerlySet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $fields     = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null): Query$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	f
getRelationCountQuery	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', &$name = ''): string$/;"	f
has	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null): Query$/;"	f
localKey	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $this->localKey   = $localKey;$/;"	v
model	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $model      = class_basename($this->parent);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $model    = class_basename($this->parent);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $this->model      = $model;$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $this->parent     = $parent;$/;"	v
query	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $query      = $query ?: $this->parent->db()->alias($model);$/;"	v
query	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $this->query      = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $range = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $relation   = class_basename($this->model);$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $relation = class_basename($this->model);$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $this->relation   = $relation;$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function __construct(Model $parent, string $model, string $foreignKey, string $localKey, string $relation = null)$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	f
relationModel	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^                    $relationModel = $data[$result->$foreignKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^                    $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^            $relationModel = $data[$result->$foreignKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^            $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $relationModel = $this->query$/;"	v
selfRelation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^            $this->selfRelation = true;$/;"	v
softDelete	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $softDelete = $this->query->getOptions('soft_delete');$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    protected function eagerlyOne(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    protected function eagerlySet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	v
table	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $table      = $this->query->getTable();$/;"	v
table	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^        $table    = $this->query->getTable();$/;"	v
where	vendor\topthink\think-orm\src\model\relation\BelongsTo.php	/^            $where = $this->query;$/;"	v
BelongsToMany	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^class BelongsToMany extends Relation$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function __construct(Model $parent, string $model, string $middle, string $foreignKey, string $localKey)$/;"	f
attach	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function attach($data, array $pivot = [])$/;"	f
attached	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function attached($data)$/;"	f
belongsToManyQuery	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function belongsToManyQuery(string $foreignKey, string $localKey, array $condition = []): Query$/;"	f
buildQuery	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function buildQuery(): Query$/;"	f
changes	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $changes = [$/;"	v
class	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $class = $this->pivotName ?: Pivot::class;$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): float$/;"	v
condition	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $condition = ['pivot.' . $localKey, '=', $this->parent->$pk];$/;"	v
condition	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function belongsToManyQuery(string $foreignKey, string $localKey, array $condition = []): Query$/;"	v
current	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $current = $this->pivot$/;"	v
data	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $data = $this->eagerlyManyToMany([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $data = [];$/;"	v
data	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function newPivot(array $data = []): Pivot$/;"	v
detach	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $detach = array_diff($current, array_keys($records));$/;"	v
detach	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function detach($data = null, bool $relationDel = false): int$/;"	f
detaching	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function sync(array $ids, bool $detaching = true): array$/;"	v
eagerlyManyToMany	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function eagerlyManyToMany(array $where, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $fields    = $this->getQueryFields($tableName);$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	v
find	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function find($data = null)$/;"	f
findOrFail	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function findOrFail($data = null): Model$/;"	f
foreignKey	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection$/;"	f
getRelationCountQuery	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	f
has	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function has(string $operator = '>=', $count = 1, $id = '*', string $joinType = 'INNER', Query $query = null)$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	f
hydratePivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function hydratePivot(iterable $models)$/;"	f
id	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^                $id    = $model->insertGetId($data);$/;"	v
id	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^                $id = $data;$/;"	v
id	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $id         = $data->$relationFk;$/;"	v
id	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $id = $data->getKey();$/;"	v
id	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $id = $data;$/;"	v
id	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        foreach ($records as $id => $attributes) {$/;"	v
ids	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $ids                    = (array) $id;$/;"	v
key	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $key = $pivot[$this->localKey];$/;"	v
key	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            foreach ($model->getData() as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            foreach ($set->getData() as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
key	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        foreach ($ids as $key => $value) {$/;"	v
list	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $list = $this->belongsToManyQuery($this->foreignKey, $this->localKey, $where)$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $localKey = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->localKey   = $localKey;$/;"	v
middle	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $this->middle    = class_basename($middle);$/;"	v
middle	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $this->middle = $middle;$/;"	v
middle	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected $middle;$/;"	v
model	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^                $model = new $this->model;$/;"	v
model	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $model = $this->model;$/;"	v
model	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->model      = $model;$/;"	v
name	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function name(string $name)$/;"	f
newPivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function newPivot(array $data = []): Pivot$/;"	f
op	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function wherePivot($field, $op = null, $condition = null)$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function has(string $operator = '>=', $count = 1, $id = '*', string $joinType = 'INNER', Query $query = null)$/;"	v
paginate	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function paginate($listRows = null, $simple = false): Paginator$/;"	f
parent	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->parent     = $parent;$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $pivot = [];$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pivot   = [];$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pivot = $this->pivot$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pivot = new $class($data, $this->parent, $this->middle);$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->pivot = $this->newPivot();$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected $pivot;$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function attach($data, array $pivot = [])$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function pivot(string $pivot)$/;"	f
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function save($data, array $pivot = [])$/;"	v
pivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function saveAll(iterable $dataSet, array $pivot = [], bool $samePivot = false)$/;"	v
pivotData	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^                $pivotData = $pivot;$/;"	v
pivotData	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^                $pivotData = $pivot[$key] ?? [];$/;"	v
pivotDataName	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->pivotDataName = $name;$/;"	v
pivotDataName	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected $pivotDataName = 'pivot';$/;"	v
pivotName	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $this->pivotName = $middle;$/;"	v
pivotName	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->pivotName = $pivot;$/;"	v
pivotName	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected $pivotName;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $pk                     = $this->parent->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $pk = $result->$pk;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pk       = $resultSet[0]->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pk      = $this->parent->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pk = $result->$pk;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pk = $result->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $pk = $this->parent->getPk();$/;"	v
query	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $query = $this->query$/;"	v
query	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $this->query = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $range    = [];$/;"	v
records	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $records = [];$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): float$/;"	f
relationDel	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function detach($data = null, bool $relationDel = false): int$/;"	v
relationFk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $relationFk = $data->getPk();$/;"	v
relationFk	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^            $relationFk = $this->query->getPk();$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^                $result = $result[0];$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->find($data);$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->paginate($listRows, $simple);$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->select($data);$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $result = $this->pivot->where($pivot)->delete();$/;"	v
result	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $result = [];$/;"	v
save	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function save($data, array $pivot = [])$/;"	f
saveAll	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function saveAll(iterable $dataSet, array $pivot = [], bool $samePivot = false)$/;"	f
select	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function select($data = null): Collection$/;"	f
selectOrFail	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function selectOrFail($data = null): Collection$/;"	f
simple	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function paginate($listRows = null, $simple = false): Paginator$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    protected function eagerlyManyToMany(array $where, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection$/;"	v
sync	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function sync(array $ids, bool $detaching = true): array$/;"	f
table	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $table     = $this->pivot->db()->getTable();$/;"	v
tableName	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^        $tableName = $this->query->getTable();$/;"	v
wherePivot	vendor\topthink\think-orm\src\model\relation\BelongsToMany.php	/^    public function wherePivot($field, $op = null, $condition = null)$/;"	f
HasMany	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^class HasMany extends Relation$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function __construct(Model $parent, string $model, string $foreignKey, string $localKey)$/;"	f
baseQuery	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    protected function baseQuery(): void$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $data = $data->getData();$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $data = $this->eagerlyOneToMany([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $data = [];$/;"	v
eagerlyOneToMany	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    protected function eagerlyOneToMany(array $where, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $fields     = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null): Query$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection$/;"	f
getRelationCountQuery	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	f
has	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = 'INNER', Query $query = null): Query$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null): Query$/;"	f
id	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $id = $relation . '.' . (new $this->model)->getPk();$/;"	v
key	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $key = $set->$foreignKey;$/;"	v
key	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
list	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $list = $this->query$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $localKey = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $this->localKey   = $localKey;$/;"	v
make	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function make($data = []): Model$/;"	f
model	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $model    = class_basename($this->parent);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $model = $this->make();$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $this->model      = $model;$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = 'INNER', Query $query = null): Query$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $this->parent     = $parent;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^                $pk = $result->$localKey;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $pk   = $result->$localKey;$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $query      = $query ?: $this->parent->db()->alias($model);$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $this->query      = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $range    = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $relation = class_basename($this->model);$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	f
replace	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function save($data, bool $replace = true)$/;"	v
replace	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function saveAll(iterable $dataSet, bool $replace = true)$/;"	v
result	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $result = [];$/;"	v
save	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function save($data, bool $replace = true)$/;"	f
saveAll	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function saveAll(iterable $dataSet, bool $replace = true)$/;"	f
selfRelation	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $this->selfRelation = true;$/;"	v
softDelete	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $softDelete = $this->query->getOptions('soft_delete');$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    protected function eagerlyOneToMany(array $where, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection$/;"	v
table	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $table    = $this->query->getTable();$/;"	v
table	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^        $table = $this->query->getTable();$/;"	v
where	vendor\topthink\think-orm\src\model\relation\HasMany.php	/^            $where = $this->query;$/;"	v
HasManyThrough	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^class HasManyThrough extends Relation$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function __construct(Model $parent, string $model, string $through, string $foreignKey, string $throughKey, string $localKey, string $throughPk)$/;"	f
alias	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $alias        = Str::snake(class_basename($this->model));$/;"	v
alias	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $alias        = Str::snake(class_basename($this->model));$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    protected function baseQuery(): void$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $data = $this->eagerlyWhere([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $data = $this->eagerlyWhere([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $data = [];$/;"	v
eagerlyResult	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyWhere	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    protected function eagerlyWhere(array $where, string $key, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	f
field	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $field = $alias . '.' . $field;$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $fields       = $this->getQueryFields($alias);$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $fields     = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function hasWhere($where = [], $fields = null, $joinType = '', Query $query = null): Query$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	f
getRelationCountQuery	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	f
has	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function hasWhere($where = [], $fields = null, $joinType = '', Query $query = null): Query$/;"	f
id	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $id = $relationTable . '.' . $relation->getPk();$/;"	v
key	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $key = $keys[$set->{$this->throughKey}];$/;"	v
keys	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $keys        = $throughList->column($this->throughPk, $this->throughPk);$/;"	v
keys	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $keys = $throughList->column($this->foreignKey, $this->throughPk);$/;"	v
list	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $list = $this->query$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $localKey = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->localKey   = $localKey;$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $model         = Str::snake(class_basename($this->parent));$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $model        = Str::snake(class_basename($this->parent));$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->model      = $model;$/;"	v
modelTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $modelTable   = $this->parent->getTable();$/;"	v
modelTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $modelTable   = $this->parent->getTable();$/;"	v
modelTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $modelTable   = (new $this->model)->getTable();$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->parent     = $parent;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^                $pk = $result->$localKey;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $pk           = $this->throughPk;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $pk            = $this->throughPk;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $pk           = $this->throughPk;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $pk         = $result->$localKey;$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $query      = $query ?: $this->parent->db()->alias($model);$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $query = $query ?: $this->parent->db()->alias($model);$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->query      = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $range = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $relation      = new $this->model;$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	f
relationTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $relationTable = $relation->getTable();$/;"	v
softDelete	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $softDelete    = $this->query->getOptions('soft_delete');$/;"	v
softDelete	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $softDelete = $this->query->getOptions('soft_delete');$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    protected function eagerlyWhere(array $where, string $key, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	v
through	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->through    = (new $through)->db();$/;"	v
through	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    protected $through;$/;"	v
throughKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $throughKey   = $this->throughKey;$/;"	v
throughKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->throughKey = $throughKey;$/;"	v
throughKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $throughKey    = $this->throughKey;$/;"	v
throughKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $throughKey   = $this->throughKey;$/;"	v
throughKey	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    protected $throughKey;$/;"	v
throughList	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $throughList = $this->through->where($where)->select();$/;"	v
throughPk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $this->throughPk  = $throughPk;$/;"	v
throughPk	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^    protected $throughPk;$/;"	v
throughTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $throughTable = $this->through->getTable();$/;"	v
throughTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $throughTable  = $this->through->getTable();$/;"	v
throughTable	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^        $throughTable = $this->through->getTable();$/;"	v
where	vendor\topthink\think-orm\src\model\relation\HasManyThrough.php	/^            $where = $this->query;$/;"	v
HasOne	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^class HasOne extends OneToOne$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function __construct(Model $parent, string $model, string $foreignKey, string $localKey)$/;"	f
baseQuery	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    protected function baseQuery(): void$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^            $data = $this->eagerlyWhere([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $data = $this->eagerlyWhere([$/;"	v
eagerlyOne	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    protected function eagerlyOne(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlySet	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    protected function eagerlySet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $fields     = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null): Query$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	f
getRelationCountQuery	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	f
has	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null): Query$/;"	f
localKey	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $localKey = $this->localKey;$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $this->localKey   = $localKey;$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $model      = class_basename($this->parent);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $model    = class_basename($this->parent);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $this->model      = $model;$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null): Query$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $this->parent     = $parent;$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $query      = $query ?: $this->parent->db()->alias($model);$/;"	v
query	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $this->query      = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $range = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $relation   = class_basename($this->model);$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $relation = class_basename($this->model);$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	f
relationModel	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^                    $relationModel = $data[$result->$localKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^                    $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^            $relationModel = $data[$result->$localKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^            $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $relationModel = $this->query$/;"	v
selfRelation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^            $this->selfRelation = true;$/;"	v
softDelete	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $softDelete = $this->query->getOptions('soft_delete');$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    protected function eagerlyOne(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    protected function eagerlySet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	v
table	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $table      = $this->query->getTable();$/;"	v
table	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^        $table    = $this->query->getTable();$/;"	v
where	vendor\topthink\think-orm\src\model\relation\HasOne.php	/^            $where = $this->query;$/;"	v
HasOneThrough	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^class HasOneThrough extends HasManyThrough$/;"	c
data	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^            $data = $this->eagerlyWhere([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $data = $this->eagerlyWhere([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $data = [];$/;"	v
eagerlyResult	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyWhere	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    protected function eagerlyWhere(array $where, string $key, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	f
foreignKey	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $foreignKey = $this->foreignKey;$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	f
keys	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $keys = $this->through->where($where)->column($this->throughPk, $this->foreignKey);$/;"	v
keys	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $keys = array_flip($keys);$/;"	v
list	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $list = $this->query$/;"	v
localKey	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $localKey   = $this->localKey;$/;"	v
range	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $range = [];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^                    $relationModel = $data[$result->$localKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^                    $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^            $relationModel = $data[$result->$localKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^            $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^        $relationModel = $this->query->relation($subRelation)->find();$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    protected function eagerlyWhere(array $where, string $key, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\HasOneThrough.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	v
MorphMany	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^class MorphMany extends Relation$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function __construct(Model $parent, string $model, string $morphKey, string $morphType, string $type)$/;"	f
baseQuery	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    protected function baseQuery(): void$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $data = $data->getData();$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $data = $this->eagerlyMorphToMany($where, $subRelation, $closure, $cache);$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $data = $this->eagerlyMorphToMany([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $data = [];$/;"	v
eagerlyMorphToMany	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    protected function eagerlyMorphToMany(array $where, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection$/;"	f
getRelationCountQuery	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function getRelationCountQuery(Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null): string$/;"	f
has	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null)$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	f
key	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $key  = $result->$pk;$/;"	v
key	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $key = $set->$morphKey;$/;"	v
key	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
list	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $list = $this->query$/;"	v
make	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function make($data = []): Model$/;"	f
model	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $model = $this->make();$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $this->model     = $model;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $morphKey = $this->morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    protected $morphKey;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $morphType = $this->morphType;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $this->morphType = $morphType;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    protected $morphType;$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null)$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $this->parent    = $parent;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $pk = $result->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $pk = $this->parent->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $pk = $result->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $pk = $this->parent->getPk();$/;"	v
query	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $this->query     = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $range     = [];$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*', string &$name = null)$/;"	f
replace	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function save($data, bool $replace = true)$/;"	v
replace	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function saveAll(iterable $dataSet, bool $replace = true)$/;"	v
result	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $result = [];$/;"	v
save	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function save($data, bool $replace = true)$/;"	f
saveAll	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function saveAll(iterable $dataSet, bool $replace = true)$/;"	f
subRelation	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    protected function eagerlyMorphToMany(array $where, array $subRelation = [], Closure $closure = null, array $cache = []): array$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null): Collection$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $this->type      = $type;$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^        $type      = $this->type;$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^    protected $type;$/;"	v
where	vendor\topthink\think-orm\src\model\relation\MorphMany.php	/^            $where = [$/;"	v
MorphOne	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^class MorphOne extends Relation$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function __construct(Model $parent, string $model, string $morphKey, string $morphType, string $type)$/;"	f
baseQuery	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    protected function baseQuery(): void$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^            $data = $data->getData();$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^            $data = $this->eagerlyMorphToOne([$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $data = [];$/;"	v
eagerlyMorphToOne	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    protected function eagerlyMorphToOne(array $where, array $subRelation = [], $closure = null, array $cache = []): array$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	v
getRelation	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	f
has	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null)$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	f
list	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $list = $this->query$/;"	v
make	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function make($data = []): Model$/;"	f
model	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $model = $this->make();$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $this->model     = $model;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $morphKey = $this->morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    protected $morphKey;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $morphType = $this->morphType;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $this->morphType = $morphType;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    protected $morphType;$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null)$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $this->parent    = $parent;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^            $pk   = $result->$pk;$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^            $pk = $result->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^            $pk = $this->parent->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $pk = $result->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $pk = $this->parent->getPk();$/;"	v
query	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $this->query     = (new $model)->db();$/;"	v
range	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $range     = [];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^                    $relationModel = $data[$result->$pk];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^                    $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^                $relationModel = $data[$pk];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^                $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $relationModel = $this->query->relation($subRelation)->find();$/;"	v
replace	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function save($data, bool $replace = true)$/;"	v
save	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function save($data, bool $replace = true)$/;"	f
subRelation	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    protected function eagerlyMorphToOne(array $where, array $subRelation = [], $closure = null, array $cache = []): array$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $this->type      = $type;$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^        $type      = $this->type;$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphOne.php	/^    protected $type;$/;"	v
MorphTo	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^class MorphTo extends Relation$/;"	c
__construct	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function __construct(Model $parent, string $morphType, string $morphKey, array $alias = [], string $relation = null)$/;"	f
alias	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $this->alias     = $alias;$/;"	v
alias	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $this->alias = $alias;$/;"	v
alias	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected $alias = [];$/;"	v
alias	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function __construct(Model $parent, string $morphType, string $morphKey, array $alias = [], string $relation = null)$/;"	v
associate	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function associate(Model $model, string $type = ''): Model$/;"	f
closure	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	v
closure	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*')$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                $data = [];$/;"	v
data	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $data = (new $model)->with($subRelation)$/;"	v
dissociate	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function dissociate(): Model$/;"	f
eagerlyMorphToOne	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected function eagerlyMorphToOne(string $model, string $relation, Model $result, array $subRelation = [], array $cache = []): void$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation, Closure $closure = null, array $cache = []): void$/;"	f
fields	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	v
getModel	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function getModel(): Model$/;"	f
getRelation	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	f
has	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null)$/;"	f
hasWhere	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function hasWhere($where = [], $fields = null, string $joinType = '', Query $query = null)$/;"	f
k	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                foreach ($list as $k => $vo) {$/;"	v
key	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^            foreach ($range as $key => $val) {$/;"	v
list	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                $list  = $obj->with($subRelation)$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                $model = $this->parseModel($key);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^            $model = $this->alias[$model];$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^            $model = implode('\\\\', $path);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $model     = $this->parseModel($this->parent->$morphType);$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $model = $this->parseModel($result->{$this->morphType});$/;"	v
model	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $model = $this->parseModel($this->parent->$morphType);$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected $morphKey;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $morphType = $this->morphType;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $this->morphType = $morphType;$/;"	v
morphType	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected $morphType;$/;"	v
obj	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                $obj   = new $model;$/;"	v
operator	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function has(string $operator = '>=', int $count = 1, string $id = '*', string $joinType = '', Query $query = null)$/;"	v
parent	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $this->parent    = $parent;$/;"	v
parseModel	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected function parseModel(string $model): string$/;"	f
path	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^            $path = explode('\\\\', get_class($this->parent));$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                $pk    = $obj->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $pk        = $model->getPk();$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $pk   = $this->parent->{$this->morphKey};$/;"	v
pk	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $pk = $this->parent->$morphKey;$/;"	v
range	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $range     = [];$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $this->relation  = $relation;$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected $relation;$/;"	v
relationCount	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function relationCount(Model $result, Closure $closure = null, string $aggregate = 'count', string $field = '*')$/;"	f
relationModel	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                            $relationModel = $data[$result->$morphKey];$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^                            $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^        $relationModel = (new $model)->relation($subRelation)->find($pk);$/;"	v
removeOption	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function removeOption()$/;"	f
setAlias	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function setAlias(array $alias)$/;"	f
subRelation	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    protected function eagerlyMorphToOne(string $model, string $relation, Model $result, array $subRelation = [], array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = []): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function getRelation(array $subRelation = [], Closure $closure = null)$/;"	v
type	vendor\topthink\think-orm\src\model\relation\MorphTo.php	/^    public function associate(Model $model, string $type = ''): Model$/;"	v
OneToOne	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^abstract class OneToOne extends Relation$/;"	c
array	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $array = array_unique($list[$relation]);$/;"	v
baseQuery	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $this->baseQuery = true;$/;"	v
bind	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function bind(array $attr)$/;"	f
bindAttr	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $this->bindAttr = $attr;$/;"	v
bindAttr	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected $bindAttr = [];$/;"	v
bindAttr	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected function bindAttr(Model $model, Model $result): void$/;"	f
data	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $data = $data->getData();$/;"	v
data	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $data = [];$/;"	v
eagerly	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function eagerly(Query $query, string $relation, $field = true, string $joinType = '', Closure $closure = null, bool $first = false): void$/;"	f
eagerlyOne	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    abstract protected function eagerlyOne(Model $result, string $relation, array $subRelation = [], Closure $closure = null);$/;"	f
eagerlyResult	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = [], bool $join = false): void$/;"	f
eagerlyResultSet	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = [], bool $join = false): void$/;"	f
eagerlySet	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    abstract protected function eagerlySet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null);$/;"	f
eagerlyWhere	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected function eagerlyWhere(array $where, string $key, array $subRelation = [], Closure $closure = null, array $cache = [])$/;"	f
field	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^                $field = $this->withField;$/;"	v
field	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function eagerly(Query $query, string $relation, $field = true, string $joinType = '', Closure $closure = null, bool $first = false): void$/;"	v
getBindAttr	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function getBindAttr(): array$/;"	f
joinAlias	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $joinAlias = $relation;$/;"	v
joinOn	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $joinOn = $name . '.' . $this->foreignKey . '=' . $joinAlias . '.' . $this->localKey;$/;"	v
joinOn	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $joinOn = $name . '.' . $this->localKey . '=' . $joinAlias . '.' . $this->foreignKey;$/;"	v
joinTable	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $joinTable = $this->query->getTable();$/;"	v
joinType	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $joinType  = $joinType ?: $this->joinType;$/;"	v
joinType	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $this->joinType = $type;$/;"	v
joinType	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected $joinType = 'INNER';$/;"	v
joinType	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function joinType(string $type)$/;"	f
key	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $key   = is_numeric($key) ? $attr : $key;$/;"	v
key	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        foreach ($result->getData() as $key => $val) {$/;"	v
key	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        foreach ($this->bindAttr as $key => $attr) {$/;"	v
list	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $list = $this->query$/;"	v
masterField	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^                $masterField = $query->getOptions('field');$/;"	v
masterField	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^                $masterField = true;$/;"	v
match	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected function match(string $model, string $relation, Model $result): void$/;"	f
model	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $model = new $this->model;$/;"	v
name	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^        $name = Str::snake(class_basename($this->parent));$/;"	v
relation	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected $relation;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^                $relationModel = new $model($list[$relation]);$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^                $relationModel = null;$/;"	v
relationModel	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $relationModel = null;$/;"	v
replace	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function save($data, bool $replace = true)$/;"	v
save	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function save($data, bool $replace = true)$/;"	f
subRelation	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    abstract protected function eagerlyOne(Model $result, string $relation, array $subRelation = [], Closure $closure = null);$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    abstract protected function eagerlySet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null);$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    protected function eagerlyWhere(array $where, string $key, array $subRelation = [], Closure $closure = null, array $cache = [])$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function eagerlyResult(Model $result, string $relation, array $subRelation = [], Closure $closure = null, array $cache = [], bool $join = false): void$/;"	v
subRelation	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^    public function eagerlyResultSet(array &$resultSet, string $relation, array $subRelation = [], Closure $closure = null, array $cache = [], bool $join = false): void$/;"	v
table	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $table = $query->getTable();$/;"	v
value	vendor\topthink\think-orm\src\model\relation\OneToOne.php	/^            $value = $result->getOrigin($key);$/;"	v
Bootstrap	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^class Bootstrap extends Paginator$/;"	c
block	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        $block = [$/;"	v
getActivePageWrapper	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getActivePageWrapper(string $text): string$/;"	f
getAvailablePageWrapper	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getAvailablePageWrapper(string $url, string $page): string$/;"	f
getDisabledTextWrapper	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getDisabledTextWrapper(string $text): string$/;"	f
getDots	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getDots(): string$/;"	f
getLinks	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getLinks(): string$/;"	f
getNextButton	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getNextButton(string $text = '&raquo;'): string$/;"	f
getPageLinkWrapper	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getPageLinkWrapper(string $url, string $page): string$/;"	f
getPreviousButton	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getPreviousButton(string $text = "&laquo;"): string$/;"	f
getUrlLinks	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getUrlLinks(array $urls): string$/;"	f
html	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        $html = '';$/;"	v
page	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        foreach ($urls as $page => $url) {$/;"	v
render	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    public function render()$/;"	f
side	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        $side   = 3;$/;"	v
text	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getNextButton(string $text = '&raquo;'): string$/;"	v
text	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^    protected function getPreviousButton(string $text = "&laquo;"): string$/;"	v
url	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        $url = $this->url($/;"	v
url	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        $url = $this->url($this->currentPage() + 1);$/;"	v
window	vendor\topthink\think-orm\src\paginator\driver\Bootstrap.php	/^        $window = $side * 2;$/;"	v
Console	vendor\topthink\think-trace\src\Console.php	/^class Console$/;"	c
__construct	vendor\topthink\think-trace\src\Console.php	/^    public function __construct(array $config = [])$/;"	f
accept	vendor\topthink\think-trace\src\Console.php	/^        $accept      = $request->header('accept', '');$/;"	v
base	vendor\topthink\think-trace\src\Console.php	/^        $base = [$/;"	v
config	vendor\topthink\think-trace\src\Console.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\think-trace\src\Console.php	/^    protected $config = [$/;"	v
config	vendor\topthink\think-trace\src\Console.php	/^    public function __construct(array $config = [])$/;"	v
console	vendor\topthink\think-trace\src\Console.php	/^    protected function console(string $type, $msg)$/;"	f
contentType	vendor\topthink\think-trace\src\Console.php	/^        $contentType = $response->getHeader('Content-Type');$/;"	v
files	vendor\topthink\think-trace\src\Console.php	/^        $files = get_included_files();$/;"	v
getFileInfo	vendor\topthink\think-trace\src\Console.php	/^    protected function getFileInfo()$/;"	f
info	vendor\topthink\think-trace\src\Console.php	/^        $info  = [];$/;"	v
info	vendor\topthink\think-trace\src\Console.php	/^        $info = $this->getFileInfo();$/;"	v
js	vendor\topthink\think-trace\src\Console.php	/^        $js = <<<JS$/;"	v
key	vendor\topthink\think-trace\src\Console.php	/^        foreach ($files as $key => $file) {$/;"	v
key	vendor\topthink\think-trace\src\Console.php	/^        foreach ((array) $msg as $key => $m) {$/;"	v
line	vendor\topthink\think-trace\src\Console.php	/^        $line       = [];$/;"	v
lines	vendor\topthink\think-trace\src\Console.php	/^        $lines = '';$/;"	v
log	vendor\topthink\think-trace\src\Console.php	/^    public function output(App $app, Response $response, array $log = [])$/;"	v
m	vendor\topthink\think-trace\src\Console.php	/^                    $m      = is_string($key) ? $key . ' ' . $m : $key + 1 . ' ' . $m;$/;"	v
mem	vendor\topthink\think-trace\src\Console.php	/^        $mem     = number_format((memory_get_usage() - $app->getBeginMem()) \/ 1024, 2);$/;"	v
msg	vendor\topthink\think-trace\src\Console.php	/^                    $msg    = json_encode($m);$/;"	v
msg	vendor\topthink\think-trace\src\Console.php	/^                    $msg    = str_replace("\\n", '\\n', addslashes($m));$/;"	v
msg	vendor\topthink\think-trace\src\Console.php	/^                    $msg    = str_replace("\\n", '\\n', addslashes(is_scalar($m) ? $m : json_encode($m)));$/;"	v
name	vendor\topthink\think-trace\src\Console.php	/^            $name = strtolower($name);$/;"	v
name	vendor\topthink\think-trace\src\Console.php	/^        foreach ($this->config['tabs'] as $name => $title) {$/;"	v
names	vendor\topthink\think-trace\src\Console.php	/^                        $names  = explode('|', $name);$/;"	v
output	vendor\topthink\think-trace\src\Console.php	/^    public function output(App $app, Response $response, array $log = [])$/;"	f
reqs	vendor\topthink\think-trace\src\Console.php	/^        $reqs    = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
request	vendor\topthink\think-trace\src\Console.php	/^        $request     = $app->request;$/;"	v
result	vendor\topthink\think-trace\src\Console.php	/^                            $result = array_merge($result, $log[$item] ?? []);$/;"	v
result	vendor\topthink\think-trace\src\Console.php	/^                        $result = [];$/;"	v
runtime	vendor\topthink\think-trace\src\Console.php	/^        $runtime = number_format(microtime(true) - $app->getBeginTime(), 10);$/;"	v
style	vendor\topthink\think-trace\src\Console.php	/^                    $style  = "color:#009bb4;";$/;"	v
style	vendor\topthink\think-trace\src\Console.php	/^                    $style  = 'color:#F4006B;font-size:14px;';$/;"	v
trace	vendor\topthink\think-trace\src\Console.php	/^        $trace = [];$/;"	v
trace_tabs	vendor\topthink\think-trace\src\Console.php	/^        $trace_tabs = array_values($this->config['tabs']);$/;"	v
type	vendor\topthink\think-trace\src\Console.php	/^        $type       = strtolower($type);$/;"	v
type	vendor\topthink\think-trace\src\Console.php	/^        foreach ($trace as $type => $msg) {$/;"	v
uri	vendor\topthink\think-trace\src\Console.php	/^            $uri = $request->protocol() . ' ' . $request->method() . ' : ' . $request->url(true);$/;"	v
uri	vendor\topthink\think-trace\src\Console.php	/^            $uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
var_type	vendor\topthink\think-trace\src\Console.php	/^                    $var_type = gettype($m);$/;"	v
Html	vendor\topthink\think-trace\src\Html.php	/^class Html$/;"	c
__construct	vendor\topthink\think-trace\src\Html.php	/^    public function __construct(array $config = [])$/;"	f
accept	vendor\topthink\think-trace\src\Html.php	/^        $accept      = $request->header('accept', '');$/;"	v
base	vendor\topthink\think-trace\src\Html.php	/^        $base = [$/;"	v
config	vendor\topthink\think-trace\src\Html.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	vendor\topthink\think-trace\src\Html.php	/^    protected $config = [$/;"	v
config	vendor\topthink\think-trace\src\Html.php	/^    public function __construct(array $config = [])$/;"	v
contentType	vendor\topthink\think-trace\src\Html.php	/^        $contentType = $response->getHeader('Content-Type');$/;"	v
files	vendor\topthink\think-trace\src\Html.php	/^        $files = get_included_files();$/;"	v
getFileInfo	vendor\topthink\think-trace\src\Html.php	/^    protected function getFileInfo()$/;"	f
info	vendor\topthink\think-trace\src\Html.php	/^        $info  = [];$/;"	v
info	vendor\topthink\think-trace\src\Html.php	/^        $info = $this->getFileInfo();$/;"	v
key	vendor\topthink\think-trace\src\Html.php	/^        foreach ($files as $key => $file) {$/;"	v
log	vendor\topthink\think-trace\src\Html.php	/^    public function output(App $app, Response $response, array $log = [])$/;"	v
mem	vendor\topthink\think-trace\src\Html.php	/^        $mem     = number_format((memory_get_usage() - $app->getBeginMem()) \/ 1024, 2);$/;"	v
name	vendor\topthink\think-trace\src\Html.php	/^            $name = strtolower($name);$/;"	v
name	vendor\topthink\think-trace\src\Html.php	/^        foreach ($this->config['tabs'] as $name => $title) {$/;"	v
names	vendor\topthink\think-trace\src\Html.php	/^                        $names  = explode('|', $name);$/;"	v
output	vendor\topthink\think-trace\src\Html.php	/^    public function output(App $app, Response $response, array $log = [])$/;"	f
reqs	vendor\topthink\think-trace\src\Html.php	/^        $reqs    = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
request	vendor\topthink\think-trace\src\Html.php	/^        $request = $app->request;$/;"	v
result	vendor\topthink\think-trace\src\Html.php	/^                            $result = array_merge($result, $log[$item] ?? []);$/;"	v
result	vendor\topthink\think-trace\src\Html.php	/^                        $result = [];$/;"	v
runtime	vendor\topthink\think-trace\src\Html.php	/^        $runtime = number_format(microtime(true) - $app->getBeginTime(), 10, '.', '');$/;"	v
trace	vendor\topthink\think-trace\src\Html.php	/^        $trace = [];$/;"	v
uri	vendor\topthink\think-trace\src\Html.php	/^            $uri = $request->protocol() . ' ' . $request->method() . ' : ' . $request->url(true);$/;"	v
uri	vendor\topthink\think-trace\src\Html.php	/^            $uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
Service	vendor\topthink\think-trace\src\Service.php	/^class Service extends BaseService$/;"	c
register	vendor\topthink\think-trace\src\Service.php	/^    public function register()$/;"	f
TraceDebug	vendor\topthink\think-trace\src\TraceDebug.php	/^class TraceDebug$/;"	c
__construct	vendor\topthink\think-trace\src\TraceDebug.php	/^    public function __construct(App $app, Config $config)$/;"	f
app	vendor\topthink\think-trace\src\TraceDebug.php	/^        $this->app    = $app;$/;"	v
app	vendor\topthink\think-trace\src\TraceDebug.php	/^    protected $app;$/;"	v
config	vendor\topthink\think-trace\src\TraceDebug.php	/^        $config = $this->config;$/;"	v
config	vendor\topthink\think-trace\src\TraceDebug.php	/^        $this->config = $config->get('trace');$/;"	v
config	vendor\topthink\think-trace\src\TraceDebug.php	/^    protected $config = [];$/;"	v
content	vendor\topthink\think-trace\src\TraceDebug.php	/^                    $content = $content . $output;$/;"	v
content	vendor\topthink\think-trace\src\TraceDebug.php	/^                    $content = substr($content, 0, $pos) . $output . substr($content, $pos);$/;"	v
data	vendor\topthink\think-trace\src\TraceDebug.php	/^            $data = $response->getContent();$/;"	v
debug	vendor\topthink\think-trace\src\TraceDebug.php	/^        $debug = $this->app->isDebug();$/;"	v
handle	vendor\topthink\think-trace\src\TraceDebug.php	/^    public function handle($request, Closure $next)$/;"	f
log	vendor\topthink\think-trace\src\TraceDebug.php	/^                    $this->log = array_merge_recursive($this->log, $event->log);$/;"	v
log	vendor\topthink\think-trace\src\TraceDebug.php	/^            $log    = $this->app->log->getLog($config['channel'] ?? '');$/;"	v
log	vendor\topthink\think-trace\src\TraceDebug.php	/^            $log    = array_merge_recursive($this->log, $log);$/;"	v
log	vendor\topthink\think-trace\src\TraceDebug.php	/^            $this->log = [];$/;"	v
log	vendor\topthink\think-trace\src\TraceDebug.php	/^    protected $log = [];$/;"	v
output	vendor\topthink\think-trace\src\TraceDebug.php	/^            $output = $trace->output($this->app, $response, $log);$/;"	v
pos	vendor\topthink\think-trace\src\TraceDebug.php	/^                $pos = strripos($content, '<\/body>');$/;"	v
response	vendor\topthink\think-trace\src\TraceDebug.php	/^        $response = $next($request);$/;"	v
trace	vendor\topthink\think-trace\src\TraceDebug.php	/^        $trace = App::factory($type, '\\\\think\\\\trace\\\\', $config);$/;"	v
traceDebug	vendor\topthink\think-trace\src\TraceDebug.php	/^    public function traceDebug(Response $response, &$content)$/;"	f
type	vendor\topthink\think-trace\src\TraceDebug.php	/^        $type   = $config['type'] ?? 'Html';$/;"	v
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
